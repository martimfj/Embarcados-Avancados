
niosHello.elf:     file format elf32-littlenios2
niosHello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00004908 memsz 0x00004908 flags r-x
    LOAD off    0x00005928 vaddr 0x00004928 paddr 0x00005354 align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00006d80 vaddr 0x00005d80 paddr 0x00005d80 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00006354  2**0
                  CONTENTS
  2 .text         000048bc  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  000048dc  000048dc  000058dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  00004928  00005354  00005928  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  00005d80  00005d80  00006d80  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00005dc4  00005dc4  00006354  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006354  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000008c8  00000000  00000000  00006378  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000149dc  00000000  00000000  00006c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000053df  00000000  00000000  0001b61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006111  00000000  00000000  000209fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001298  00000000  00000000  00026b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ffe  00000000  00000000  00027da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  00029da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0002e87c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d0  00000000  00000000  0002e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00030e3a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00030e3d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00030e49  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00030e4a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00030e4b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00030e56  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00030e61  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00030e6c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000051  00000000  00000000  00030e75  2**0
                  CONTENTS, READONLY
 26 .jdi          00004f87  00000000  00000000  00030ec6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00031bbe  00000000  00000000  00035e4d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000048dc l    d  .rodata	00000000 .rodata
00004928 l    d  .rwdata	00000000 .rwdata
00005d80 l    d  .bss	00000000 .bss
00005dc4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosHello_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00000268 l     F .text	00000008 __fp_unlock
0000027c l     F .text	0000019c __sinit.part.1
00000418 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00004928 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00002f08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000301c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00003048 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000313c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003224 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003310 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000034ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00005350 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00003790 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000038cc l     F .text	00000034 alt_dev_reg
000052fc l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00003d24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00003ee4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00004044 l     F .text	0000003c alt_get_errno
00004080 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00002cd8 g     F .text	00000054 _isatty_r
00003428 g     F .text	0000007c alt_main
000000fc g     F .text	000000c0 _puts_r
00002a00 g     F .text	00000060 _lseek_r
00005354 g       *ABS*	00000000 __flash_rwdata_start
00005dc4 g       *ABS*	00000000 __alt_heap_start
00001fb4 g     F .text	0000005c __sseek
000005c8 g     F .text	00000010 __sinit
00000420 g     F .text	00000078 __sfmoreglue
000034c8 g     F .text	00000024 __malloc_unlock
000016a0 g     F .text	0000015c memmove
000005b0 g     F .text	00000018 _cleanup
000042c8 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002c7c g     F .text	0000005c _fstat_r
00005d8c g     O .bss	00000004 errno
00001f30 g     F .text	00000008 __seofread
00005d94 g     O .bss	00000004 alt_argv
0000d328 g       *ABS*	00000000 _gp
00003760 g     F .text	00000030 usleep
0000517c g     O .rwdata	00000180 alt_fd_list
000042ec g     F .text	00000090 alt_find_dev
00001558 g     F .text	00000148 memcpy
00000270 g     F .text	0000000c _cleanup_r
00003fc8 g     F .text	0000007c alt_io_redirect
000048dc g       *ABS*	00000000 __DTOR_END__
000001bc g     F .text	00000014 puts
00003a2c g     F .text	000000ec altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002e24 g     F .text	00000064 .hidden __udivsi3
00003178 g     F .text	000000ac isatty
00005d88 g     O .bss	00000004 __malloc_top_pad
00000618 g     F .text	000004c8 __sfvwrite_r
00001e88 g     F .text	00000054 _sbrk_r
00002c1c g     F .text	00000060 _read_r
00005348 g     O .rwdata	00000004 alt_max_fd
00002220 g     F .text	000000f0 _fclose_r
0000259c g     F .text	00000030 fflush
00005d84 g     O .bss	00000004 __malloc_max_sbrked_mem
0000334c g     F .text	000000dc lseek
00005328 g     O .rwdata	00000004 _global_impure_ptr
00001924 g     F .text	00000564 _realloc_r
00005dc4 g       *ABS*	00000000 __bss_end
000005e8 g     F .text	00000018 __fp_lock_all
00005154 g     O .rwdata	00000028 alt_dev_null
00003d04 g     F .text	00000020 alt_dcache_flush_all
00005354 g       *ABS*	00000000 __ram_rwdata_end
00005340 g     O .rwdata	00000008 alt_dev_list
000037cc g     F .text	00000100 write
00004928 g       *ABS*	00000000 __ram_rodata_end
00003084 g     F .text	000000b8 fstat
00002e88 g     F .text	00000058 .hidden __umodsi3
00005dc4 g       *ABS*	00000000 end
000048dc g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
00003b18 g     F .text	00000094 altera_avalon_jtag_uart_write
000005d8 g     F .text	00000004 __sfp_lock_acquire
00001474 g     F .text	000000e4 memchr
000026f0 g     F .text	00000310 _free_r
00004728 g     F .text	00000180 __call_exitprocs
00005330 g     O .rwdata	00000004 __malloc_sbrk_base
00000020 g     F .text	0000003c _start
00003528 g     F .text	00000104 read
00003938 g     F .text	00000034 alt_sys_init
00004610 g     F .text	00000118 __register_exitproc
00002ee0 g     F .text	00000028 .hidden __mulsi3
00004928 g       *ABS*	00000000 __ram_rwdata_start
000048dc g       *ABS*	00000000 __ram_rodata_start
00005d9c g     O .bss	00000028 __malloc_current_mallinfo
0000396c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00004484 g     F .text	000000c4 alt_get_fd
00003bac g     F .text	00000158 alt_busy_sleep
000021cc g     F .text	00000054 _close_r
00004594 g     F .text	0000007c memcmp
00005dc4 g       *ABS*	00000000 __alt_stack_base
00002078 g     F .text	00000154 __swsetup_r
00000498 g     F .text	00000118 __sfp
00004d4c g     O .rwdata	00000408 __malloc_av_
000005e4 g     F .text	00000004 __sinit_lock_release
00001edc g     F .text	00000054 __sread
0000437c g     F .text	00000108 alt_find_file
00003d60 g     F .text	000000a4 alt_dev_llist_insert
000034a4 g     F .text	00000024 __malloc_lock
000036b0 g     F .text	000000b0 sbrk
00002540 g     F .text	0000005c _fflush_r
00005d80 g       *ABS*	00000000 __bss_start
000017fc g     F .text	00000128 memset
000000a0 g     F .text	0000005c main
00005d98 g     O .bss	00000004 alt_envp
00005d80 g     O .bss	00000004 __malloc_max_total_mem
000039cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002010 g     F .text	00000008 __sclose
00008000 g       *ABS*	00000000 __alt_heap_limit
00002310 g     F .text	00000014 fclose
00000c68 g     F .text	0000080c _malloc_r
0000534c g     O .rwdata	00000004 alt_errno
00000ae0 g     F .text	000000c4 _fwalk
00002d2c g     F .text	00000084 .hidden __divsi3
000025cc g     F .text	00000124 _malloc_trim_r
000048dc g       *ABS*	00000000 __CTOR_END__
000048dc g       *ABS*	00000000 __flash_rodata_start
000048dc g       *ABS*	00000000 __DTOR_LIST__
0000005c g     F .text	00000044 delay
00003900 g     F .text	00000038 alt_irq_init
0000362c g     F .text	00000084 alt_release_fd
00004548 g     F .text	00000014 atexit
00002018 g     F .text	00000060 _write_r
0000532c g     O .rwdata	00000004 _impure_ptr
00005d90 g     O .bss	00000004 alt_argc
00002324 g     F .text	0000021c __sflush_r
00003e64 g     F .text	00000060 _do_dtors
00000600 g     F .text	00000018 __fp_unlock_all
00005338 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005354 g       *ABS*	00000000 _edata
00005dc4 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00001f38 g     F .text	0000007c __swrite
00005334 g     O .rwdata	00000004 __malloc_trim_threshold
0000455c g     F .text	00000038 exit
00000ba4 g     F .text	000000c4 _fwalk_reent
00002db0 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
000005dc g     F .text	00000004 __sfp_lock_release
000048a8 g     F .text	00000034 _exit
00002a60 g     F .text	000001bc __smakebuf_r
000001d0 g     F .text	00000098 strlen
0000416c g     F .text	0000015c open
00003ec4 g     F .text	00000020 alt_icache_flush_all
00003e04 g     F .text	00000060 _do_ctors
00002f44 g     F .text	000000d8 close
0000328c g     F .text	00000084 alt_load
000005e0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6b4ca14 	ori	gp,gp,54056
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	10976014 	ori	r2,r2,23936

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18d77114 	ori	r3,r3,24004

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	000328c0 	call	328c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00034280 	call	3428 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <delay>:
#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
      5c:	defffd04 	addi	sp,sp,-12
      60:	df000215 	stw	fp,8(sp)
      64:	df000204 	addi	fp,sp,8
      68:	e13fff15 	stw	r4,-4(fp)
      unsigned int delay = 0 ;
      6c:	e03ffe15 	stw	zero,-8(fp)
      while(delay < n){
      70:	00000306 	br	80 <delay+0x24>
          delay++;
      74:	e0bffe17 	ldw	r2,-8(fp)
      78:	10800044 	addi	r2,r2,1
      7c:	e0bffe15 	stw	r2,-8(fp)
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
      unsigned int delay = 0 ;
      while(delay < n){
      80:	e0bfff17 	ldw	r2,-4(fp)
      84:	e0fffe17 	ldw	r3,-8(fp)
      88:	18bffa36 	bltu	r3,r2,74 <delay+0x18>
          delay++;
      }
}
      8c:	0001883a 	nop
      90:	e037883a 	mov	sp,fp
      94:	df000017 	ldw	fp,0(sp)
      98:	dec00104 	addi	sp,sp,4
      9c:	f800283a 	ret

000000a0 <main>:

int main(void){
      a0:	defffd04 	addi	sp,sp,-12
      a4:	dfc00215 	stw	ra,8(sp)
      a8:	df000115 	stw	fp,4(sp)
      ac:	df000104 	addi	fp,sp,4
  unsigned int led = 0;
      b0:	e03fff15 	stw	zero,-4(fp)

  printf("Embarcados++ \n");
      b4:	01000034 	movhi	r4,0
      b8:	21123704 	addi	r4,r4,18652
      bc:	00001bc0 	call	1bc <puts>

  while(1){
      if (led <= 5){
      c0:	e0bfff17 	ldw	r2,-4(fp)
      c4:	108001a8 	cmpgeui	r2,r2,6
      c8:	10000a1e 	bne	r2,zero,f4 <main+0x54>
          IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << led++);
      cc:	e0bfff17 	ldw	r2,-4(fp)
      d0:	10c00044 	addi	r3,r2,1
      d4:	e0ffff15 	stw	r3,-4(fp)
      d8:	00c00044 	movi	r3,1
      dc:	1886983a 	sll	r3,r3,r2
      e0:	00a40014 	movui	r2,36864
      e4:	10c00035 	stwio	r3,0(r2)
          usleep(50000);
      e8:	0130d414 	movui	r4,50000
      ec:	00037600 	call	3760 <usleep>
      f0:	003ff306 	br	c0 <main+0x20>
      }
      else{
          led = 0;
      f4:	e03fff15 	stw	zero,-4(fp)
      }
  };
      f8:	003ff106 	br	c0 <main+0x20>

000000fc <_puts_r>:
      fc:	defff604 	addi	sp,sp,-40
     100:	dc000715 	stw	r16,28(sp)
     104:	2021883a 	mov	r16,r4
     108:	2809883a 	mov	r4,r5
     10c:	dc400815 	stw	r17,32(sp)
     110:	dfc00915 	stw	ra,36(sp)
     114:	2823883a 	mov	r17,r5
     118:	00001d00 	call	1d0 <strlen>
     11c:	10c00044 	addi	r3,r2,1
     120:	d8800115 	stw	r2,4(sp)
     124:	00800034 	movhi	r2,0
     128:	10923b04 	addi	r2,r2,18668
     12c:	d8800215 	stw	r2,8(sp)
     130:	00800044 	movi	r2,1
     134:	d8800315 	stw	r2,12(sp)
     138:	00800084 	movi	r2,2
     13c:	dc400015 	stw	r17,0(sp)
     140:	d8c00615 	stw	r3,24(sp)
     144:	dec00415 	stw	sp,16(sp)
     148:	d8800515 	stw	r2,20(sp)
     14c:	80000226 	beq	r16,zero,158 <_puts_r+0x5c>
     150:	80800e17 	ldw	r2,56(r16)
     154:	10001426 	beq	r2,zero,1a8 <_puts_r+0xac>
     158:	81400217 	ldw	r5,8(r16)
     15c:	2880030b 	ldhu	r2,12(r5)
     160:	10c8000c 	andi	r3,r2,8192
     164:	1800061e 	bne	r3,zero,180 <_puts_r+0x84>
     168:	29001917 	ldw	r4,100(r5)
     16c:	00f7ffc4 	movi	r3,-8193
     170:	10880014 	ori	r2,r2,8192
     174:	20c6703a 	and	r3,r4,r3
     178:	2880030d 	sth	r2,12(r5)
     17c:	28c01915 	stw	r3,100(r5)
     180:	d9800404 	addi	r6,sp,16
     184:	8009883a 	mov	r4,r16
     188:	00006180 	call	618 <__sfvwrite_r>
     18c:	1000091e 	bne	r2,zero,1b4 <_puts_r+0xb8>
     190:	00800284 	movi	r2,10
     194:	dfc00917 	ldw	ra,36(sp)
     198:	dc400817 	ldw	r17,32(sp)
     19c:	dc000717 	ldw	r16,28(sp)
     1a0:	dec00a04 	addi	sp,sp,40
     1a4:	f800283a 	ret
     1a8:	8009883a 	mov	r4,r16
     1ac:	00005c80 	call	5c8 <__sinit>
     1b0:	003fe906 	br	158 <_puts_r+0x5c>
     1b4:	00bfffc4 	movi	r2,-1
     1b8:	003ff606 	br	194 <_puts_r+0x98>

000001bc <puts>:
     1bc:	00800034 	movhi	r2,0
     1c0:	1094cb04 	addi	r2,r2,21292
     1c4:	200b883a 	mov	r5,r4
     1c8:	11000017 	ldw	r4,0(r2)
     1cc:	00000fc1 	jmpi	fc <_puts_r>

000001d0 <strlen>:
     1d0:	208000cc 	andi	r2,r4,3
     1d4:	10002026 	beq	r2,zero,258 <strlen+0x88>
     1d8:	20800007 	ldb	r2,0(r4)
     1dc:	10002026 	beq	r2,zero,260 <strlen+0x90>
     1e0:	2005883a 	mov	r2,r4
     1e4:	00000206 	br	1f0 <strlen+0x20>
     1e8:	10c00007 	ldb	r3,0(r2)
     1ec:	18001826 	beq	r3,zero,250 <strlen+0x80>
     1f0:	10800044 	addi	r2,r2,1
     1f4:	10c000cc 	andi	r3,r2,3
     1f8:	183ffb1e 	bne	r3,zero,1e8 <strlen+0x18>
     1fc:	10c00017 	ldw	r3,0(r2)
     200:	01ffbff4 	movhi	r7,65279
     204:	39ffbfc4 	addi	r7,r7,-257
     208:	00ca303a 	nor	r5,zero,r3
     20c:	01a02074 	movhi	r6,32897
     210:	19c7883a 	add	r3,r3,r7
     214:	31a02004 	addi	r6,r6,-32640
     218:	1946703a 	and	r3,r3,r5
     21c:	1986703a 	and	r3,r3,r6
     220:	1800091e 	bne	r3,zero,248 <strlen+0x78>
     224:	10800104 	addi	r2,r2,4
     228:	10c00017 	ldw	r3,0(r2)
     22c:	19cb883a 	add	r5,r3,r7
     230:	00c6303a 	nor	r3,zero,r3
     234:	28c6703a 	and	r3,r5,r3
     238:	1986703a 	and	r3,r3,r6
     23c:	183ff926 	beq	r3,zero,224 <strlen+0x54>
     240:	00000106 	br	248 <strlen+0x78>
     244:	10800044 	addi	r2,r2,1
     248:	10c00007 	ldb	r3,0(r2)
     24c:	183ffd1e 	bne	r3,zero,244 <strlen+0x74>
     250:	1105c83a 	sub	r2,r2,r4
     254:	f800283a 	ret
     258:	2005883a 	mov	r2,r4
     25c:	003fe706 	br	1fc <strlen+0x2c>
     260:	0005883a 	mov	r2,zero
     264:	f800283a 	ret

00000268 <__fp_unlock>:
     268:	0005883a 	mov	r2,zero
     26c:	f800283a 	ret

00000270 <_cleanup_r>:
     270:	01400034 	movhi	r5,0
     274:	29488804 	addi	r5,r5,8736
     278:	0000ba41 	jmpi	ba4 <_fwalk_reent>

0000027c <__sinit.part.1>:
     27c:	defff704 	addi	sp,sp,-36
     280:	00c00034 	movhi	r3,0
     284:	dfc00815 	stw	ra,32(sp)
     288:	ddc00715 	stw	r23,28(sp)
     28c:	dd800615 	stw	r22,24(sp)
     290:	dd400515 	stw	r21,20(sp)
     294:	dd000415 	stw	r20,16(sp)
     298:	dcc00315 	stw	r19,12(sp)
     29c:	dc800215 	stw	r18,8(sp)
     2a0:	dc400115 	stw	r17,4(sp)
     2a4:	dc000015 	stw	r16,0(sp)
     2a8:	18c09c04 	addi	r3,r3,624
     2ac:	24000117 	ldw	r16,4(r4)
     2b0:	20c00f15 	stw	r3,60(r4)
     2b4:	2080bb04 	addi	r2,r4,748
     2b8:	00c000c4 	movi	r3,3
     2bc:	20c0b915 	stw	r3,740(r4)
     2c0:	2080ba15 	stw	r2,744(r4)
     2c4:	2000b815 	stw	zero,736(r4)
     2c8:	05c00204 	movi	r23,8
     2cc:	00800104 	movi	r2,4
     2d0:	2025883a 	mov	r18,r4
     2d4:	b80d883a 	mov	r6,r23
     2d8:	81001704 	addi	r4,r16,92
     2dc:	000b883a 	mov	r5,zero
     2e0:	80000015 	stw	zero,0(r16)
     2e4:	80000115 	stw	zero,4(r16)
     2e8:	80000215 	stw	zero,8(r16)
     2ec:	8080030d 	sth	r2,12(r16)
     2f0:	80001915 	stw	zero,100(r16)
     2f4:	8000038d 	sth	zero,14(r16)
     2f8:	80000415 	stw	zero,16(r16)
     2fc:	80000515 	stw	zero,20(r16)
     300:	80000615 	stw	zero,24(r16)
     304:	00017fc0 	call	17fc <memset>
     308:	05800034 	movhi	r22,0
     30c:	94400217 	ldw	r17,8(r18)
     310:	05400034 	movhi	r21,0
     314:	05000034 	movhi	r20,0
     318:	04c00034 	movhi	r19,0
     31c:	b587b704 	addi	r22,r22,7900
     320:	ad47ce04 	addi	r21,r21,7992
     324:	a507ed04 	addi	r20,r20,8116
     328:	9cc80404 	addi	r19,r19,8208
     32c:	85800815 	stw	r22,32(r16)
     330:	85400915 	stw	r21,36(r16)
     334:	85000a15 	stw	r20,40(r16)
     338:	84c00b15 	stw	r19,44(r16)
     33c:	84000715 	stw	r16,28(r16)
     340:	00800284 	movi	r2,10
     344:	8880030d 	sth	r2,12(r17)
     348:	00800044 	movi	r2,1
     34c:	b80d883a 	mov	r6,r23
     350:	89001704 	addi	r4,r17,92
     354:	000b883a 	mov	r5,zero
     358:	88000015 	stw	zero,0(r17)
     35c:	88000115 	stw	zero,4(r17)
     360:	88000215 	stw	zero,8(r17)
     364:	88001915 	stw	zero,100(r17)
     368:	8880038d 	sth	r2,14(r17)
     36c:	88000415 	stw	zero,16(r17)
     370:	88000515 	stw	zero,20(r17)
     374:	88000615 	stw	zero,24(r17)
     378:	00017fc0 	call	17fc <memset>
     37c:	94000317 	ldw	r16,12(r18)
     380:	00800484 	movi	r2,18
     384:	8c400715 	stw	r17,28(r17)
     388:	8d800815 	stw	r22,32(r17)
     38c:	8d400915 	stw	r21,36(r17)
     390:	8d000a15 	stw	r20,40(r17)
     394:	8cc00b15 	stw	r19,44(r17)
     398:	8080030d 	sth	r2,12(r16)
     39c:	00800084 	movi	r2,2
     3a0:	80000015 	stw	zero,0(r16)
     3a4:	80000115 	stw	zero,4(r16)
     3a8:	80000215 	stw	zero,8(r16)
     3ac:	80001915 	stw	zero,100(r16)
     3b0:	8080038d 	sth	r2,14(r16)
     3b4:	80000415 	stw	zero,16(r16)
     3b8:	80000515 	stw	zero,20(r16)
     3bc:	80000615 	stw	zero,24(r16)
     3c0:	b80d883a 	mov	r6,r23
     3c4:	000b883a 	mov	r5,zero
     3c8:	81001704 	addi	r4,r16,92
     3cc:	00017fc0 	call	17fc <memset>
     3d0:	00800044 	movi	r2,1
     3d4:	84000715 	stw	r16,28(r16)
     3d8:	85800815 	stw	r22,32(r16)
     3dc:	85400915 	stw	r21,36(r16)
     3e0:	85000a15 	stw	r20,40(r16)
     3e4:	84c00b15 	stw	r19,44(r16)
     3e8:	90800e15 	stw	r2,56(r18)
     3ec:	dfc00817 	ldw	ra,32(sp)
     3f0:	ddc00717 	ldw	r23,28(sp)
     3f4:	dd800617 	ldw	r22,24(sp)
     3f8:	dd400517 	ldw	r21,20(sp)
     3fc:	dd000417 	ldw	r20,16(sp)
     400:	dcc00317 	ldw	r19,12(sp)
     404:	dc800217 	ldw	r18,8(sp)
     408:	dc400117 	ldw	r17,4(sp)
     40c:	dc000017 	ldw	r16,0(sp)
     410:	dec00904 	addi	sp,sp,36
     414:	f800283a 	ret

00000418 <__fp_lock>:
     418:	0005883a 	mov	r2,zero
     41c:	f800283a 	ret

00000420 <__sfmoreglue>:
     420:	defffc04 	addi	sp,sp,-16
     424:	dc800215 	stw	r18,8(sp)
     428:	2825883a 	mov	r18,r5
     42c:	dc000015 	stw	r16,0(sp)
     430:	01401a04 	movi	r5,104
     434:	2021883a 	mov	r16,r4
     438:	913fffc4 	addi	r4,r18,-1
     43c:	dfc00315 	stw	ra,12(sp)
     440:	dc400115 	stw	r17,4(sp)
     444:	0002ee00 	call	2ee0 <__mulsi3>
     448:	8009883a 	mov	r4,r16
     44c:	11401d04 	addi	r5,r2,116
     450:	1023883a 	mov	r17,r2
     454:	0000c680 	call	c68 <_malloc_r>
     458:	1021883a 	mov	r16,r2
     45c:	10000726 	beq	r2,zero,47c <__sfmoreglue+0x5c>
     460:	11000304 	addi	r4,r2,12
     464:	10000015 	stw	zero,0(r2)
     468:	14800115 	stw	r18,4(r2)
     46c:	11000215 	stw	r4,8(r2)
     470:	89801a04 	addi	r6,r17,104
     474:	000b883a 	mov	r5,zero
     478:	00017fc0 	call	17fc <memset>
     47c:	8005883a 	mov	r2,r16
     480:	dfc00317 	ldw	ra,12(sp)
     484:	dc800217 	ldw	r18,8(sp)
     488:	dc400117 	ldw	r17,4(sp)
     48c:	dc000017 	ldw	r16,0(sp)
     490:	dec00404 	addi	sp,sp,16
     494:	f800283a 	ret

00000498 <__sfp>:
     498:	defffb04 	addi	sp,sp,-20
     49c:	dc000015 	stw	r16,0(sp)
     4a0:	04000034 	movhi	r16,0
     4a4:	8414ca04 	addi	r16,r16,21288
     4a8:	dcc00315 	stw	r19,12(sp)
     4ac:	2027883a 	mov	r19,r4
     4b0:	81000017 	ldw	r4,0(r16)
     4b4:	dfc00415 	stw	ra,16(sp)
     4b8:	dc800215 	stw	r18,8(sp)
     4bc:	20800e17 	ldw	r2,56(r4)
     4c0:	dc400115 	stw	r17,4(sp)
     4c4:	1000021e 	bne	r2,zero,4d0 <__sfp+0x38>
     4c8:	000027c0 	call	27c <__sinit.part.1>
     4cc:	81000017 	ldw	r4,0(r16)
     4d0:	2480b804 	addi	r18,r4,736
     4d4:	047fffc4 	movi	r17,-1
     4d8:	91000117 	ldw	r4,4(r18)
     4dc:	94000217 	ldw	r16,8(r18)
     4e0:	213fffc4 	addi	r4,r4,-1
     4e4:	20000a16 	blt	r4,zero,510 <__sfp+0x78>
     4e8:	8080030f 	ldh	r2,12(r16)
     4ec:	10000c26 	beq	r2,zero,520 <__sfp+0x88>
     4f0:	80c01d04 	addi	r3,r16,116
     4f4:	00000206 	br	500 <__sfp+0x68>
     4f8:	18bfe60f 	ldh	r2,-104(r3)
     4fc:	10000826 	beq	r2,zero,520 <__sfp+0x88>
     500:	213fffc4 	addi	r4,r4,-1
     504:	1c3ffd04 	addi	r16,r3,-12
     508:	18c01a04 	addi	r3,r3,104
     50c:	247ffa1e 	bne	r4,r17,4f8 <__sfp+0x60>
     510:	90800017 	ldw	r2,0(r18)
     514:	10001d26 	beq	r2,zero,58c <__sfp+0xf4>
     518:	1025883a 	mov	r18,r2
     51c:	003fee06 	br	4d8 <__sfp+0x40>
     520:	00bfffc4 	movi	r2,-1
     524:	8080038d 	sth	r2,14(r16)
     528:	00800044 	movi	r2,1
     52c:	8080030d 	sth	r2,12(r16)
     530:	80001915 	stw	zero,100(r16)
     534:	80000015 	stw	zero,0(r16)
     538:	80000215 	stw	zero,8(r16)
     53c:	80000115 	stw	zero,4(r16)
     540:	80000415 	stw	zero,16(r16)
     544:	80000515 	stw	zero,20(r16)
     548:	80000615 	stw	zero,24(r16)
     54c:	01800204 	movi	r6,8
     550:	000b883a 	mov	r5,zero
     554:	81001704 	addi	r4,r16,92
     558:	00017fc0 	call	17fc <memset>
     55c:	8005883a 	mov	r2,r16
     560:	80000c15 	stw	zero,48(r16)
     564:	80000d15 	stw	zero,52(r16)
     568:	80001115 	stw	zero,68(r16)
     56c:	80001215 	stw	zero,72(r16)
     570:	dfc00417 	ldw	ra,16(sp)
     574:	dcc00317 	ldw	r19,12(sp)
     578:	dc800217 	ldw	r18,8(sp)
     57c:	dc400117 	ldw	r17,4(sp)
     580:	dc000017 	ldw	r16,0(sp)
     584:	dec00504 	addi	sp,sp,20
     588:	f800283a 	ret
     58c:	01400104 	movi	r5,4
     590:	9809883a 	mov	r4,r19
     594:	00004200 	call	420 <__sfmoreglue>
     598:	90800015 	stw	r2,0(r18)
     59c:	103fde1e 	bne	r2,zero,518 <__sfp+0x80>
     5a0:	00800304 	movi	r2,12
     5a4:	98800015 	stw	r2,0(r19)
     5a8:	0005883a 	mov	r2,zero
     5ac:	003ff006 	br	570 <__sfp+0xd8>

000005b0 <_cleanup>:
     5b0:	00800034 	movhi	r2,0
     5b4:	1094ca04 	addi	r2,r2,21288
     5b8:	11000017 	ldw	r4,0(r2)
     5bc:	01400034 	movhi	r5,0
     5c0:	29488804 	addi	r5,r5,8736
     5c4:	0000ba41 	jmpi	ba4 <_fwalk_reent>

000005c8 <__sinit>:
     5c8:	20800e17 	ldw	r2,56(r4)
     5cc:	10000126 	beq	r2,zero,5d4 <__sinit+0xc>
     5d0:	f800283a 	ret
     5d4:	000027c1 	jmpi	27c <__sinit.part.1>

000005d8 <__sfp_lock_acquire>:
     5d8:	f800283a 	ret

000005dc <__sfp_lock_release>:
     5dc:	f800283a 	ret

000005e0 <__sinit_lock_acquire>:
     5e0:	f800283a 	ret

000005e4 <__sinit_lock_release>:
     5e4:	f800283a 	ret

000005e8 <__fp_lock_all>:
     5e8:	00800034 	movhi	r2,0
     5ec:	1094cb04 	addi	r2,r2,21292
     5f0:	11000017 	ldw	r4,0(r2)
     5f4:	01400034 	movhi	r5,0
     5f8:	29410604 	addi	r5,r5,1048
     5fc:	0000ae01 	jmpi	ae0 <_fwalk>

00000600 <__fp_unlock_all>:
     600:	00800034 	movhi	r2,0
     604:	1094cb04 	addi	r2,r2,21292
     608:	11000017 	ldw	r4,0(r2)
     60c:	01400034 	movhi	r5,0
     610:	29409a04 	addi	r5,r5,616
     614:	0000ae01 	jmpi	ae0 <_fwalk>

00000618 <__sfvwrite_r>:
     618:	30800217 	ldw	r2,8(r6)
     61c:	10006726 	beq	r2,zero,7bc <__sfvwrite_r+0x1a4>
     620:	28c0030b 	ldhu	r3,12(r5)
     624:	defff404 	addi	sp,sp,-48
     628:	dd400715 	stw	r21,28(sp)
     62c:	dd000615 	stw	r20,24(sp)
     630:	dc000215 	stw	r16,8(sp)
     634:	dfc00b15 	stw	ra,44(sp)
     638:	df000a15 	stw	fp,40(sp)
     63c:	ddc00915 	stw	r23,36(sp)
     640:	dd800815 	stw	r22,32(sp)
     644:	dcc00515 	stw	r19,20(sp)
     648:	dc800415 	stw	r18,16(sp)
     64c:	dc400315 	stw	r17,12(sp)
     650:	1880020c 	andi	r2,r3,8
     654:	2821883a 	mov	r16,r5
     658:	202b883a 	mov	r21,r4
     65c:	3029883a 	mov	r20,r6
     660:	10002726 	beq	r2,zero,700 <__sfvwrite_r+0xe8>
     664:	28800417 	ldw	r2,16(r5)
     668:	10002526 	beq	r2,zero,700 <__sfvwrite_r+0xe8>
     66c:	1880008c 	andi	r2,r3,2
     670:	a4400017 	ldw	r17,0(r20)
     674:	10002a26 	beq	r2,zero,720 <__sfvwrite_r+0x108>
     678:	05a00034 	movhi	r22,32768
     67c:	0027883a 	mov	r19,zero
     680:	0025883a 	mov	r18,zero
     684:	b5bf0004 	addi	r22,r22,-1024
     688:	980d883a 	mov	r6,r19
     68c:	a809883a 	mov	r4,r21
     690:	90004626 	beq	r18,zero,7ac <__sfvwrite_r+0x194>
     694:	900f883a 	mov	r7,r18
     698:	b480022e 	bgeu	r22,r18,6a4 <__sfvwrite_r+0x8c>
     69c:	01e00034 	movhi	r7,32768
     6a0:	39ff0004 	addi	r7,r7,-1024
     6a4:	80800917 	ldw	r2,36(r16)
     6a8:	81400717 	ldw	r5,28(r16)
     6ac:	103ee83a 	callr	r2
     6b0:	00805a0e 	bge	zero,r2,81c <__sfvwrite_r+0x204>
     6b4:	a0c00217 	ldw	r3,8(r20)
     6b8:	98a7883a 	add	r19,r19,r2
     6bc:	90a5c83a 	sub	r18,r18,r2
     6c0:	1885c83a 	sub	r2,r3,r2
     6c4:	a0800215 	stw	r2,8(r20)
     6c8:	103fef1e 	bne	r2,zero,688 <__sfvwrite_r+0x70>
     6cc:	0005883a 	mov	r2,zero
     6d0:	dfc00b17 	ldw	ra,44(sp)
     6d4:	df000a17 	ldw	fp,40(sp)
     6d8:	ddc00917 	ldw	r23,36(sp)
     6dc:	dd800817 	ldw	r22,32(sp)
     6e0:	dd400717 	ldw	r21,28(sp)
     6e4:	dd000617 	ldw	r20,24(sp)
     6e8:	dcc00517 	ldw	r19,20(sp)
     6ec:	dc800417 	ldw	r18,16(sp)
     6f0:	dc400317 	ldw	r17,12(sp)
     6f4:	dc000217 	ldw	r16,8(sp)
     6f8:	dec00c04 	addi	sp,sp,48
     6fc:	f800283a 	ret
     700:	800b883a 	mov	r5,r16
     704:	a809883a 	mov	r4,r21
     708:	00020780 	call	2078 <__swsetup_r>
     70c:	1000ee1e 	bne	r2,zero,ac8 <__sfvwrite_r+0x4b0>
     710:	80c0030b 	ldhu	r3,12(r16)
     714:	a4400017 	ldw	r17,0(r20)
     718:	1880008c 	andi	r2,r3,2
     71c:	103fd61e 	bne	r2,zero,678 <__sfvwrite_r+0x60>
     720:	1880004c 	andi	r2,r3,1
     724:	1000421e 	bne	r2,zero,830 <__sfvwrite_r+0x218>
     728:	0039883a 	mov	fp,zero
     72c:	0025883a 	mov	r18,zero
     730:	90001a26 	beq	r18,zero,79c <__sfvwrite_r+0x184>
     734:	1880800c 	andi	r2,r3,512
     738:	84c00217 	ldw	r19,8(r16)
     73c:	10002126 	beq	r2,zero,7c4 <__sfvwrite_r+0x1ac>
     740:	982f883a 	mov	r23,r19
     744:	94c09636 	bltu	r18,r19,9a0 <__sfvwrite_r+0x388>
     748:	1881200c 	andi	r2,r3,1152
     74c:	1000a11e 	bne	r2,zero,9d4 <__sfvwrite_r+0x3bc>
     750:	81000017 	ldw	r4,0(r16)
     754:	b80d883a 	mov	r6,r23
     758:	e00b883a 	mov	r5,fp
     75c:	00016a00 	call	16a0 <memmove>
     760:	80c00217 	ldw	r3,8(r16)
     764:	81000017 	ldw	r4,0(r16)
     768:	9005883a 	mov	r2,r18
     76c:	1ce7c83a 	sub	r19,r3,r19
     770:	25cf883a 	add	r7,r4,r23
     774:	84c00215 	stw	r19,8(r16)
     778:	81c00015 	stw	r7,0(r16)
     77c:	a0c00217 	ldw	r3,8(r20)
     780:	e0b9883a 	add	fp,fp,r2
     784:	90a5c83a 	sub	r18,r18,r2
     788:	18a7c83a 	sub	r19,r3,r2
     78c:	a4c00215 	stw	r19,8(r20)
     790:	983fce26 	beq	r19,zero,6cc <__sfvwrite_r+0xb4>
     794:	80c0030b 	ldhu	r3,12(r16)
     798:	903fe61e 	bne	r18,zero,734 <__sfvwrite_r+0x11c>
     79c:	8f000017 	ldw	fp,0(r17)
     7a0:	8c800117 	ldw	r18,4(r17)
     7a4:	8c400204 	addi	r17,r17,8
     7a8:	003fe106 	br	730 <__sfvwrite_r+0x118>
     7ac:	8cc00017 	ldw	r19,0(r17)
     7b0:	8c800117 	ldw	r18,4(r17)
     7b4:	8c400204 	addi	r17,r17,8
     7b8:	003fb306 	br	688 <__sfvwrite_r+0x70>
     7bc:	0005883a 	mov	r2,zero
     7c0:	f800283a 	ret
     7c4:	81000017 	ldw	r4,0(r16)
     7c8:	80800417 	ldw	r2,16(r16)
     7cc:	11005a36 	bltu	r2,r4,938 <__sfvwrite_r+0x320>
     7d0:	85c00517 	ldw	r23,20(r16)
     7d4:	95c05836 	bltu	r18,r23,938 <__sfvwrite_r+0x320>
     7d8:	00a00034 	movhi	r2,32768
     7dc:	10bfffc4 	addi	r2,r2,-1
     7e0:	9009883a 	mov	r4,r18
     7e4:	1480012e 	bgeu	r2,r18,7ec <__sfvwrite_r+0x1d4>
     7e8:	1009883a 	mov	r4,r2
     7ec:	b80b883a 	mov	r5,r23
     7f0:	0002d2c0 	call	2d2c <__divsi3>
     7f4:	b80b883a 	mov	r5,r23
     7f8:	1009883a 	mov	r4,r2
     7fc:	0002ee00 	call	2ee0 <__mulsi3>
     800:	81400717 	ldw	r5,28(r16)
     804:	80c00917 	ldw	r3,36(r16)
     808:	100f883a 	mov	r7,r2
     80c:	e00d883a 	mov	r6,fp
     810:	a809883a 	mov	r4,r21
     814:	183ee83a 	callr	r3
     818:	00bfd816 	blt	zero,r2,77c <__sfvwrite_r+0x164>
     81c:	8080030b 	ldhu	r2,12(r16)
     820:	10801014 	ori	r2,r2,64
     824:	8080030d 	sth	r2,12(r16)
     828:	00bfffc4 	movi	r2,-1
     82c:	003fa806 	br	6d0 <__sfvwrite_r+0xb8>
     830:	0027883a 	mov	r19,zero
     834:	0011883a 	mov	r8,zero
     838:	0039883a 	mov	fp,zero
     83c:	0025883a 	mov	r18,zero
     840:	90001f26 	beq	r18,zero,8c0 <__sfvwrite_r+0x2a8>
     844:	40005a26 	beq	r8,zero,9b0 <__sfvwrite_r+0x398>
     848:	982d883a 	mov	r22,r19
     84c:	94c0012e 	bgeu	r18,r19,854 <__sfvwrite_r+0x23c>
     850:	902d883a 	mov	r22,r18
     854:	81000017 	ldw	r4,0(r16)
     858:	80800417 	ldw	r2,16(r16)
     85c:	b02f883a 	mov	r23,r22
     860:	81c00517 	ldw	r7,20(r16)
     864:	1100032e 	bgeu	r2,r4,874 <__sfvwrite_r+0x25c>
     868:	80c00217 	ldw	r3,8(r16)
     86c:	38c7883a 	add	r3,r7,r3
     870:	1d801816 	blt	r3,r22,8d4 <__sfvwrite_r+0x2bc>
     874:	b1c03e16 	blt	r22,r7,970 <__sfvwrite_r+0x358>
     878:	80800917 	ldw	r2,36(r16)
     87c:	81400717 	ldw	r5,28(r16)
     880:	e00d883a 	mov	r6,fp
     884:	da000115 	stw	r8,4(sp)
     888:	a809883a 	mov	r4,r21
     88c:	103ee83a 	callr	r2
     890:	102f883a 	mov	r23,r2
     894:	da000117 	ldw	r8,4(sp)
     898:	00bfe00e 	bge	zero,r2,81c <__sfvwrite_r+0x204>
     89c:	9de7c83a 	sub	r19,r19,r23
     8a0:	98001f26 	beq	r19,zero,920 <__sfvwrite_r+0x308>
     8a4:	a0800217 	ldw	r2,8(r20)
     8a8:	e5f9883a 	add	fp,fp,r23
     8ac:	95e5c83a 	sub	r18,r18,r23
     8b0:	15efc83a 	sub	r23,r2,r23
     8b4:	a5c00215 	stw	r23,8(r20)
     8b8:	b83f8426 	beq	r23,zero,6cc <__sfvwrite_r+0xb4>
     8bc:	903fe11e 	bne	r18,zero,844 <__sfvwrite_r+0x22c>
     8c0:	8f000017 	ldw	fp,0(r17)
     8c4:	8c800117 	ldw	r18,4(r17)
     8c8:	0011883a 	mov	r8,zero
     8cc:	8c400204 	addi	r17,r17,8
     8d0:	003fdb06 	br	840 <__sfvwrite_r+0x228>
     8d4:	180d883a 	mov	r6,r3
     8d8:	e00b883a 	mov	r5,fp
     8dc:	da000115 	stw	r8,4(sp)
     8e0:	d8c00015 	stw	r3,0(sp)
     8e4:	00016a00 	call	16a0 <memmove>
     8e8:	d8c00017 	ldw	r3,0(sp)
     8ec:	80800017 	ldw	r2,0(r16)
     8f0:	800b883a 	mov	r5,r16
     8f4:	a809883a 	mov	r4,r21
     8f8:	10c5883a 	add	r2,r2,r3
     8fc:	80800015 	stw	r2,0(r16)
     900:	d8c00015 	stw	r3,0(sp)
     904:	00025400 	call	2540 <_fflush_r>
     908:	d8c00017 	ldw	r3,0(sp)
     90c:	da000117 	ldw	r8,4(sp)
     910:	103fc21e 	bne	r2,zero,81c <__sfvwrite_r+0x204>
     914:	182f883a 	mov	r23,r3
     918:	9de7c83a 	sub	r19,r19,r23
     91c:	983fe11e 	bne	r19,zero,8a4 <__sfvwrite_r+0x28c>
     920:	800b883a 	mov	r5,r16
     924:	a809883a 	mov	r4,r21
     928:	00025400 	call	2540 <_fflush_r>
     92c:	103fbb1e 	bne	r2,zero,81c <__sfvwrite_r+0x204>
     930:	0011883a 	mov	r8,zero
     934:	003fdb06 	br	8a4 <__sfvwrite_r+0x28c>
     938:	94c0012e 	bgeu	r18,r19,940 <__sfvwrite_r+0x328>
     93c:	9027883a 	mov	r19,r18
     940:	980d883a 	mov	r6,r19
     944:	e00b883a 	mov	r5,fp
     948:	00016a00 	call	16a0 <memmove>
     94c:	80800217 	ldw	r2,8(r16)
     950:	80c00017 	ldw	r3,0(r16)
     954:	14c5c83a 	sub	r2,r2,r19
     958:	1cc7883a 	add	r3,r3,r19
     95c:	80800215 	stw	r2,8(r16)
     960:	80c00015 	stw	r3,0(r16)
     964:	10004326 	beq	r2,zero,a74 <__sfvwrite_r+0x45c>
     968:	9805883a 	mov	r2,r19
     96c:	003f8306 	br	77c <__sfvwrite_r+0x164>
     970:	b00d883a 	mov	r6,r22
     974:	e00b883a 	mov	r5,fp
     978:	da000115 	stw	r8,4(sp)
     97c:	00016a00 	call	16a0 <memmove>
     980:	80800217 	ldw	r2,8(r16)
     984:	80c00017 	ldw	r3,0(r16)
     988:	da000117 	ldw	r8,4(sp)
     98c:	1585c83a 	sub	r2,r2,r22
     990:	1dad883a 	add	r22,r3,r22
     994:	80800215 	stw	r2,8(r16)
     998:	85800015 	stw	r22,0(r16)
     99c:	003fbf06 	br	89c <__sfvwrite_r+0x284>
     9a0:	81000017 	ldw	r4,0(r16)
     9a4:	9027883a 	mov	r19,r18
     9a8:	902f883a 	mov	r23,r18
     9ac:	003f6906 	br	754 <__sfvwrite_r+0x13c>
     9b0:	900d883a 	mov	r6,r18
     9b4:	01400284 	movi	r5,10
     9b8:	e009883a 	mov	r4,fp
     9bc:	00014740 	call	1474 <memchr>
     9c0:	10003e26 	beq	r2,zero,abc <__sfvwrite_r+0x4a4>
     9c4:	10800044 	addi	r2,r2,1
     9c8:	1727c83a 	sub	r19,r2,fp
     9cc:	02000044 	movi	r8,1
     9d0:	003f9d06 	br	848 <__sfvwrite_r+0x230>
     9d4:	80800517 	ldw	r2,20(r16)
     9d8:	81400417 	ldw	r5,16(r16)
     9dc:	81c00017 	ldw	r7,0(r16)
     9e0:	10a7883a 	add	r19,r2,r2
     9e4:	9885883a 	add	r2,r19,r2
     9e8:	1026d7fa 	srli	r19,r2,31
     9ec:	396dc83a 	sub	r22,r7,r5
     9f0:	b1000044 	addi	r4,r22,1
     9f4:	9885883a 	add	r2,r19,r2
     9f8:	1027d07a 	srai	r19,r2,1
     9fc:	2485883a 	add	r2,r4,r18
     a00:	980d883a 	mov	r6,r19
     a04:	9880022e 	bgeu	r19,r2,a10 <__sfvwrite_r+0x3f8>
     a08:	1027883a 	mov	r19,r2
     a0c:	100d883a 	mov	r6,r2
     a10:	18c1000c 	andi	r3,r3,1024
     a14:	18001c26 	beq	r3,zero,a88 <__sfvwrite_r+0x470>
     a18:	300b883a 	mov	r5,r6
     a1c:	a809883a 	mov	r4,r21
     a20:	0000c680 	call	c68 <_malloc_r>
     a24:	102f883a 	mov	r23,r2
     a28:	10002926 	beq	r2,zero,ad0 <__sfvwrite_r+0x4b8>
     a2c:	81400417 	ldw	r5,16(r16)
     a30:	b00d883a 	mov	r6,r22
     a34:	1009883a 	mov	r4,r2
     a38:	00015580 	call	1558 <memcpy>
     a3c:	8080030b 	ldhu	r2,12(r16)
     a40:	00fedfc4 	movi	r3,-1153
     a44:	10c4703a 	and	r2,r2,r3
     a48:	10802014 	ori	r2,r2,128
     a4c:	8080030d 	sth	r2,12(r16)
     a50:	bd89883a 	add	r4,r23,r22
     a54:	9d8fc83a 	sub	r7,r19,r22
     a58:	85c00415 	stw	r23,16(r16)
     a5c:	84c00515 	stw	r19,20(r16)
     a60:	81000015 	stw	r4,0(r16)
     a64:	9027883a 	mov	r19,r18
     a68:	81c00215 	stw	r7,8(r16)
     a6c:	902f883a 	mov	r23,r18
     a70:	003f3806 	br	754 <__sfvwrite_r+0x13c>
     a74:	800b883a 	mov	r5,r16
     a78:	a809883a 	mov	r4,r21
     a7c:	00025400 	call	2540 <_fflush_r>
     a80:	103fb926 	beq	r2,zero,968 <__sfvwrite_r+0x350>
     a84:	003f6506 	br	81c <__sfvwrite_r+0x204>
     a88:	a809883a 	mov	r4,r21
     a8c:	00019240 	call	1924 <_realloc_r>
     a90:	102f883a 	mov	r23,r2
     a94:	103fee1e 	bne	r2,zero,a50 <__sfvwrite_r+0x438>
     a98:	81400417 	ldw	r5,16(r16)
     a9c:	a809883a 	mov	r4,r21
     aa0:	00026f00 	call	26f0 <_free_r>
     aa4:	8080030b 	ldhu	r2,12(r16)
     aa8:	00ffdfc4 	movi	r3,-129
     aac:	1884703a 	and	r2,r3,r2
     ab0:	00c00304 	movi	r3,12
     ab4:	a8c00015 	stw	r3,0(r21)
     ab8:	003f5906 	br	820 <__sfvwrite_r+0x208>
     abc:	94c00044 	addi	r19,r18,1
     ac0:	02000044 	movi	r8,1
     ac4:	003f6006 	br	848 <__sfvwrite_r+0x230>
     ac8:	00bfffc4 	movi	r2,-1
     acc:	003f0006 	br	6d0 <__sfvwrite_r+0xb8>
     ad0:	00800304 	movi	r2,12
     ad4:	a8800015 	stw	r2,0(r21)
     ad8:	8080030b 	ldhu	r2,12(r16)
     adc:	003f5006 	br	820 <__sfvwrite_r+0x208>

00000ae0 <_fwalk>:
     ae0:	defff704 	addi	sp,sp,-36
     ae4:	dd000415 	stw	r20,16(sp)
     ae8:	dfc00815 	stw	ra,32(sp)
     aec:	ddc00715 	stw	r23,28(sp)
     af0:	dd800615 	stw	r22,24(sp)
     af4:	dd400515 	stw	r21,20(sp)
     af8:	dcc00315 	stw	r19,12(sp)
     afc:	dc800215 	stw	r18,8(sp)
     b00:	dc400115 	stw	r17,4(sp)
     b04:	dc000015 	stw	r16,0(sp)
     b08:	2500b804 	addi	r20,r4,736
     b0c:	a0002326 	beq	r20,zero,b9c <_fwalk+0xbc>
     b10:	282b883a 	mov	r21,r5
     b14:	002f883a 	mov	r23,zero
     b18:	05800044 	movi	r22,1
     b1c:	04ffffc4 	movi	r19,-1
     b20:	a4400117 	ldw	r17,4(r20)
     b24:	a4800217 	ldw	r18,8(r20)
     b28:	8c7fffc4 	addi	r17,r17,-1
     b2c:	88000d16 	blt	r17,zero,b64 <_fwalk+0x84>
     b30:	94000304 	addi	r16,r18,12
     b34:	94800384 	addi	r18,r18,14
     b38:	8080000b 	ldhu	r2,0(r16)
     b3c:	8c7fffc4 	addi	r17,r17,-1
     b40:	813ffd04 	addi	r4,r16,-12
     b44:	b080042e 	bgeu	r22,r2,b58 <_fwalk+0x78>
     b48:	9080000f 	ldh	r2,0(r18)
     b4c:	14c00226 	beq	r2,r19,b58 <_fwalk+0x78>
     b50:	a83ee83a 	callr	r21
     b54:	b8aeb03a 	or	r23,r23,r2
     b58:	84001a04 	addi	r16,r16,104
     b5c:	94801a04 	addi	r18,r18,104
     b60:	8cfff51e 	bne	r17,r19,b38 <_fwalk+0x58>
     b64:	a5000017 	ldw	r20,0(r20)
     b68:	a03fed1e 	bne	r20,zero,b20 <_fwalk+0x40>
     b6c:	b805883a 	mov	r2,r23
     b70:	dfc00817 	ldw	ra,32(sp)
     b74:	ddc00717 	ldw	r23,28(sp)
     b78:	dd800617 	ldw	r22,24(sp)
     b7c:	dd400517 	ldw	r21,20(sp)
     b80:	dd000417 	ldw	r20,16(sp)
     b84:	dcc00317 	ldw	r19,12(sp)
     b88:	dc800217 	ldw	r18,8(sp)
     b8c:	dc400117 	ldw	r17,4(sp)
     b90:	dc000017 	ldw	r16,0(sp)
     b94:	dec00904 	addi	sp,sp,36
     b98:	f800283a 	ret
     b9c:	002f883a 	mov	r23,zero
     ba0:	003ff206 	br	b6c <_fwalk+0x8c>

00000ba4 <_fwalk_reent>:
     ba4:	defff704 	addi	sp,sp,-36
     ba8:	dd000415 	stw	r20,16(sp)
     bac:	dfc00815 	stw	ra,32(sp)
     bb0:	ddc00715 	stw	r23,28(sp)
     bb4:	dd800615 	stw	r22,24(sp)
     bb8:	dd400515 	stw	r21,20(sp)
     bbc:	dcc00315 	stw	r19,12(sp)
     bc0:	dc800215 	stw	r18,8(sp)
     bc4:	dc400115 	stw	r17,4(sp)
     bc8:	dc000015 	stw	r16,0(sp)
     bcc:	2500b804 	addi	r20,r4,736
     bd0:	a0002326 	beq	r20,zero,c60 <_fwalk_reent+0xbc>
     bd4:	282b883a 	mov	r21,r5
     bd8:	2027883a 	mov	r19,r4
     bdc:	002f883a 	mov	r23,zero
     be0:	05800044 	movi	r22,1
     be4:	04bfffc4 	movi	r18,-1
     be8:	a4400117 	ldw	r17,4(r20)
     bec:	a4000217 	ldw	r16,8(r20)
     bf0:	8c7fffc4 	addi	r17,r17,-1
     bf4:	88000c16 	blt	r17,zero,c28 <_fwalk_reent+0x84>
     bf8:	84000304 	addi	r16,r16,12
     bfc:	8080000b 	ldhu	r2,0(r16)
     c00:	8c7fffc4 	addi	r17,r17,-1
     c04:	817ffd04 	addi	r5,r16,-12
     c08:	b080052e 	bgeu	r22,r2,c20 <_fwalk_reent+0x7c>
     c0c:	8080008f 	ldh	r2,2(r16)
     c10:	9809883a 	mov	r4,r19
     c14:	14800226 	beq	r2,r18,c20 <_fwalk_reent+0x7c>
     c18:	a83ee83a 	callr	r21
     c1c:	b8aeb03a 	or	r23,r23,r2
     c20:	84001a04 	addi	r16,r16,104
     c24:	8cbff51e 	bne	r17,r18,bfc <_fwalk_reent+0x58>
     c28:	a5000017 	ldw	r20,0(r20)
     c2c:	a03fee1e 	bne	r20,zero,be8 <_fwalk_reent+0x44>
     c30:	b805883a 	mov	r2,r23
     c34:	dfc00817 	ldw	ra,32(sp)
     c38:	ddc00717 	ldw	r23,28(sp)
     c3c:	dd800617 	ldw	r22,24(sp)
     c40:	dd400517 	ldw	r21,20(sp)
     c44:	dd000417 	ldw	r20,16(sp)
     c48:	dcc00317 	ldw	r19,12(sp)
     c4c:	dc800217 	ldw	r18,8(sp)
     c50:	dc400117 	ldw	r17,4(sp)
     c54:	dc000017 	ldw	r16,0(sp)
     c58:	dec00904 	addi	sp,sp,36
     c5c:	f800283a 	ret
     c60:	002f883a 	mov	r23,zero
     c64:	003ff206 	br	c30 <_fwalk_reent+0x8c>

00000c68 <_malloc_r>:
     c68:	defff504 	addi	sp,sp,-44
     c6c:	dc800315 	stw	r18,12(sp)
     c70:	dfc00a15 	stw	ra,40(sp)
     c74:	df000915 	stw	fp,36(sp)
     c78:	ddc00815 	stw	r23,32(sp)
     c7c:	dd800715 	stw	r22,28(sp)
     c80:	dd400615 	stw	r21,24(sp)
     c84:	dd000515 	stw	r20,20(sp)
     c88:	dcc00415 	stw	r19,16(sp)
     c8c:	dc400215 	stw	r17,8(sp)
     c90:	dc000115 	stw	r16,4(sp)
     c94:	288002c4 	addi	r2,r5,11
     c98:	00c00584 	movi	r3,22
     c9c:	2025883a 	mov	r18,r4
     ca0:	18807f2e 	bgeu	r3,r2,ea0 <_malloc_r+0x238>
     ca4:	047ffe04 	movi	r17,-8
     ca8:	1462703a 	and	r17,r2,r17
     cac:	8800a316 	blt	r17,zero,f3c <_malloc_r+0x2d4>
     cb0:	8940a236 	bltu	r17,r5,f3c <_malloc_r+0x2d4>
     cb4:	00034a40 	call	34a4 <__malloc_lock>
     cb8:	00807dc4 	movi	r2,503
     cbc:	1441e92e 	bgeu	r2,r17,1464 <_malloc_r+0x7fc>
     cc0:	8804d27a 	srli	r2,r17,9
     cc4:	1000a126 	beq	r2,zero,f4c <_malloc_r+0x2e4>
     cc8:	00c00104 	movi	r3,4
     ccc:	18811e36 	bltu	r3,r2,1148 <_malloc_r+0x4e0>
     cd0:	8804d1ba 	srli	r2,r17,6
     cd4:	12000e44 	addi	r8,r2,57
     cd8:	11c00e04 	addi	r7,r2,56
     cdc:	4209883a 	add	r4,r8,r8
     ce0:	04c00034 	movhi	r19,0
     ce4:	2109883a 	add	r4,r4,r4
     ce8:	9cd35304 	addi	r19,r19,19788
     cec:	2109883a 	add	r4,r4,r4
     cf0:	9909883a 	add	r4,r19,r4
     cf4:	24000117 	ldw	r16,4(r4)
     cf8:	213ffe04 	addi	r4,r4,-8
     cfc:	24009726 	beq	r4,r16,f5c <_malloc_r+0x2f4>
     d00:	80800117 	ldw	r2,4(r16)
     d04:	01bfff04 	movi	r6,-4
     d08:	014003c4 	movi	r5,15
     d0c:	1184703a 	and	r2,r2,r6
     d10:	1447c83a 	sub	r3,r2,r17
     d14:	28c00716 	blt	r5,r3,d34 <_malloc_r+0xcc>
     d18:	1800920e 	bge	r3,zero,f64 <_malloc_r+0x2fc>
     d1c:	84000317 	ldw	r16,12(r16)
     d20:	24008e26 	beq	r4,r16,f5c <_malloc_r+0x2f4>
     d24:	80800117 	ldw	r2,4(r16)
     d28:	1184703a 	and	r2,r2,r6
     d2c:	1447c83a 	sub	r3,r2,r17
     d30:	28fff90e 	bge	r5,r3,d18 <_malloc_r+0xb0>
     d34:	3809883a 	mov	r4,r7
     d38:	01800034 	movhi	r6,0
     d3c:	9c000417 	ldw	r16,16(r19)
     d40:	31935304 	addi	r6,r6,19788
     d44:	32000204 	addi	r8,r6,8
     d48:	82013426 	beq	r16,r8,121c <_malloc_r+0x5b4>
     d4c:	80c00117 	ldw	r3,4(r16)
     d50:	00bfff04 	movi	r2,-4
     d54:	188e703a 	and	r7,r3,r2
     d58:	3c45c83a 	sub	r2,r7,r17
     d5c:	00c003c4 	movi	r3,15
     d60:	18811f16 	blt	r3,r2,11e0 <_malloc_r+0x578>
     d64:	32000515 	stw	r8,20(r6)
     d68:	32000415 	stw	r8,16(r6)
     d6c:	10007f0e 	bge	r2,zero,f6c <_malloc_r+0x304>
     d70:	00807fc4 	movi	r2,511
     d74:	11c0fd36 	bltu	r2,r7,116c <_malloc_r+0x504>
     d78:	3806d0fa 	srli	r3,r7,3
     d7c:	01c00044 	movi	r7,1
     d80:	30800117 	ldw	r2,4(r6)
     d84:	19400044 	addi	r5,r3,1
     d88:	294b883a 	add	r5,r5,r5
     d8c:	1807d0ba 	srai	r3,r3,2
     d90:	294b883a 	add	r5,r5,r5
     d94:	294b883a 	add	r5,r5,r5
     d98:	298b883a 	add	r5,r5,r6
     d9c:	38c6983a 	sll	r3,r7,r3
     da0:	29c00017 	ldw	r7,0(r5)
     da4:	2a7ffe04 	addi	r9,r5,-8
     da8:	1886b03a 	or	r3,r3,r2
     dac:	82400315 	stw	r9,12(r16)
     db0:	81c00215 	stw	r7,8(r16)
     db4:	30c00115 	stw	r3,4(r6)
     db8:	2c000015 	stw	r16,0(r5)
     dbc:	3c000315 	stw	r16,12(r7)
     dc0:	2005d0ba 	srai	r2,r4,2
     dc4:	01400044 	movi	r5,1
     dc8:	288a983a 	sll	r5,r5,r2
     dcc:	19406f36 	bltu	r3,r5,f8c <_malloc_r+0x324>
     dd0:	28c4703a 	and	r2,r5,r3
     dd4:	10000a1e 	bne	r2,zero,e00 <_malloc_r+0x198>
     dd8:	00bfff04 	movi	r2,-4
     ddc:	294b883a 	add	r5,r5,r5
     de0:	2088703a 	and	r4,r4,r2
     de4:	28c4703a 	and	r2,r5,r3
     de8:	21000104 	addi	r4,r4,4
     dec:	1000041e 	bne	r2,zero,e00 <_malloc_r+0x198>
     df0:	294b883a 	add	r5,r5,r5
     df4:	28c4703a 	and	r2,r5,r3
     df8:	21000104 	addi	r4,r4,4
     dfc:	103ffc26 	beq	r2,zero,df0 <_malloc_r+0x188>
     e00:	02bfff04 	movi	r10,-4
     e04:	024003c4 	movi	r9,15
     e08:	21800044 	addi	r6,r4,1
     e0c:	318d883a 	add	r6,r6,r6
     e10:	318d883a 	add	r6,r6,r6
     e14:	318d883a 	add	r6,r6,r6
     e18:	998d883a 	add	r6,r19,r6
     e1c:	333ffe04 	addi	r12,r6,-8
     e20:	2017883a 	mov	r11,r4
     e24:	31800104 	addi	r6,r6,4
     e28:	34000017 	ldw	r16,0(r6)
     e2c:	31fffd04 	addi	r7,r6,-12
     e30:	81c0041e 	bne	r16,r7,e44 <_malloc_r+0x1dc>
     e34:	0000fb06 	br	1224 <_malloc_r+0x5bc>
     e38:	1801030e 	bge	r3,zero,1248 <_malloc_r+0x5e0>
     e3c:	84000317 	ldw	r16,12(r16)
     e40:	81c0f826 	beq	r16,r7,1224 <_malloc_r+0x5bc>
     e44:	80800117 	ldw	r2,4(r16)
     e48:	1284703a 	and	r2,r2,r10
     e4c:	1447c83a 	sub	r3,r2,r17
     e50:	48fff90e 	bge	r9,r3,e38 <_malloc_r+0x1d0>
     e54:	80800317 	ldw	r2,12(r16)
     e58:	81000217 	ldw	r4,8(r16)
     e5c:	89400054 	ori	r5,r17,1
     e60:	81400115 	stw	r5,4(r16)
     e64:	20800315 	stw	r2,12(r4)
     e68:	11000215 	stw	r4,8(r2)
     e6c:	8463883a 	add	r17,r16,r17
     e70:	9c400515 	stw	r17,20(r19)
     e74:	9c400415 	stw	r17,16(r19)
     e78:	18800054 	ori	r2,r3,1
     e7c:	88800115 	stw	r2,4(r17)
     e80:	8a000315 	stw	r8,12(r17)
     e84:	8a000215 	stw	r8,8(r17)
     e88:	88e3883a 	add	r17,r17,r3
     e8c:	88c00015 	stw	r3,0(r17)
     e90:	9009883a 	mov	r4,r18
     e94:	00034c80 	call	34c8 <__malloc_unlock>
     e98:	80800204 	addi	r2,r16,8
     e9c:	00001b06 	br	f0c <_malloc_r+0x2a4>
     ea0:	04400404 	movi	r17,16
     ea4:	89402536 	bltu	r17,r5,f3c <_malloc_r+0x2d4>
     ea8:	00034a40 	call	34a4 <__malloc_lock>
     eac:	00800184 	movi	r2,6
     eb0:	01000084 	movi	r4,2
     eb4:	04c00034 	movhi	r19,0
     eb8:	1085883a 	add	r2,r2,r2
     ebc:	9cd35304 	addi	r19,r19,19788
     ec0:	1085883a 	add	r2,r2,r2
     ec4:	9885883a 	add	r2,r19,r2
     ec8:	14000117 	ldw	r16,4(r2)
     ecc:	10fffe04 	addi	r3,r2,-8
     ed0:	80c0d926 	beq	r16,r3,1238 <_malloc_r+0x5d0>
     ed4:	80c00117 	ldw	r3,4(r16)
     ed8:	81000317 	ldw	r4,12(r16)
     edc:	00bfff04 	movi	r2,-4
     ee0:	1884703a 	and	r2,r3,r2
     ee4:	81400217 	ldw	r5,8(r16)
     ee8:	8085883a 	add	r2,r16,r2
     eec:	10c00117 	ldw	r3,4(r2)
     ef0:	29000315 	stw	r4,12(r5)
     ef4:	21400215 	stw	r5,8(r4)
     ef8:	18c00054 	ori	r3,r3,1
     efc:	10c00115 	stw	r3,4(r2)
     f00:	9009883a 	mov	r4,r18
     f04:	00034c80 	call	34c8 <__malloc_unlock>
     f08:	80800204 	addi	r2,r16,8
     f0c:	dfc00a17 	ldw	ra,40(sp)
     f10:	df000917 	ldw	fp,36(sp)
     f14:	ddc00817 	ldw	r23,32(sp)
     f18:	dd800717 	ldw	r22,28(sp)
     f1c:	dd400617 	ldw	r21,24(sp)
     f20:	dd000517 	ldw	r20,20(sp)
     f24:	dcc00417 	ldw	r19,16(sp)
     f28:	dc800317 	ldw	r18,12(sp)
     f2c:	dc400217 	ldw	r17,8(sp)
     f30:	dc000117 	ldw	r16,4(sp)
     f34:	dec00b04 	addi	sp,sp,44
     f38:	f800283a 	ret
     f3c:	00800304 	movi	r2,12
     f40:	90800015 	stw	r2,0(r18)
     f44:	0005883a 	mov	r2,zero
     f48:	003ff006 	br	f0c <_malloc_r+0x2a4>
     f4c:	01002004 	movi	r4,128
     f50:	02001004 	movi	r8,64
     f54:	01c00fc4 	movi	r7,63
     f58:	003f6106 	br	ce0 <_malloc_r+0x78>
     f5c:	4009883a 	mov	r4,r8
     f60:	003f7506 	br	d38 <_malloc_r+0xd0>
     f64:	81000317 	ldw	r4,12(r16)
     f68:	003fde06 	br	ee4 <_malloc_r+0x27c>
     f6c:	81c5883a 	add	r2,r16,r7
     f70:	11400117 	ldw	r5,4(r2)
     f74:	9009883a 	mov	r4,r18
     f78:	29400054 	ori	r5,r5,1
     f7c:	11400115 	stw	r5,4(r2)
     f80:	00034c80 	call	34c8 <__malloc_unlock>
     f84:	80800204 	addi	r2,r16,8
     f88:	003fe006 	br	f0c <_malloc_r+0x2a4>
     f8c:	9c000217 	ldw	r16,8(r19)
     f90:	00bfff04 	movi	r2,-4
     f94:	85800117 	ldw	r22,4(r16)
     f98:	b0ac703a 	and	r22,r22,r2
     f9c:	b4400336 	bltu	r22,r17,fac <_malloc_r+0x344>
     fa0:	b445c83a 	sub	r2,r22,r17
     fa4:	00c003c4 	movi	r3,15
     fa8:	18805d16 	blt	r3,r2,1120 <_malloc_r+0x4b8>
     fac:	05c00034 	movhi	r23,0
     fb0:	00800034 	movhi	r2,0
     fb4:	10976204 	addi	r2,r2,23944
     fb8:	bdd4cc04 	addi	r23,r23,21296
     fbc:	15400017 	ldw	r21,0(r2)
     fc0:	b8c00017 	ldw	r3,0(r23)
     fc4:	00bfffc4 	movi	r2,-1
     fc8:	858d883a 	add	r6,r16,r22
     fcc:	8d6b883a 	add	r21,r17,r21
     fd0:	1880ea26 	beq	r3,r2,137c <_malloc_r+0x714>
     fd4:	ad4403c4 	addi	r21,r21,4111
     fd8:	00bc0004 	movi	r2,-4096
     fdc:	a8aa703a 	and	r21,r21,r2
     fe0:	a80b883a 	mov	r5,r21
     fe4:	9009883a 	mov	r4,r18
     fe8:	d9800015 	stw	r6,0(sp)
     fec:	0001e880 	call	1e88 <_sbrk_r>
     ff0:	1029883a 	mov	r20,r2
     ff4:	00bfffc4 	movi	r2,-1
     ff8:	d9800017 	ldw	r6,0(sp)
     ffc:	a080e826 	beq	r20,r2,13a0 <_malloc_r+0x738>
    1000:	a180a636 	bltu	r20,r6,129c <_malloc_r+0x634>
    1004:	07000034 	movhi	fp,0
    1008:	e7176704 	addi	fp,fp,23964
    100c:	e0800017 	ldw	r2,0(fp)
    1010:	a887883a 	add	r3,r21,r2
    1014:	e0c00015 	stw	r3,0(fp)
    1018:	3500e626 	beq	r6,r20,13b4 <_malloc_r+0x74c>
    101c:	b9000017 	ldw	r4,0(r23)
    1020:	00bfffc4 	movi	r2,-1
    1024:	2080ee26 	beq	r4,r2,13e0 <_malloc_r+0x778>
    1028:	a185c83a 	sub	r2,r20,r6
    102c:	10c5883a 	add	r2,r2,r3
    1030:	e0800015 	stw	r2,0(fp)
    1034:	a0c001cc 	andi	r3,r20,7
    1038:	1800bc26 	beq	r3,zero,132c <_malloc_r+0x6c4>
    103c:	a0e9c83a 	sub	r20,r20,r3
    1040:	00840204 	movi	r2,4104
    1044:	a5000204 	addi	r20,r20,8
    1048:	10c7c83a 	sub	r3,r2,r3
    104c:	a545883a 	add	r2,r20,r21
    1050:	1083ffcc 	andi	r2,r2,4095
    1054:	18abc83a 	sub	r21,r3,r2
    1058:	a80b883a 	mov	r5,r21
    105c:	9009883a 	mov	r4,r18
    1060:	0001e880 	call	1e88 <_sbrk_r>
    1064:	00ffffc4 	movi	r3,-1
    1068:	10c0e126 	beq	r2,r3,13f0 <_malloc_r+0x788>
    106c:	1505c83a 	sub	r2,r2,r20
    1070:	1545883a 	add	r2,r2,r21
    1074:	10800054 	ori	r2,r2,1
    1078:	e0c00017 	ldw	r3,0(fp)
    107c:	9d000215 	stw	r20,8(r19)
    1080:	a0800115 	stw	r2,4(r20)
    1084:	a8c7883a 	add	r3,r21,r3
    1088:	e0c00015 	stw	r3,0(fp)
    108c:	84c00e26 	beq	r16,r19,10c8 <_malloc_r+0x460>
    1090:	018003c4 	movi	r6,15
    1094:	3580a72e 	bgeu	r6,r22,1334 <_malloc_r+0x6cc>
    1098:	81400117 	ldw	r5,4(r16)
    109c:	013ffe04 	movi	r4,-8
    10a0:	b0bffd04 	addi	r2,r22,-12
    10a4:	1104703a 	and	r2,r2,r4
    10a8:	2900004c 	andi	r4,r5,1
    10ac:	2088b03a 	or	r4,r4,r2
    10b0:	81000115 	stw	r4,4(r16)
    10b4:	01400144 	movi	r5,5
    10b8:	8089883a 	add	r4,r16,r2
    10bc:	21400115 	stw	r5,4(r4)
    10c0:	21400215 	stw	r5,8(r4)
    10c4:	3080cd36 	bltu	r6,r2,13fc <_malloc_r+0x794>
    10c8:	00800034 	movhi	r2,0
    10cc:	10976104 	addi	r2,r2,23940
    10d0:	11000017 	ldw	r4,0(r2)
    10d4:	20c0012e 	bgeu	r4,r3,10dc <_malloc_r+0x474>
    10d8:	10c00015 	stw	r3,0(r2)
    10dc:	00800034 	movhi	r2,0
    10e0:	10976004 	addi	r2,r2,23936
    10e4:	11000017 	ldw	r4,0(r2)
    10e8:	9c000217 	ldw	r16,8(r19)
    10ec:	20c0012e 	bgeu	r4,r3,10f4 <_malloc_r+0x48c>
    10f0:	10c00015 	stw	r3,0(r2)
    10f4:	80c00117 	ldw	r3,4(r16)
    10f8:	00bfff04 	movi	r2,-4
    10fc:	1886703a 	and	r3,r3,r2
    1100:	1c45c83a 	sub	r2,r3,r17
    1104:	1c400236 	bltu	r3,r17,1110 <_malloc_r+0x4a8>
    1108:	00c003c4 	movi	r3,15
    110c:	18800416 	blt	r3,r2,1120 <_malloc_r+0x4b8>
    1110:	9009883a 	mov	r4,r18
    1114:	00034c80 	call	34c8 <__malloc_unlock>
    1118:	0005883a 	mov	r2,zero
    111c:	003f7b06 	br	f0c <_malloc_r+0x2a4>
    1120:	88c00054 	ori	r3,r17,1
    1124:	80c00115 	stw	r3,4(r16)
    1128:	8463883a 	add	r17,r16,r17
    112c:	10800054 	ori	r2,r2,1
    1130:	9c400215 	stw	r17,8(r19)
    1134:	88800115 	stw	r2,4(r17)
    1138:	9009883a 	mov	r4,r18
    113c:	00034c80 	call	34c8 <__malloc_unlock>
    1140:	80800204 	addi	r2,r16,8
    1144:	003f7106 	br	f0c <_malloc_r+0x2a4>
    1148:	00c00504 	movi	r3,20
    114c:	18804a2e 	bgeu	r3,r2,1278 <_malloc_r+0x610>
    1150:	00c01504 	movi	r3,84
    1154:	18806e36 	bltu	r3,r2,1310 <_malloc_r+0x6a8>
    1158:	8804d33a 	srli	r2,r17,12
    115c:	12001bc4 	addi	r8,r2,111
    1160:	11c01b84 	addi	r7,r2,110
    1164:	4209883a 	add	r4,r8,r8
    1168:	003edd06 	br	ce0 <_malloc_r+0x78>
    116c:	3804d27a 	srli	r2,r7,9
    1170:	00c00104 	movi	r3,4
    1174:	1880442e 	bgeu	r3,r2,1288 <_malloc_r+0x620>
    1178:	00c00504 	movi	r3,20
    117c:	18808136 	bltu	r3,r2,1384 <_malloc_r+0x71c>
    1180:	11401704 	addi	r5,r2,92
    1184:	10c016c4 	addi	r3,r2,91
    1188:	294b883a 	add	r5,r5,r5
    118c:	294b883a 	add	r5,r5,r5
    1190:	294b883a 	add	r5,r5,r5
    1194:	994b883a 	add	r5,r19,r5
    1198:	28800017 	ldw	r2,0(r5)
    119c:	01800034 	movhi	r6,0
    11a0:	297ffe04 	addi	r5,r5,-8
    11a4:	31935304 	addi	r6,r6,19788
    11a8:	28806526 	beq	r5,r2,1340 <_malloc_r+0x6d8>
    11ac:	01bfff04 	movi	r6,-4
    11b0:	10c00117 	ldw	r3,4(r2)
    11b4:	1986703a 	and	r3,r3,r6
    11b8:	38c0022e 	bgeu	r7,r3,11c4 <_malloc_r+0x55c>
    11bc:	10800217 	ldw	r2,8(r2)
    11c0:	28bffb1e 	bne	r5,r2,11b0 <_malloc_r+0x548>
    11c4:	11400317 	ldw	r5,12(r2)
    11c8:	98c00117 	ldw	r3,4(r19)
    11cc:	81400315 	stw	r5,12(r16)
    11d0:	80800215 	stw	r2,8(r16)
    11d4:	2c000215 	stw	r16,8(r5)
    11d8:	14000315 	stw	r16,12(r2)
    11dc:	003ef806 	br	dc0 <_malloc_r+0x158>
    11e0:	88c00054 	ori	r3,r17,1
    11e4:	80c00115 	stw	r3,4(r16)
    11e8:	8463883a 	add	r17,r16,r17
    11ec:	34400515 	stw	r17,20(r6)
    11f0:	34400415 	stw	r17,16(r6)
    11f4:	10c00054 	ori	r3,r2,1
    11f8:	8a000315 	stw	r8,12(r17)
    11fc:	8a000215 	stw	r8,8(r17)
    1200:	88c00115 	stw	r3,4(r17)
    1204:	88a3883a 	add	r17,r17,r2
    1208:	88800015 	stw	r2,0(r17)
    120c:	9009883a 	mov	r4,r18
    1210:	00034c80 	call	34c8 <__malloc_unlock>
    1214:	80800204 	addi	r2,r16,8
    1218:	003f3c06 	br	f0c <_malloc_r+0x2a4>
    121c:	30c00117 	ldw	r3,4(r6)
    1220:	003ee706 	br	dc0 <_malloc_r+0x158>
    1224:	5ac00044 	addi	r11,r11,1
    1228:	588000cc 	andi	r2,r11,3
    122c:	31800204 	addi	r6,r6,8
    1230:	103efd1e 	bne	r2,zero,e28 <_malloc_r+0x1c0>
    1234:	00002406 	br	12c8 <_malloc_r+0x660>
    1238:	14000317 	ldw	r16,12(r2)
    123c:	143f251e 	bne	r2,r16,ed4 <_malloc_r+0x26c>
    1240:	21000084 	addi	r4,r4,2
    1244:	003ebc06 	br	d38 <_malloc_r+0xd0>
    1248:	8085883a 	add	r2,r16,r2
    124c:	10c00117 	ldw	r3,4(r2)
    1250:	81000317 	ldw	r4,12(r16)
    1254:	81400217 	ldw	r5,8(r16)
    1258:	18c00054 	ori	r3,r3,1
    125c:	10c00115 	stw	r3,4(r2)
    1260:	29000315 	stw	r4,12(r5)
    1264:	21400215 	stw	r5,8(r4)
    1268:	9009883a 	mov	r4,r18
    126c:	00034c80 	call	34c8 <__malloc_unlock>
    1270:	80800204 	addi	r2,r16,8
    1274:	003f2506 	br	f0c <_malloc_r+0x2a4>
    1278:	12001704 	addi	r8,r2,92
    127c:	11c016c4 	addi	r7,r2,91
    1280:	4209883a 	add	r4,r8,r8
    1284:	003e9606 	br	ce0 <_malloc_r+0x78>
    1288:	3804d1ba 	srli	r2,r7,6
    128c:	11400e44 	addi	r5,r2,57
    1290:	10c00e04 	addi	r3,r2,56
    1294:	294b883a 	add	r5,r5,r5
    1298:	003fbc06 	br	118c <_malloc_r+0x524>
    129c:	84ff5926 	beq	r16,r19,1004 <_malloc_r+0x39c>
    12a0:	00800034 	movhi	r2,0
    12a4:	10935304 	addi	r2,r2,19788
    12a8:	14000217 	ldw	r16,8(r2)
    12ac:	00bfff04 	movi	r2,-4
    12b0:	80c00117 	ldw	r3,4(r16)
    12b4:	1886703a 	and	r3,r3,r2
    12b8:	003f9106 	br	1100 <_malloc_r+0x498>
    12bc:	60800217 	ldw	r2,8(r12)
    12c0:	213fffc4 	addi	r4,r4,-1
    12c4:	1300651e 	bne	r2,r12,145c <_malloc_r+0x7f4>
    12c8:	208000cc 	andi	r2,r4,3
    12cc:	633ffe04 	addi	r12,r12,-8
    12d0:	103ffa1e 	bne	r2,zero,12bc <_malloc_r+0x654>
    12d4:	98800117 	ldw	r2,4(r19)
    12d8:	0146303a 	nor	r3,zero,r5
    12dc:	1884703a 	and	r2,r3,r2
    12e0:	98800115 	stw	r2,4(r19)
    12e4:	294b883a 	add	r5,r5,r5
    12e8:	117f2836 	bltu	r2,r5,f8c <_malloc_r+0x324>
    12ec:	283f2726 	beq	r5,zero,f8c <_malloc_r+0x324>
    12f0:	2886703a 	and	r3,r5,r2
    12f4:	5809883a 	mov	r4,r11
    12f8:	183ec31e 	bne	r3,zero,e08 <_malloc_r+0x1a0>
    12fc:	294b883a 	add	r5,r5,r5
    1300:	2886703a 	and	r3,r5,r2
    1304:	21000104 	addi	r4,r4,4
    1308:	183ffc26 	beq	r3,zero,12fc <_malloc_r+0x694>
    130c:	003ebe06 	br	e08 <_malloc_r+0x1a0>
    1310:	00c05504 	movi	r3,340
    1314:	18801236 	bltu	r3,r2,1360 <_malloc_r+0x6f8>
    1318:	8804d3fa 	srli	r2,r17,15
    131c:	12001e04 	addi	r8,r2,120
    1320:	11c01dc4 	addi	r7,r2,119
    1324:	4209883a 	add	r4,r8,r8
    1328:	003e6d06 	br	ce0 <_malloc_r+0x78>
    132c:	00c40004 	movi	r3,4096
    1330:	003f4606 	br	104c <_malloc_r+0x3e4>
    1334:	00800044 	movi	r2,1
    1338:	a0800115 	stw	r2,4(r20)
    133c:	003f7406 	br	1110 <_malloc_r+0x4a8>
    1340:	1805d0ba 	srai	r2,r3,2
    1344:	01c00044 	movi	r7,1
    1348:	30c00117 	ldw	r3,4(r6)
    134c:	388e983a 	sll	r7,r7,r2
    1350:	2805883a 	mov	r2,r5
    1354:	38c6b03a 	or	r3,r7,r3
    1358:	30c00115 	stw	r3,4(r6)
    135c:	003f9b06 	br	11cc <_malloc_r+0x564>
    1360:	00c15504 	movi	r3,1364
    1364:	18801a36 	bltu	r3,r2,13d0 <_malloc_r+0x768>
    1368:	8804d4ba 	srli	r2,r17,18
    136c:	12001f44 	addi	r8,r2,125
    1370:	11c01f04 	addi	r7,r2,124
    1374:	4209883a 	add	r4,r8,r8
    1378:	003e5906 	br	ce0 <_malloc_r+0x78>
    137c:	ad400404 	addi	r21,r21,16
    1380:	003f1706 	br	fe0 <_malloc_r+0x378>
    1384:	00c01504 	movi	r3,84
    1388:	18802336 	bltu	r3,r2,1418 <_malloc_r+0x7b0>
    138c:	3804d33a 	srli	r2,r7,12
    1390:	11401bc4 	addi	r5,r2,111
    1394:	10c01b84 	addi	r3,r2,110
    1398:	294b883a 	add	r5,r5,r5
    139c:	003f7b06 	br	118c <_malloc_r+0x524>
    13a0:	9c000217 	ldw	r16,8(r19)
    13a4:	00bfff04 	movi	r2,-4
    13a8:	80c00117 	ldw	r3,4(r16)
    13ac:	1886703a 	and	r3,r3,r2
    13b0:	003f5306 	br	1100 <_malloc_r+0x498>
    13b4:	3083ffcc 	andi	r2,r6,4095
    13b8:	103f181e 	bne	r2,zero,101c <_malloc_r+0x3b4>
    13bc:	99000217 	ldw	r4,8(r19)
    13c0:	b545883a 	add	r2,r22,r21
    13c4:	10800054 	ori	r2,r2,1
    13c8:	20800115 	stw	r2,4(r4)
    13cc:	003f3e06 	br	10c8 <_malloc_r+0x460>
    13d0:	01003f84 	movi	r4,254
    13d4:	02001fc4 	movi	r8,127
    13d8:	01c01f84 	movi	r7,126
    13dc:	003e4006 	br	ce0 <_malloc_r+0x78>
    13e0:	00800034 	movhi	r2,0
    13e4:	1094cc04 	addi	r2,r2,21296
    13e8:	15000015 	stw	r20,0(r2)
    13ec:	003f1106 	br	1034 <_malloc_r+0x3cc>
    13f0:	00800044 	movi	r2,1
    13f4:	002b883a 	mov	r21,zero
    13f8:	003f1f06 	br	1078 <_malloc_r+0x410>
    13fc:	81400204 	addi	r5,r16,8
    1400:	9009883a 	mov	r4,r18
    1404:	00026f00 	call	26f0 <_free_r>
    1408:	00800034 	movhi	r2,0
    140c:	10976704 	addi	r2,r2,23964
    1410:	10c00017 	ldw	r3,0(r2)
    1414:	003f2c06 	br	10c8 <_malloc_r+0x460>
    1418:	00c05504 	movi	r3,340
    141c:	18800536 	bltu	r3,r2,1434 <_malloc_r+0x7cc>
    1420:	3804d3fa 	srli	r2,r7,15
    1424:	11401e04 	addi	r5,r2,120
    1428:	10c01dc4 	addi	r3,r2,119
    142c:	294b883a 	add	r5,r5,r5
    1430:	003f5606 	br	118c <_malloc_r+0x524>
    1434:	00c15504 	movi	r3,1364
    1438:	18800536 	bltu	r3,r2,1450 <_malloc_r+0x7e8>
    143c:	3804d4ba 	srli	r2,r7,18
    1440:	11401f44 	addi	r5,r2,125
    1444:	10c01f04 	addi	r3,r2,124
    1448:	294b883a 	add	r5,r5,r5
    144c:	003f4f06 	br	118c <_malloc_r+0x524>
    1450:	01403f84 	movi	r5,254
    1454:	00c01f84 	movi	r3,126
    1458:	003f4c06 	br	118c <_malloc_r+0x524>
    145c:	98800117 	ldw	r2,4(r19)
    1460:	003fa006 	br	12e4 <_malloc_r+0x67c>
    1464:	8808d0fa 	srli	r4,r17,3
    1468:	20800044 	addi	r2,r4,1
    146c:	1085883a 	add	r2,r2,r2
    1470:	003e9006 	br	eb4 <_malloc_r+0x24c>

00001474 <memchr>:
    1474:	208000cc 	andi	r2,r4,3
    1478:	280f883a 	mov	r7,r5
    147c:	10003426 	beq	r2,zero,1550 <memchr+0xdc>
    1480:	30bfffc4 	addi	r2,r6,-1
    1484:	30001a26 	beq	r6,zero,14f0 <memchr+0x7c>
    1488:	20c00003 	ldbu	r3,0(r4)
    148c:	29803fcc 	andi	r6,r5,255
    1490:	30c0051e 	bne	r6,r3,14a8 <memchr+0x34>
    1494:	00001806 	br	14f8 <memchr+0x84>
    1498:	10001526 	beq	r2,zero,14f0 <memchr+0x7c>
    149c:	20c00003 	ldbu	r3,0(r4)
    14a0:	10bfffc4 	addi	r2,r2,-1
    14a4:	30c01426 	beq	r6,r3,14f8 <memchr+0x84>
    14a8:	21000044 	addi	r4,r4,1
    14ac:	20c000cc 	andi	r3,r4,3
    14b0:	183ff91e 	bne	r3,zero,1498 <memchr+0x24>
    14b4:	020000c4 	movi	r8,3
    14b8:	40801136 	bltu	r8,r2,1500 <memchr+0x8c>
    14bc:	10000c26 	beq	r2,zero,14f0 <memchr+0x7c>
    14c0:	20c00003 	ldbu	r3,0(r4)
    14c4:	29403fcc 	andi	r5,r5,255
    14c8:	28c00b26 	beq	r5,r3,14f8 <memchr+0x84>
    14cc:	20c00044 	addi	r3,r4,1
    14d0:	39803fcc 	andi	r6,r7,255
    14d4:	2089883a 	add	r4,r4,r2
    14d8:	00000306 	br	14e8 <memchr+0x74>
    14dc:	18c00044 	addi	r3,r3,1
    14e0:	197fffc3 	ldbu	r5,-1(r3)
    14e4:	31400526 	beq	r6,r5,14fc <memchr+0x88>
    14e8:	1805883a 	mov	r2,r3
    14ec:	20fffb1e 	bne	r4,r3,14dc <memchr+0x68>
    14f0:	0005883a 	mov	r2,zero
    14f4:	f800283a 	ret
    14f8:	2005883a 	mov	r2,r4
    14fc:	f800283a 	ret
    1500:	28c03fcc 	andi	r3,r5,255
    1504:	1812923a 	slli	r9,r3,8
    1508:	02ffbff4 	movhi	r11,65279
    150c:	02a02074 	movhi	r10,32897
    1510:	48d2b03a 	or	r9,r9,r3
    1514:	4806943a 	slli	r3,r9,16
    1518:	5affbfc4 	addi	r11,r11,-257
    151c:	52a02004 	addi	r10,r10,-32640
    1520:	48d2b03a 	or	r9,r9,r3
    1524:	20c00017 	ldw	r3,0(r4)
    1528:	48c6f03a 	xor	r3,r9,r3
    152c:	1acd883a 	add	r6,r3,r11
    1530:	00c6303a 	nor	r3,zero,r3
    1534:	30c6703a 	and	r3,r6,r3
    1538:	1a86703a 	and	r3,r3,r10
    153c:	183fe01e 	bne	r3,zero,14c0 <memchr+0x4c>
    1540:	10bfff04 	addi	r2,r2,-4
    1544:	21000104 	addi	r4,r4,4
    1548:	40bff636 	bltu	r8,r2,1524 <memchr+0xb0>
    154c:	003fdb06 	br	14bc <memchr+0x48>
    1550:	3005883a 	mov	r2,r6
    1554:	003fd706 	br	14b4 <memchr+0x40>

00001558 <memcpy>:
    1558:	defffd04 	addi	sp,sp,-12
    155c:	dfc00215 	stw	ra,8(sp)
    1560:	dc400115 	stw	r17,4(sp)
    1564:	dc000015 	stw	r16,0(sp)
    1568:	00c003c4 	movi	r3,15
    156c:	2005883a 	mov	r2,r4
    1570:	1980452e 	bgeu	r3,r6,1688 <memcpy+0x130>
    1574:	2906b03a 	or	r3,r5,r4
    1578:	18c000cc 	andi	r3,r3,3
    157c:	1800441e 	bne	r3,zero,1690 <memcpy+0x138>
    1580:	347ffc04 	addi	r17,r6,-16
    1584:	8822d13a 	srli	r17,r17,4
    1588:	28c00104 	addi	r3,r5,4
    158c:	23400104 	addi	r13,r4,4
    1590:	8820913a 	slli	r16,r17,4
    1594:	2b000204 	addi	r12,r5,8
    1598:	22c00204 	addi	r11,r4,8
    159c:	84000504 	addi	r16,r16,20
    15a0:	2a800304 	addi	r10,r5,12
    15a4:	22400304 	addi	r9,r4,12
    15a8:	2c21883a 	add	r16,r5,r16
    15ac:	2811883a 	mov	r8,r5
    15b0:	200f883a 	mov	r7,r4
    15b4:	41000017 	ldw	r4,0(r8)
    15b8:	1fc00017 	ldw	ra,0(r3)
    15bc:	63c00017 	ldw	r15,0(r12)
    15c0:	39000015 	stw	r4,0(r7)
    15c4:	53800017 	ldw	r14,0(r10)
    15c8:	6fc00015 	stw	ra,0(r13)
    15cc:	5bc00015 	stw	r15,0(r11)
    15d0:	4b800015 	stw	r14,0(r9)
    15d4:	18c00404 	addi	r3,r3,16
    15d8:	39c00404 	addi	r7,r7,16
    15dc:	42000404 	addi	r8,r8,16
    15e0:	6b400404 	addi	r13,r13,16
    15e4:	63000404 	addi	r12,r12,16
    15e8:	5ac00404 	addi	r11,r11,16
    15ec:	52800404 	addi	r10,r10,16
    15f0:	4a400404 	addi	r9,r9,16
    15f4:	1c3fef1e 	bne	r3,r16,15b4 <memcpy+0x5c>
    15f8:	89c00044 	addi	r7,r17,1
    15fc:	380e913a 	slli	r7,r7,4
    1600:	310003cc 	andi	r4,r6,15
    1604:	02c000c4 	movi	r11,3
    1608:	11c7883a 	add	r3,r2,r7
    160c:	29cb883a 	add	r5,r5,r7
    1610:	5900212e 	bgeu	r11,r4,1698 <memcpy+0x140>
    1614:	1813883a 	mov	r9,r3
    1618:	2811883a 	mov	r8,r5
    161c:	200f883a 	mov	r7,r4
    1620:	42800017 	ldw	r10,0(r8)
    1624:	4a400104 	addi	r9,r9,4
    1628:	39ffff04 	addi	r7,r7,-4
    162c:	4abfff15 	stw	r10,-4(r9)
    1630:	42000104 	addi	r8,r8,4
    1634:	59fffa36 	bltu	r11,r7,1620 <memcpy+0xc8>
    1638:	213fff04 	addi	r4,r4,-4
    163c:	2008d0ba 	srli	r4,r4,2
    1640:	318000cc 	andi	r6,r6,3
    1644:	21000044 	addi	r4,r4,1
    1648:	2109883a 	add	r4,r4,r4
    164c:	2109883a 	add	r4,r4,r4
    1650:	1907883a 	add	r3,r3,r4
    1654:	290b883a 	add	r5,r5,r4
    1658:	30000626 	beq	r6,zero,1674 <memcpy+0x11c>
    165c:	198d883a 	add	r6,r3,r6
    1660:	29c00003 	ldbu	r7,0(r5)
    1664:	18c00044 	addi	r3,r3,1
    1668:	29400044 	addi	r5,r5,1
    166c:	19ffffc5 	stb	r7,-1(r3)
    1670:	19bffb1e 	bne	r3,r6,1660 <memcpy+0x108>
    1674:	dfc00217 	ldw	ra,8(sp)
    1678:	dc400117 	ldw	r17,4(sp)
    167c:	dc000017 	ldw	r16,0(sp)
    1680:	dec00304 	addi	sp,sp,12
    1684:	f800283a 	ret
    1688:	2007883a 	mov	r3,r4
    168c:	003ff206 	br	1658 <memcpy+0x100>
    1690:	2007883a 	mov	r3,r4
    1694:	003ff106 	br	165c <memcpy+0x104>
    1698:	200d883a 	mov	r6,r4
    169c:	003fee06 	br	1658 <memcpy+0x100>

000016a0 <memmove>:
    16a0:	2005883a 	mov	r2,r4
    16a4:	29000b2e 	bgeu	r5,r4,16d4 <memmove+0x34>
    16a8:	298f883a 	add	r7,r5,r6
    16ac:	21c0092e 	bgeu	r4,r7,16d4 <memmove+0x34>
    16b0:	2187883a 	add	r3,r4,r6
    16b4:	198bc83a 	sub	r5,r3,r6
    16b8:	30004826 	beq	r6,zero,17dc <memmove+0x13c>
    16bc:	39ffffc4 	addi	r7,r7,-1
    16c0:	39000003 	ldbu	r4,0(r7)
    16c4:	18ffffc4 	addi	r3,r3,-1
    16c8:	19000005 	stb	r4,0(r3)
    16cc:	28fffb1e 	bne	r5,r3,16bc <memmove+0x1c>
    16d0:	f800283a 	ret
    16d4:	00c003c4 	movi	r3,15
    16d8:	1980412e 	bgeu	r3,r6,17e0 <memmove+0x140>
    16dc:	2886b03a 	or	r3,r5,r2
    16e0:	18c000cc 	andi	r3,r3,3
    16e4:	1800401e 	bne	r3,zero,17e8 <memmove+0x148>
    16e8:	33fffc04 	addi	r15,r6,-16
    16ec:	781ed13a 	srli	r15,r15,4
    16f0:	28c00104 	addi	r3,r5,4
    16f4:	13400104 	addi	r13,r2,4
    16f8:	781c913a 	slli	r14,r15,4
    16fc:	2b000204 	addi	r12,r5,8
    1700:	12c00204 	addi	r11,r2,8
    1704:	73800504 	addi	r14,r14,20
    1708:	2a800304 	addi	r10,r5,12
    170c:	12400304 	addi	r9,r2,12
    1710:	2b9d883a 	add	r14,r5,r14
    1714:	2811883a 	mov	r8,r5
    1718:	100f883a 	mov	r7,r2
    171c:	41000017 	ldw	r4,0(r8)
    1720:	39c00404 	addi	r7,r7,16
    1724:	18c00404 	addi	r3,r3,16
    1728:	393ffc15 	stw	r4,-16(r7)
    172c:	193ffc17 	ldw	r4,-16(r3)
    1730:	6b400404 	addi	r13,r13,16
    1734:	5ac00404 	addi	r11,r11,16
    1738:	693ffc15 	stw	r4,-16(r13)
    173c:	61000017 	ldw	r4,0(r12)
    1740:	4a400404 	addi	r9,r9,16
    1744:	42000404 	addi	r8,r8,16
    1748:	593ffc15 	stw	r4,-16(r11)
    174c:	51000017 	ldw	r4,0(r10)
    1750:	63000404 	addi	r12,r12,16
    1754:	52800404 	addi	r10,r10,16
    1758:	493ffc15 	stw	r4,-16(r9)
    175c:	1bbfef1e 	bne	r3,r14,171c <memmove+0x7c>
    1760:	79000044 	addi	r4,r15,1
    1764:	2008913a 	slli	r4,r4,4
    1768:	328003cc 	andi	r10,r6,15
    176c:	02c000c4 	movi	r11,3
    1770:	1107883a 	add	r3,r2,r4
    1774:	290b883a 	add	r5,r5,r4
    1778:	5a801e2e 	bgeu	r11,r10,17f4 <memmove+0x154>
    177c:	1813883a 	mov	r9,r3
    1780:	2811883a 	mov	r8,r5
    1784:	500f883a 	mov	r7,r10
    1788:	41000017 	ldw	r4,0(r8)
    178c:	4a400104 	addi	r9,r9,4
    1790:	39ffff04 	addi	r7,r7,-4
    1794:	493fff15 	stw	r4,-4(r9)
    1798:	42000104 	addi	r8,r8,4
    179c:	59fffa36 	bltu	r11,r7,1788 <memmove+0xe8>
    17a0:	513fff04 	addi	r4,r10,-4
    17a4:	2008d0ba 	srli	r4,r4,2
    17a8:	318000cc 	andi	r6,r6,3
    17ac:	21000044 	addi	r4,r4,1
    17b0:	2109883a 	add	r4,r4,r4
    17b4:	2109883a 	add	r4,r4,r4
    17b8:	1907883a 	add	r3,r3,r4
    17bc:	290b883a 	add	r5,r5,r4
    17c0:	30000b26 	beq	r6,zero,17f0 <memmove+0x150>
    17c4:	198d883a 	add	r6,r3,r6
    17c8:	29c00003 	ldbu	r7,0(r5)
    17cc:	18c00044 	addi	r3,r3,1
    17d0:	29400044 	addi	r5,r5,1
    17d4:	19ffffc5 	stb	r7,-1(r3)
    17d8:	19bffb1e 	bne	r3,r6,17c8 <memmove+0x128>
    17dc:	f800283a 	ret
    17e0:	1007883a 	mov	r3,r2
    17e4:	003ff606 	br	17c0 <memmove+0x120>
    17e8:	1007883a 	mov	r3,r2
    17ec:	003ff506 	br	17c4 <memmove+0x124>
    17f0:	f800283a 	ret
    17f4:	500d883a 	mov	r6,r10
    17f8:	003ff106 	br	17c0 <memmove+0x120>

000017fc <memset>:
    17fc:	20c000cc 	andi	r3,r4,3
    1800:	2005883a 	mov	r2,r4
    1804:	18004426 	beq	r3,zero,1918 <memset+0x11c>
    1808:	31ffffc4 	addi	r7,r6,-1
    180c:	30004026 	beq	r6,zero,1910 <memset+0x114>
    1810:	2813883a 	mov	r9,r5
    1814:	200d883a 	mov	r6,r4
    1818:	2007883a 	mov	r3,r4
    181c:	00000406 	br	1830 <memset+0x34>
    1820:	3a3fffc4 	addi	r8,r7,-1
    1824:	31800044 	addi	r6,r6,1
    1828:	38003926 	beq	r7,zero,1910 <memset+0x114>
    182c:	400f883a 	mov	r7,r8
    1830:	18c00044 	addi	r3,r3,1
    1834:	32400005 	stb	r9,0(r6)
    1838:	1a0000cc 	andi	r8,r3,3
    183c:	403ff81e 	bne	r8,zero,1820 <memset+0x24>
    1840:	010000c4 	movi	r4,3
    1844:	21c02d2e 	bgeu	r4,r7,18fc <memset+0x100>
    1848:	29003fcc 	andi	r4,r5,255
    184c:	200c923a 	slli	r6,r4,8
    1850:	3108b03a 	or	r4,r6,r4
    1854:	200c943a 	slli	r6,r4,16
    1858:	218cb03a 	or	r6,r4,r6
    185c:	010003c4 	movi	r4,15
    1860:	21c0182e 	bgeu	r4,r7,18c4 <memset+0xc8>
    1864:	3b3ffc04 	addi	r12,r7,-16
    1868:	6018d13a 	srli	r12,r12,4
    186c:	1a000104 	addi	r8,r3,4
    1870:	1ac00204 	addi	r11,r3,8
    1874:	6008913a 	slli	r4,r12,4
    1878:	1a800304 	addi	r10,r3,12
    187c:	1813883a 	mov	r9,r3
    1880:	21000504 	addi	r4,r4,20
    1884:	1909883a 	add	r4,r3,r4
    1888:	49800015 	stw	r6,0(r9)
    188c:	41800015 	stw	r6,0(r8)
    1890:	59800015 	stw	r6,0(r11)
    1894:	51800015 	stw	r6,0(r10)
    1898:	42000404 	addi	r8,r8,16
    189c:	4a400404 	addi	r9,r9,16
    18a0:	5ac00404 	addi	r11,r11,16
    18a4:	52800404 	addi	r10,r10,16
    18a8:	413ff71e 	bne	r8,r4,1888 <memset+0x8c>
    18ac:	63000044 	addi	r12,r12,1
    18b0:	6018913a 	slli	r12,r12,4
    18b4:	39c003cc 	andi	r7,r7,15
    18b8:	010000c4 	movi	r4,3
    18bc:	1b07883a 	add	r3,r3,r12
    18c0:	21c00e2e 	bgeu	r4,r7,18fc <memset+0x100>
    18c4:	1813883a 	mov	r9,r3
    18c8:	3811883a 	mov	r8,r7
    18cc:	010000c4 	movi	r4,3
    18d0:	49800015 	stw	r6,0(r9)
    18d4:	423fff04 	addi	r8,r8,-4
    18d8:	4a400104 	addi	r9,r9,4
    18dc:	223ffc36 	bltu	r4,r8,18d0 <memset+0xd4>
    18e0:	393fff04 	addi	r4,r7,-4
    18e4:	2008d0ba 	srli	r4,r4,2
    18e8:	39c000cc 	andi	r7,r7,3
    18ec:	21000044 	addi	r4,r4,1
    18f0:	2109883a 	add	r4,r4,r4
    18f4:	2109883a 	add	r4,r4,r4
    18f8:	1907883a 	add	r3,r3,r4
    18fc:	38000526 	beq	r7,zero,1914 <memset+0x118>
    1900:	19cf883a 	add	r7,r3,r7
    1904:	19400005 	stb	r5,0(r3)
    1908:	18c00044 	addi	r3,r3,1
    190c:	38fffd1e 	bne	r7,r3,1904 <memset+0x108>
    1910:	f800283a 	ret
    1914:	f800283a 	ret
    1918:	2007883a 	mov	r3,r4
    191c:	300f883a 	mov	r7,r6
    1920:	003fc706 	br	1840 <memset+0x44>

00001924 <_realloc_r>:
    1924:	defff604 	addi	sp,sp,-40
    1928:	dc800215 	stw	r18,8(sp)
    192c:	dfc00915 	stw	ra,36(sp)
    1930:	df000815 	stw	fp,32(sp)
    1934:	ddc00715 	stw	r23,28(sp)
    1938:	dd800615 	stw	r22,24(sp)
    193c:	dd400515 	stw	r21,20(sp)
    1940:	dd000415 	stw	r20,16(sp)
    1944:	dcc00315 	stw	r19,12(sp)
    1948:	dc400115 	stw	r17,4(sp)
    194c:	dc000015 	stw	r16,0(sp)
    1950:	3025883a 	mov	r18,r6
    1954:	2800b726 	beq	r5,zero,1c34 <_realloc_r+0x310>
    1958:	282b883a 	mov	r21,r5
    195c:	2029883a 	mov	r20,r4
    1960:	00034a40 	call	34a4 <__malloc_lock>
    1964:	a8bfff17 	ldw	r2,-4(r21)
    1968:	043fff04 	movi	r16,-4
    196c:	90c002c4 	addi	r3,r18,11
    1970:	01000584 	movi	r4,22
    1974:	acfffe04 	addi	r19,r21,-8
    1978:	1420703a 	and	r16,r2,r16
    197c:	20c0332e 	bgeu	r4,r3,1a4c <_realloc_r+0x128>
    1980:	047ffe04 	movi	r17,-8
    1984:	1c62703a 	and	r17,r3,r17
    1988:	8807883a 	mov	r3,r17
    198c:	88005816 	blt	r17,zero,1af0 <_realloc_r+0x1cc>
    1990:	8c805736 	bltu	r17,r18,1af0 <_realloc_r+0x1cc>
    1994:	80c0300e 	bge	r16,r3,1a58 <_realloc_r+0x134>
    1998:	07000034 	movhi	fp,0
    199c:	e7135304 	addi	fp,fp,19788
    19a0:	e1c00217 	ldw	r7,8(fp)
    19a4:	9c09883a 	add	r4,r19,r16
    19a8:	22000117 	ldw	r8,4(r4)
    19ac:	21c06326 	beq	r4,r7,1b3c <_realloc_r+0x218>
    19b0:	017fff84 	movi	r5,-2
    19b4:	414a703a 	and	r5,r8,r5
    19b8:	214b883a 	add	r5,r4,r5
    19bc:	29800117 	ldw	r6,4(r5)
    19c0:	3180004c 	andi	r6,r6,1
    19c4:	30003f26 	beq	r6,zero,1ac4 <_realloc_r+0x1a0>
    19c8:	1080004c 	andi	r2,r2,1
    19cc:	10008326 	beq	r2,zero,1bdc <_realloc_r+0x2b8>
    19d0:	900b883a 	mov	r5,r18
    19d4:	a009883a 	mov	r4,r20
    19d8:	0000c680 	call	c68 <_malloc_r>
    19dc:	1025883a 	mov	r18,r2
    19e0:	10011e26 	beq	r2,zero,1e5c <_realloc_r+0x538>
    19e4:	a93fff17 	ldw	r4,-4(r21)
    19e8:	10fffe04 	addi	r3,r2,-8
    19ec:	00bfff84 	movi	r2,-2
    19f0:	2084703a 	and	r2,r4,r2
    19f4:	9885883a 	add	r2,r19,r2
    19f8:	1880ee26 	beq	r3,r2,1db4 <_realloc_r+0x490>
    19fc:	81bfff04 	addi	r6,r16,-4
    1a00:	00800904 	movi	r2,36
    1a04:	1180b836 	bltu	r2,r6,1ce8 <_realloc_r+0x3c4>
    1a08:	00c004c4 	movi	r3,19
    1a0c:	19809636 	bltu	r3,r6,1c68 <_realloc_r+0x344>
    1a10:	9005883a 	mov	r2,r18
    1a14:	a807883a 	mov	r3,r21
    1a18:	19000017 	ldw	r4,0(r3)
    1a1c:	11000015 	stw	r4,0(r2)
    1a20:	19000117 	ldw	r4,4(r3)
    1a24:	11000115 	stw	r4,4(r2)
    1a28:	18c00217 	ldw	r3,8(r3)
    1a2c:	10c00215 	stw	r3,8(r2)
    1a30:	a80b883a 	mov	r5,r21
    1a34:	a009883a 	mov	r4,r20
    1a38:	00026f00 	call	26f0 <_free_r>
    1a3c:	a009883a 	mov	r4,r20
    1a40:	00034c80 	call	34c8 <__malloc_unlock>
    1a44:	9005883a 	mov	r2,r18
    1a48:	00001206 	br	1a94 <_realloc_r+0x170>
    1a4c:	00c00404 	movi	r3,16
    1a50:	1823883a 	mov	r17,r3
    1a54:	003fce06 	br	1990 <_realloc_r+0x6c>
    1a58:	a825883a 	mov	r18,r21
    1a5c:	8445c83a 	sub	r2,r16,r17
    1a60:	00c003c4 	movi	r3,15
    1a64:	18802636 	bltu	r3,r2,1b00 <_realloc_r+0x1dc>
    1a68:	99800117 	ldw	r6,4(r19)
    1a6c:	9c07883a 	add	r3,r19,r16
    1a70:	3180004c 	andi	r6,r6,1
    1a74:	3420b03a 	or	r16,r6,r16
    1a78:	9c000115 	stw	r16,4(r19)
    1a7c:	18800117 	ldw	r2,4(r3)
    1a80:	10800054 	ori	r2,r2,1
    1a84:	18800115 	stw	r2,4(r3)
    1a88:	a009883a 	mov	r4,r20
    1a8c:	00034c80 	call	34c8 <__malloc_unlock>
    1a90:	9005883a 	mov	r2,r18
    1a94:	dfc00917 	ldw	ra,36(sp)
    1a98:	df000817 	ldw	fp,32(sp)
    1a9c:	ddc00717 	ldw	r23,28(sp)
    1aa0:	dd800617 	ldw	r22,24(sp)
    1aa4:	dd400517 	ldw	r21,20(sp)
    1aa8:	dd000417 	ldw	r20,16(sp)
    1aac:	dcc00317 	ldw	r19,12(sp)
    1ab0:	dc800217 	ldw	r18,8(sp)
    1ab4:	dc400117 	ldw	r17,4(sp)
    1ab8:	dc000017 	ldw	r16,0(sp)
    1abc:	dec00a04 	addi	sp,sp,40
    1ac0:	f800283a 	ret
    1ac4:	017fff04 	movi	r5,-4
    1ac8:	414a703a 	and	r5,r8,r5
    1acc:	814d883a 	add	r6,r16,r5
    1ad0:	30c01f16 	blt	r6,r3,1b50 <_realloc_r+0x22c>
    1ad4:	20800317 	ldw	r2,12(r4)
    1ad8:	20c00217 	ldw	r3,8(r4)
    1adc:	a825883a 	mov	r18,r21
    1ae0:	3021883a 	mov	r16,r6
    1ae4:	18800315 	stw	r2,12(r3)
    1ae8:	10c00215 	stw	r3,8(r2)
    1aec:	003fdb06 	br	1a5c <_realloc_r+0x138>
    1af0:	00800304 	movi	r2,12
    1af4:	a0800015 	stw	r2,0(r20)
    1af8:	0005883a 	mov	r2,zero
    1afc:	003fe506 	br	1a94 <_realloc_r+0x170>
    1b00:	98c00117 	ldw	r3,4(r19)
    1b04:	9c4b883a 	add	r5,r19,r17
    1b08:	11000054 	ori	r4,r2,1
    1b0c:	18c0004c 	andi	r3,r3,1
    1b10:	1c62b03a 	or	r17,r3,r17
    1b14:	9c400115 	stw	r17,4(r19)
    1b18:	29000115 	stw	r4,4(r5)
    1b1c:	2885883a 	add	r2,r5,r2
    1b20:	10c00117 	ldw	r3,4(r2)
    1b24:	29400204 	addi	r5,r5,8
    1b28:	a009883a 	mov	r4,r20
    1b2c:	18c00054 	ori	r3,r3,1
    1b30:	10c00115 	stw	r3,4(r2)
    1b34:	00026f00 	call	26f0 <_free_r>
    1b38:	003fd306 	br	1a88 <_realloc_r+0x164>
    1b3c:	017fff04 	movi	r5,-4
    1b40:	414a703a 	and	r5,r8,r5
    1b44:	89800404 	addi	r6,r17,16
    1b48:	8151883a 	add	r8,r16,r5
    1b4c:	4180590e 	bge	r8,r6,1cb4 <_realloc_r+0x390>
    1b50:	1080004c 	andi	r2,r2,1
    1b54:	103f9e1e 	bne	r2,zero,19d0 <_realloc_r+0xac>
    1b58:	adbffe17 	ldw	r22,-8(r21)
    1b5c:	00bfff04 	movi	r2,-4
    1b60:	9dadc83a 	sub	r22,r19,r22
    1b64:	b1800117 	ldw	r6,4(r22)
    1b68:	3084703a 	and	r2,r6,r2
    1b6c:	20002026 	beq	r4,zero,1bf0 <_realloc_r+0x2cc>
    1b70:	80af883a 	add	r23,r16,r2
    1b74:	b96f883a 	add	r23,r23,r5
    1b78:	21c05f26 	beq	r4,r7,1cf8 <_realloc_r+0x3d4>
    1b7c:	b8c01c16 	blt	r23,r3,1bf0 <_realloc_r+0x2cc>
    1b80:	20800317 	ldw	r2,12(r4)
    1b84:	20c00217 	ldw	r3,8(r4)
    1b88:	81bfff04 	addi	r6,r16,-4
    1b8c:	01000904 	movi	r4,36
    1b90:	18800315 	stw	r2,12(r3)
    1b94:	10c00215 	stw	r3,8(r2)
    1b98:	b0c00217 	ldw	r3,8(r22)
    1b9c:	b0800317 	ldw	r2,12(r22)
    1ba0:	b4800204 	addi	r18,r22,8
    1ba4:	18800315 	stw	r2,12(r3)
    1ba8:	10c00215 	stw	r3,8(r2)
    1bac:	21801b36 	bltu	r4,r6,1c1c <_realloc_r+0x2f8>
    1bb0:	008004c4 	movi	r2,19
    1bb4:	1180352e 	bgeu	r2,r6,1c8c <_realloc_r+0x368>
    1bb8:	a8800017 	ldw	r2,0(r21)
    1bbc:	b0800215 	stw	r2,8(r22)
    1bc0:	a8800117 	ldw	r2,4(r21)
    1bc4:	b0800315 	stw	r2,12(r22)
    1bc8:	008006c4 	movi	r2,27
    1bcc:	11807f36 	bltu	r2,r6,1dcc <_realloc_r+0x4a8>
    1bd0:	b0800404 	addi	r2,r22,16
    1bd4:	ad400204 	addi	r21,r21,8
    1bd8:	00002d06 	br	1c90 <_realloc_r+0x36c>
    1bdc:	adbffe17 	ldw	r22,-8(r21)
    1be0:	00bfff04 	movi	r2,-4
    1be4:	9dadc83a 	sub	r22,r19,r22
    1be8:	b1000117 	ldw	r4,4(r22)
    1bec:	2084703a 	and	r2,r4,r2
    1bf0:	b03f7726 	beq	r22,zero,19d0 <_realloc_r+0xac>
    1bf4:	80af883a 	add	r23,r16,r2
    1bf8:	b8ff7516 	blt	r23,r3,19d0 <_realloc_r+0xac>
    1bfc:	b0800317 	ldw	r2,12(r22)
    1c00:	b0c00217 	ldw	r3,8(r22)
    1c04:	81bfff04 	addi	r6,r16,-4
    1c08:	01000904 	movi	r4,36
    1c0c:	18800315 	stw	r2,12(r3)
    1c10:	10c00215 	stw	r3,8(r2)
    1c14:	b4800204 	addi	r18,r22,8
    1c18:	21bfe52e 	bgeu	r4,r6,1bb0 <_realloc_r+0x28c>
    1c1c:	a80b883a 	mov	r5,r21
    1c20:	9009883a 	mov	r4,r18
    1c24:	00016a00 	call	16a0 <memmove>
    1c28:	b821883a 	mov	r16,r23
    1c2c:	b027883a 	mov	r19,r22
    1c30:	003f8a06 	br	1a5c <_realloc_r+0x138>
    1c34:	300b883a 	mov	r5,r6
    1c38:	dfc00917 	ldw	ra,36(sp)
    1c3c:	df000817 	ldw	fp,32(sp)
    1c40:	ddc00717 	ldw	r23,28(sp)
    1c44:	dd800617 	ldw	r22,24(sp)
    1c48:	dd400517 	ldw	r21,20(sp)
    1c4c:	dd000417 	ldw	r20,16(sp)
    1c50:	dcc00317 	ldw	r19,12(sp)
    1c54:	dc800217 	ldw	r18,8(sp)
    1c58:	dc400117 	ldw	r17,4(sp)
    1c5c:	dc000017 	ldw	r16,0(sp)
    1c60:	dec00a04 	addi	sp,sp,40
    1c64:	0000c681 	jmpi	c68 <_malloc_r>
    1c68:	a8c00017 	ldw	r3,0(r21)
    1c6c:	90c00015 	stw	r3,0(r18)
    1c70:	a8c00117 	ldw	r3,4(r21)
    1c74:	90c00115 	stw	r3,4(r18)
    1c78:	00c006c4 	movi	r3,27
    1c7c:	19804536 	bltu	r3,r6,1d94 <_realloc_r+0x470>
    1c80:	90800204 	addi	r2,r18,8
    1c84:	a8c00204 	addi	r3,r21,8
    1c88:	003f6306 	br	1a18 <_realloc_r+0xf4>
    1c8c:	9005883a 	mov	r2,r18
    1c90:	a8c00017 	ldw	r3,0(r21)
    1c94:	b821883a 	mov	r16,r23
    1c98:	b027883a 	mov	r19,r22
    1c9c:	10c00015 	stw	r3,0(r2)
    1ca0:	a8c00117 	ldw	r3,4(r21)
    1ca4:	10c00115 	stw	r3,4(r2)
    1ca8:	a8c00217 	ldw	r3,8(r21)
    1cac:	10c00215 	stw	r3,8(r2)
    1cb0:	003f6a06 	br	1a5c <_realloc_r+0x138>
    1cb4:	9c67883a 	add	r19,r19,r17
    1cb8:	4445c83a 	sub	r2,r8,r17
    1cbc:	e4c00215 	stw	r19,8(fp)
    1cc0:	10800054 	ori	r2,r2,1
    1cc4:	98800115 	stw	r2,4(r19)
    1cc8:	a8bfff17 	ldw	r2,-4(r21)
    1ccc:	a009883a 	mov	r4,r20
    1cd0:	1080004c 	andi	r2,r2,1
    1cd4:	1462b03a 	or	r17,r2,r17
    1cd8:	ac7fff15 	stw	r17,-4(r21)
    1cdc:	00034c80 	call	34c8 <__malloc_unlock>
    1ce0:	a805883a 	mov	r2,r21
    1ce4:	003f6b06 	br	1a94 <_realloc_r+0x170>
    1ce8:	a80b883a 	mov	r5,r21
    1cec:	9009883a 	mov	r4,r18
    1cf0:	00016a00 	call	16a0 <memmove>
    1cf4:	003f4e06 	br	1a30 <_realloc_r+0x10c>
    1cf8:	89000404 	addi	r4,r17,16
    1cfc:	b93fbc16 	blt	r23,r4,1bf0 <_realloc_r+0x2cc>
    1d00:	b0800317 	ldw	r2,12(r22)
    1d04:	b0c00217 	ldw	r3,8(r22)
    1d08:	81bfff04 	addi	r6,r16,-4
    1d0c:	01000904 	movi	r4,36
    1d10:	18800315 	stw	r2,12(r3)
    1d14:	10c00215 	stw	r3,8(r2)
    1d18:	b4800204 	addi	r18,r22,8
    1d1c:	21804336 	bltu	r4,r6,1e2c <_realloc_r+0x508>
    1d20:	008004c4 	movi	r2,19
    1d24:	11803f2e 	bgeu	r2,r6,1e24 <_realloc_r+0x500>
    1d28:	a8800017 	ldw	r2,0(r21)
    1d2c:	b0800215 	stw	r2,8(r22)
    1d30:	a8800117 	ldw	r2,4(r21)
    1d34:	b0800315 	stw	r2,12(r22)
    1d38:	008006c4 	movi	r2,27
    1d3c:	11803f36 	bltu	r2,r6,1e3c <_realloc_r+0x518>
    1d40:	b0800404 	addi	r2,r22,16
    1d44:	ad400204 	addi	r21,r21,8
    1d48:	a8c00017 	ldw	r3,0(r21)
    1d4c:	10c00015 	stw	r3,0(r2)
    1d50:	a8c00117 	ldw	r3,4(r21)
    1d54:	10c00115 	stw	r3,4(r2)
    1d58:	a8c00217 	ldw	r3,8(r21)
    1d5c:	10c00215 	stw	r3,8(r2)
    1d60:	b447883a 	add	r3,r22,r17
    1d64:	bc45c83a 	sub	r2,r23,r17
    1d68:	e0c00215 	stw	r3,8(fp)
    1d6c:	10800054 	ori	r2,r2,1
    1d70:	18800115 	stw	r2,4(r3)
    1d74:	b0800117 	ldw	r2,4(r22)
    1d78:	a009883a 	mov	r4,r20
    1d7c:	1080004c 	andi	r2,r2,1
    1d80:	1462b03a 	or	r17,r2,r17
    1d84:	b4400115 	stw	r17,4(r22)
    1d88:	00034c80 	call	34c8 <__malloc_unlock>
    1d8c:	9005883a 	mov	r2,r18
    1d90:	003f4006 	br	1a94 <_realloc_r+0x170>
    1d94:	a8c00217 	ldw	r3,8(r21)
    1d98:	90c00215 	stw	r3,8(r18)
    1d9c:	a8c00317 	ldw	r3,12(r21)
    1da0:	90c00315 	stw	r3,12(r18)
    1da4:	30801126 	beq	r6,r2,1dec <_realloc_r+0x4c8>
    1da8:	90800404 	addi	r2,r18,16
    1dac:	a8c00404 	addi	r3,r21,16
    1db0:	003f1906 	br	1a18 <_realloc_r+0xf4>
    1db4:	90ffff17 	ldw	r3,-4(r18)
    1db8:	00bfff04 	movi	r2,-4
    1dbc:	a825883a 	mov	r18,r21
    1dc0:	1884703a 	and	r2,r3,r2
    1dc4:	80a1883a 	add	r16,r16,r2
    1dc8:	003f2406 	br	1a5c <_realloc_r+0x138>
    1dcc:	a8800217 	ldw	r2,8(r21)
    1dd0:	b0800415 	stw	r2,16(r22)
    1dd4:	a8800317 	ldw	r2,12(r21)
    1dd8:	b0800515 	stw	r2,20(r22)
    1ddc:	31000a26 	beq	r6,r4,1e08 <_realloc_r+0x4e4>
    1de0:	b0800604 	addi	r2,r22,24
    1de4:	ad400404 	addi	r21,r21,16
    1de8:	003fa906 	br	1c90 <_realloc_r+0x36c>
    1dec:	a9000417 	ldw	r4,16(r21)
    1df0:	90800604 	addi	r2,r18,24
    1df4:	a8c00604 	addi	r3,r21,24
    1df8:	91000415 	stw	r4,16(r18)
    1dfc:	a9000517 	ldw	r4,20(r21)
    1e00:	91000515 	stw	r4,20(r18)
    1e04:	003f0406 	br	1a18 <_realloc_r+0xf4>
    1e08:	a8c00417 	ldw	r3,16(r21)
    1e0c:	ad400604 	addi	r21,r21,24
    1e10:	b0800804 	addi	r2,r22,32
    1e14:	b0c00615 	stw	r3,24(r22)
    1e18:	a8ffff17 	ldw	r3,-4(r21)
    1e1c:	b0c00715 	stw	r3,28(r22)
    1e20:	003f9b06 	br	1c90 <_realloc_r+0x36c>
    1e24:	9005883a 	mov	r2,r18
    1e28:	003fc706 	br	1d48 <_realloc_r+0x424>
    1e2c:	a80b883a 	mov	r5,r21
    1e30:	9009883a 	mov	r4,r18
    1e34:	00016a00 	call	16a0 <memmove>
    1e38:	003fc906 	br	1d60 <_realloc_r+0x43c>
    1e3c:	a8800217 	ldw	r2,8(r21)
    1e40:	b0800415 	stw	r2,16(r22)
    1e44:	a8800317 	ldw	r2,12(r21)
    1e48:	b0800515 	stw	r2,20(r22)
    1e4c:	31000726 	beq	r6,r4,1e6c <_realloc_r+0x548>
    1e50:	b0800604 	addi	r2,r22,24
    1e54:	ad400404 	addi	r21,r21,16
    1e58:	003fbb06 	br	1d48 <_realloc_r+0x424>
    1e5c:	a009883a 	mov	r4,r20
    1e60:	00034c80 	call	34c8 <__malloc_unlock>
    1e64:	0005883a 	mov	r2,zero
    1e68:	003f0a06 	br	1a94 <_realloc_r+0x170>
    1e6c:	a8c00417 	ldw	r3,16(r21)
    1e70:	ad400604 	addi	r21,r21,24
    1e74:	b0800804 	addi	r2,r22,32
    1e78:	b0c00615 	stw	r3,24(r22)
    1e7c:	a8ffff17 	ldw	r3,-4(r21)
    1e80:	b0c00715 	stw	r3,28(r22)
    1e84:	003fb006 	br	1d48 <_realloc_r+0x424>

00001e88 <_sbrk_r>:
    1e88:	defffd04 	addi	sp,sp,-12
    1e8c:	dc000015 	stw	r16,0(sp)
    1e90:	04000034 	movhi	r16,0
    1e94:	dc400115 	stw	r17,4(sp)
    1e98:	84176304 	addi	r16,r16,23948
    1e9c:	2023883a 	mov	r17,r4
    1ea0:	2809883a 	mov	r4,r5
    1ea4:	dfc00215 	stw	ra,8(sp)
    1ea8:	80000015 	stw	zero,0(r16)
    1eac:	00036b00 	call	36b0 <sbrk>
    1eb0:	00ffffc4 	movi	r3,-1
    1eb4:	10c00526 	beq	r2,r3,1ecc <_sbrk_r+0x44>
    1eb8:	dfc00217 	ldw	ra,8(sp)
    1ebc:	dc400117 	ldw	r17,4(sp)
    1ec0:	dc000017 	ldw	r16,0(sp)
    1ec4:	dec00304 	addi	sp,sp,12
    1ec8:	f800283a 	ret
    1ecc:	80c00017 	ldw	r3,0(r16)
    1ed0:	183ff926 	beq	r3,zero,1eb8 <_sbrk_r+0x30>
    1ed4:	88c00015 	stw	r3,0(r17)
    1ed8:	003ff706 	br	1eb8 <_sbrk_r+0x30>

00001edc <__sread>:
    1edc:	defffe04 	addi	sp,sp,-8
    1ee0:	dc000015 	stw	r16,0(sp)
    1ee4:	2821883a 	mov	r16,r5
    1ee8:	2940038f 	ldh	r5,14(r5)
    1eec:	dfc00115 	stw	ra,4(sp)
    1ef0:	0002c1c0 	call	2c1c <_read_r>
    1ef4:	10000716 	blt	r2,zero,1f14 <__sread+0x38>
    1ef8:	80c01417 	ldw	r3,80(r16)
    1efc:	1887883a 	add	r3,r3,r2
    1f00:	80c01415 	stw	r3,80(r16)
    1f04:	dfc00117 	ldw	ra,4(sp)
    1f08:	dc000017 	ldw	r16,0(sp)
    1f0c:	dec00204 	addi	sp,sp,8
    1f10:	f800283a 	ret
    1f14:	80c0030b 	ldhu	r3,12(r16)
    1f18:	18fbffcc 	andi	r3,r3,61439
    1f1c:	80c0030d 	sth	r3,12(r16)
    1f20:	dfc00117 	ldw	ra,4(sp)
    1f24:	dc000017 	ldw	r16,0(sp)
    1f28:	dec00204 	addi	sp,sp,8
    1f2c:	f800283a 	ret

00001f30 <__seofread>:
    1f30:	0005883a 	mov	r2,zero
    1f34:	f800283a 	ret

00001f38 <__swrite>:
    1f38:	2880030b 	ldhu	r2,12(r5)
    1f3c:	defffb04 	addi	sp,sp,-20
    1f40:	dcc00315 	stw	r19,12(sp)
    1f44:	dc800215 	stw	r18,8(sp)
    1f48:	dc400115 	stw	r17,4(sp)
    1f4c:	dc000015 	stw	r16,0(sp)
    1f50:	dfc00415 	stw	ra,16(sp)
    1f54:	10c0400c 	andi	r3,r2,256
    1f58:	2821883a 	mov	r16,r5
    1f5c:	2023883a 	mov	r17,r4
    1f60:	3025883a 	mov	r18,r6
    1f64:	3827883a 	mov	r19,r7
    1f68:	18000526 	beq	r3,zero,1f80 <__swrite+0x48>
    1f6c:	2940038f 	ldh	r5,14(r5)
    1f70:	01c00084 	movi	r7,2
    1f74:	000d883a 	mov	r6,zero
    1f78:	0002a000 	call	2a00 <_lseek_r>
    1f7c:	8080030b 	ldhu	r2,12(r16)
    1f80:	8140038f 	ldh	r5,14(r16)
    1f84:	10bbffcc 	andi	r2,r2,61439
    1f88:	980f883a 	mov	r7,r19
    1f8c:	900d883a 	mov	r6,r18
    1f90:	8809883a 	mov	r4,r17
    1f94:	8080030d 	sth	r2,12(r16)
    1f98:	dfc00417 	ldw	ra,16(sp)
    1f9c:	dcc00317 	ldw	r19,12(sp)
    1fa0:	dc800217 	ldw	r18,8(sp)
    1fa4:	dc400117 	ldw	r17,4(sp)
    1fa8:	dc000017 	ldw	r16,0(sp)
    1fac:	dec00504 	addi	sp,sp,20
    1fb0:	00020181 	jmpi	2018 <_write_r>

00001fb4 <__sseek>:
    1fb4:	defffe04 	addi	sp,sp,-8
    1fb8:	dc000015 	stw	r16,0(sp)
    1fbc:	2821883a 	mov	r16,r5
    1fc0:	2940038f 	ldh	r5,14(r5)
    1fc4:	dfc00115 	stw	ra,4(sp)
    1fc8:	0002a000 	call	2a00 <_lseek_r>
    1fcc:	00ffffc4 	movi	r3,-1
    1fd0:	10c00826 	beq	r2,r3,1ff4 <__sseek+0x40>
    1fd4:	80c0030b 	ldhu	r3,12(r16)
    1fd8:	80801415 	stw	r2,80(r16)
    1fdc:	18c40014 	ori	r3,r3,4096
    1fe0:	80c0030d 	sth	r3,12(r16)
    1fe4:	dfc00117 	ldw	ra,4(sp)
    1fe8:	dc000017 	ldw	r16,0(sp)
    1fec:	dec00204 	addi	sp,sp,8
    1ff0:	f800283a 	ret
    1ff4:	80c0030b 	ldhu	r3,12(r16)
    1ff8:	18fbffcc 	andi	r3,r3,61439
    1ffc:	80c0030d 	sth	r3,12(r16)
    2000:	dfc00117 	ldw	ra,4(sp)
    2004:	dc000017 	ldw	r16,0(sp)
    2008:	dec00204 	addi	sp,sp,8
    200c:	f800283a 	ret

00002010 <__sclose>:
    2010:	2940038f 	ldh	r5,14(r5)
    2014:	00021cc1 	jmpi	21cc <_close_r>

00002018 <_write_r>:
    2018:	defffd04 	addi	sp,sp,-12
    201c:	2805883a 	mov	r2,r5
    2020:	dc000015 	stw	r16,0(sp)
    2024:	04000034 	movhi	r16,0
    2028:	dc400115 	stw	r17,4(sp)
    202c:	300b883a 	mov	r5,r6
    2030:	84176304 	addi	r16,r16,23948
    2034:	2023883a 	mov	r17,r4
    2038:	380d883a 	mov	r6,r7
    203c:	1009883a 	mov	r4,r2
    2040:	dfc00215 	stw	ra,8(sp)
    2044:	80000015 	stw	zero,0(r16)
    2048:	00037cc0 	call	37cc <write>
    204c:	00ffffc4 	movi	r3,-1
    2050:	10c00526 	beq	r2,r3,2068 <_write_r+0x50>
    2054:	dfc00217 	ldw	ra,8(sp)
    2058:	dc400117 	ldw	r17,4(sp)
    205c:	dc000017 	ldw	r16,0(sp)
    2060:	dec00304 	addi	sp,sp,12
    2064:	f800283a 	ret
    2068:	80c00017 	ldw	r3,0(r16)
    206c:	183ff926 	beq	r3,zero,2054 <_write_r+0x3c>
    2070:	88c00015 	stw	r3,0(r17)
    2074:	003ff706 	br	2054 <_write_r+0x3c>

00002078 <__swsetup_r>:
    2078:	00800034 	movhi	r2,0
    207c:	defffd04 	addi	sp,sp,-12
    2080:	1094cb04 	addi	r2,r2,21292
    2084:	dc400115 	stw	r17,4(sp)
    2088:	2023883a 	mov	r17,r4
    208c:	11000017 	ldw	r4,0(r2)
    2090:	dc000015 	stw	r16,0(sp)
    2094:	dfc00215 	stw	ra,8(sp)
    2098:	2821883a 	mov	r16,r5
    209c:	20000226 	beq	r4,zero,20a8 <__swsetup_r+0x30>
    20a0:	20800e17 	ldw	r2,56(r4)
    20a4:	10003126 	beq	r2,zero,216c <__swsetup_r+0xf4>
    20a8:	8080030b 	ldhu	r2,12(r16)
    20ac:	10c0020c 	andi	r3,r2,8
    20b0:	1009883a 	mov	r4,r2
    20b4:	18000f26 	beq	r3,zero,20f4 <__swsetup_r+0x7c>
    20b8:	80c00417 	ldw	r3,16(r16)
    20bc:	18001526 	beq	r3,zero,2114 <__swsetup_r+0x9c>
    20c0:	1100004c 	andi	r4,r2,1
    20c4:	20001c1e 	bne	r4,zero,2138 <__swsetup_r+0xc0>
    20c8:	1080008c 	andi	r2,r2,2
    20cc:	1000291e 	bne	r2,zero,2174 <__swsetup_r+0xfc>
    20d0:	80800517 	ldw	r2,20(r16)
    20d4:	80800215 	stw	r2,8(r16)
    20d8:	18001c26 	beq	r3,zero,214c <__swsetup_r+0xd4>
    20dc:	0005883a 	mov	r2,zero
    20e0:	dfc00217 	ldw	ra,8(sp)
    20e4:	dc400117 	ldw	r17,4(sp)
    20e8:	dc000017 	ldw	r16,0(sp)
    20ec:	dec00304 	addi	sp,sp,12
    20f0:	f800283a 	ret
    20f4:	2080040c 	andi	r2,r4,16
    20f8:	10002e26 	beq	r2,zero,21b4 <__swsetup_r+0x13c>
    20fc:	2080010c 	andi	r2,r4,4
    2100:	10001e1e 	bne	r2,zero,217c <__swsetup_r+0x104>
    2104:	80c00417 	ldw	r3,16(r16)
    2108:	20800214 	ori	r2,r4,8
    210c:	8080030d 	sth	r2,12(r16)
    2110:	183feb1e 	bne	r3,zero,20c0 <__swsetup_r+0x48>
    2114:	1100a00c 	andi	r4,r2,640
    2118:	01408004 	movi	r5,512
    211c:	217fe826 	beq	r4,r5,20c0 <__swsetup_r+0x48>
    2120:	800b883a 	mov	r5,r16
    2124:	8809883a 	mov	r4,r17
    2128:	0002a600 	call	2a60 <__smakebuf_r>
    212c:	8080030b 	ldhu	r2,12(r16)
    2130:	80c00417 	ldw	r3,16(r16)
    2134:	003fe206 	br	20c0 <__swsetup_r+0x48>
    2138:	80800517 	ldw	r2,20(r16)
    213c:	80000215 	stw	zero,8(r16)
    2140:	0085c83a 	sub	r2,zero,r2
    2144:	80800615 	stw	r2,24(r16)
    2148:	183fe41e 	bne	r3,zero,20dc <__swsetup_r+0x64>
    214c:	80c0030b 	ldhu	r3,12(r16)
    2150:	0005883a 	mov	r2,zero
    2154:	1900200c 	andi	r4,r3,128
    2158:	203fe126 	beq	r4,zero,20e0 <__swsetup_r+0x68>
    215c:	18c01014 	ori	r3,r3,64
    2160:	80c0030d 	sth	r3,12(r16)
    2164:	00bfffc4 	movi	r2,-1
    2168:	003fdd06 	br	20e0 <__swsetup_r+0x68>
    216c:	00005c80 	call	5c8 <__sinit>
    2170:	003fcd06 	br	20a8 <__swsetup_r+0x30>
    2174:	0005883a 	mov	r2,zero
    2178:	003fd606 	br	20d4 <__swsetup_r+0x5c>
    217c:	81400c17 	ldw	r5,48(r16)
    2180:	28000626 	beq	r5,zero,219c <__swsetup_r+0x124>
    2184:	80801004 	addi	r2,r16,64
    2188:	28800326 	beq	r5,r2,2198 <__swsetup_r+0x120>
    218c:	8809883a 	mov	r4,r17
    2190:	00026f00 	call	26f0 <_free_r>
    2194:	8100030b 	ldhu	r4,12(r16)
    2198:	80000c15 	stw	zero,48(r16)
    219c:	80c00417 	ldw	r3,16(r16)
    21a0:	00bff6c4 	movi	r2,-37
    21a4:	1108703a 	and	r4,r2,r4
    21a8:	80000115 	stw	zero,4(r16)
    21ac:	80c00015 	stw	r3,0(r16)
    21b0:	003fd506 	br	2108 <__swsetup_r+0x90>
    21b4:	00800244 	movi	r2,9
    21b8:	88800015 	stw	r2,0(r17)
    21bc:	20801014 	ori	r2,r4,64
    21c0:	8080030d 	sth	r2,12(r16)
    21c4:	00bfffc4 	movi	r2,-1
    21c8:	003fc506 	br	20e0 <__swsetup_r+0x68>

000021cc <_close_r>:
    21cc:	defffd04 	addi	sp,sp,-12
    21d0:	dc000015 	stw	r16,0(sp)
    21d4:	04000034 	movhi	r16,0
    21d8:	dc400115 	stw	r17,4(sp)
    21dc:	84176304 	addi	r16,r16,23948
    21e0:	2023883a 	mov	r17,r4
    21e4:	2809883a 	mov	r4,r5
    21e8:	dfc00215 	stw	ra,8(sp)
    21ec:	80000015 	stw	zero,0(r16)
    21f0:	0002f440 	call	2f44 <close>
    21f4:	00ffffc4 	movi	r3,-1
    21f8:	10c00526 	beq	r2,r3,2210 <_close_r+0x44>
    21fc:	dfc00217 	ldw	ra,8(sp)
    2200:	dc400117 	ldw	r17,4(sp)
    2204:	dc000017 	ldw	r16,0(sp)
    2208:	dec00304 	addi	sp,sp,12
    220c:	f800283a 	ret
    2210:	80c00017 	ldw	r3,0(r16)
    2214:	183ff926 	beq	r3,zero,21fc <_close_r+0x30>
    2218:	88c00015 	stw	r3,0(r17)
    221c:	003ff706 	br	21fc <_close_r+0x30>

00002220 <_fclose_r>:
    2220:	28003926 	beq	r5,zero,2308 <_fclose_r+0xe8>
    2224:	defffc04 	addi	sp,sp,-16
    2228:	dc400115 	stw	r17,4(sp)
    222c:	dc000015 	stw	r16,0(sp)
    2230:	dfc00315 	stw	ra,12(sp)
    2234:	dc800215 	stw	r18,8(sp)
    2238:	2023883a 	mov	r17,r4
    223c:	2821883a 	mov	r16,r5
    2240:	20000226 	beq	r4,zero,224c <_fclose_r+0x2c>
    2244:	20800e17 	ldw	r2,56(r4)
    2248:	10002726 	beq	r2,zero,22e8 <_fclose_r+0xc8>
    224c:	8080030f 	ldh	r2,12(r16)
    2250:	1000071e 	bne	r2,zero,2270 <_fclose_r+0x50>
    2254:	0005883a 	mov	r2,zero
    2258:	dfc00317 	ldw	ra,12(sp)
    225c:	dc800217 	ldw	r18,8(sp)
    2260:	dc400117 	ldw	r17,4(sp)
    2264:	dc000017 	ldw	r16,0(sp)
    2268:	dec00404 	addi	sp,sp,16
    226c:	f800283a 	ret
    2270:	800b883a 	mov	r5,r16
    2274:	8809883a 	mov	r4,r17
    2278:	00023240 	call	2324 <__sflush_r>
    227c:	1025883a 	mov	r18,r2
    2280:	80800b17 	ldw	r2,44(r16)
    2284:	10000426 	beq	r2,zero,2298 <_fclose_r+0x78>
    2288:	81400717 	ldw	r5,28(r16)
    228c:	8809883a 	mov	r4,r17
    2290:	103ee83a 	callr	r2
    2294:	10001616 	blt	r2,zero,22f0 <_fclose_r+0xd0>
    2298:	8080030b 	ldhu	r2,12(r16)
    229c:	1080200c 	andi	r2,r2,128
    22a0:	1000151e 	bne	r2,zero,22f8 <_fclose_r+0xd8>
    22a4:	81400c17 	ldw	r5,48(r16)
    22a8:	28000526 	beq	r5,zero,22c0 <_fclose_r+0xa0>
    22ac:	80801004 	addi	r2,r16,64
    22b0:	28800226 	beq	r5,r2,22bc <_fclose_r+0x9c>
    22b4:	8809883a 	mov	r4,r17
    22b8:	00026f00 	call	26f0 <_free_r>
    22bc:	80000c15 	stw	zero,48(r16)
    22c0:	81401117 	ldw	r5,68(r16)
    22c4:	28000326 	beq	r5,zero,22d4 <_fclose_r+0xb4>
    22c8:	8809883a 	mov	r4,r17
    22cc:	00026f00 	call	26f0 <_free_r>
    22d0:	80001115 	stw	zero,68(r16)
    22d4:	00005d80 	call	5d8 <__sfp_lock_acquire>
    22d8:	8000030d 	sth	zero,12(r16)
    22dc:	00005dc0 	call	5dc <__sfp_lock_release>
    22e0:	9005883a 	mov	r2,r18
    22e4:	003fdc06 	br	2258 <_fclose_r+0x38>
    22e8:	00005c80 	call	5c8 <__sinit>
    22ec:	003fd706 	br	224c <_fclose_r+0x2c>
    22f0:	04bfffc4 	movi	r18,-1
    22f4:	003fe806 	br	2298 <_fclose_r+0x78>
    22f8:	81400417 	ldw	r5,16(r16)
    22fc:	8809883a 	mov	r4,r17
    2300:	00026f00 	call	26f0 <_free_r>
    2304:	003fe706 	br	22a4 <_fclose_r+0x84>
    2308:	0005883a 	mov	r2,zero
    230c:	f800283a 	ret

00002310 <fclose>:
    2310:	00800034 	movhi	r2,0
    2314:	1094cb04 	addi	r2,r2,21292
    2318:	200b883a 	mov	r5,r4
    231c:	11000017 	ldw	r4,0(r2)
    2320:	00022201 	jmpi	2220 <_fclose_r>

00002324 <__sflush_r>:
    2324:	2880030b 	ldhu	r2,12(r5)
    2328:	defffb04 	addi	sp,sp,-20
    232c:	dcc00315 	stw	r19,12(sp)
    2330:	dc400115 	stw	r17,4(sp)
    2334:	dfc00415 	stw	ra,16(sp)
    2338:	dc800215 	stw	r18,8(sp)
    233c:	dc000015 	stw	r16,0(sp)
    2340:	10c0020c 	andi	r3,r2,8
    2344:	2823883a 	mov	r17,r5
    2348:	2027883a 	mov	r19,r4
    234c:	1800311e 	bne	r3,zero,2414 <__sflush_r+0xf0>
    2350:	28c00117 	ldw	r3,4(r5)
    2354:	10820014 	ori	r2,r2,2048
    2358:	2880030d 	sth	r2,12(r5)
    235c:	00c04b0e 	bge	zero,r3,248c <__sflush_r+0x168>
    2360:	8a000a17 	ldw	r8,40(r17)
    2364:	40002326 	beq	r8,zero,23f4 <__sflush_r+0xd0>
    2368:	9c000017 	ldw	r16,0(r19)
    236c:	10c4000c 	andi	r3,r2,4096
    2370:	98000015 	stw	zero,0(r19)
    2374:	18004826 	beq	r3,zero,2498 <__sflush_r+0x174>
    2378:	89801417 	ldw	r6,80(r17)
    237c:	10c0010c 	andi	r3,r2,4
    2380:	18000626 	beq	r3,zero,239c <__sflush_r+0x78>
    2384:	88c00117 	ldw	r3,4(r17)
    2388:	88800c17 	ldw	r2,48(r17)
    238c:	30cdc83a 	sub	r6,r6,r3
    2390:	10000226 	beq	r2,zero,239c <__sflush_r+0x78>
    2394:	88800f17 	ldw	r2,60(r17)
    2398:	308dc83a 	sub	r6,r6,r2
    239c:	89400717 	ldw	r5,28(r17)
    23a0:	000f883a 	mov	r7,zero
    23a4:	9809883a 	mov	r4,r19
    23a8:	403ee83a 	callr	r8
    23ac:	00ffffc4 	movi	r3,-1
    23b0:	10c04426 	beq	r2,r3,24c4 <__sflush_r+0x1a0>
    23b4:	88c0030b 	ldhu	r3,12(r17)
    23b8:	89000417 	ldw	r4,16(r17)
    23bc:	88000115 	stw	zero,4(r17)
    23c0:	197dffcc 	andi	r5,r3,63487
    23c4:	8940030d 	sth	r5,12(r17)
    23c8:	89000015 	stw	r4,0(r17)
    23cc:	18c4000c 	andi	r3,r3,4096
    23d0:	18002c1e 	bne	r3,zero,2484 <__sflush_r+0x160>
    23d4:	89400c17 	ldw	r5,48(r17)
    23d8:	9c000015 	stw	r16,0(r19)
    23dc:	28000526 	beq	r5,zero,23f4 <__sflush_r+0xd0>
    23e0:	88801004 	addi	r2,r17,64
    23e4:	28800226 	beq	r5,r2,23f0 <__sflush_r+0xcc>
    23e8:	9809883a 	mov	r4,r19
    23ec:	00026f00 	call	26f0 <_free_r>
    23f0:	88000c15 	stw	zero,48(r17)
    23f4:	0005883a 	mov	r2,zero
    23f8:	dfc00417 	ldw	ra,16(sp)
    23fc:	dcc00317 	ldw	r19,12(sp)
    2400:	dc800217 	ldw	r18,8(sp)
    2404:	dc400117 	ldw	r17,4(sp)
    2408:	dc000017 	ldw	r16,0(sp)
    240c:	dec00504 	addi	sp,sp,20
    2410:	f800283a 	ret
    2414:	2c800417 	ldw	r18,16(r5)
    2418:	903ff626 	beq	r18,zero,23f4 <__sflush_r+0xd0>
    241c:	2c000017 	ldw	r16,0(r5)
    2420:	108000cc 	andi	r2,r2,3
    2424:	2c800015 	stw	r18,0(r5)
    2428:	84a1c83a 	sub	r16,r16,r18
    242c:	1000131e 	bne	r2,zero,247c <__sflush_r+0x158>
    2430:	28800517 	ldw	r2,20(r5)
    2434:	88800215 	stw	r2,8(r17)
    2438:	04000316 	blt	zero,r16,2448 <__sflush_r+0x124>
    243c:	003fed06 	br	23f4 <__sflush_r+0xd0>
    2440:	90a5883a 	add	r18,r18,r2
    2444:	043feb0e 	bge	zero,r16,23f4 <__sflush_r+0xd0>
    2448:	88800917 	ldw	r2,36(r17)
    244c:	89400717 	ldw	r5,28(r17)
    2450:	800f883a 	mov	r7,r16
    2454:	900d883a 	mov	r6,r18
    2458:	9809883a 	mov	r4,r19
    245c:	103ee83a 	callr	r2
    2460:	80a1c83a 	sub	r16,r16,r2
    2464:	00bff616 	blt	zero,r2,2440 <__sflush_r+0x11c>
    2468:	88c0030b 	ldhu	r3,12(r17)
    246c:	00bfffc4 	movi	r2,-1
    2470:	18c01014 	ori	r3,r3,64
    2474:	88c0030d 	sth	r3,12(r17)
    2478:	003fdf06 	br	23f8 <__sflush_r+0xd4>
    247c:	0005883a 	mov	r2,zero
    2480:	003fec06 	br	2434 <__sflush_r+0x110>
    2484:	88801415 	stw	r2,80(r17)
    2488:	003fd206 	br	23d4 <__sflush_r+0xb0>
    248c:	28c00f17 	ldw	r3,60(r5)
    2490:	00ffb316 	blt	zero,r3,2360 <__sflush_r+0x3c>
    2494:	003fd706 	br	23f4 <__sflush_r+0xd0>
    2498:	89400717 	ldw	r5,28(r17)
    249c:	000d883a 	mov	r6,zero
    24a0:	01c00044 	movi	r7,1
    24a4:	9809883a 	mov	r4,r19
    24a8:	403ee83a 	callr	r8
    24ac:	100d883a 	mov	r6,r2
    24b0:	00bfffc4 	movi	r2,-1
    24b4:	30801426 	beq	r6,r2,2508 <__sflush_r+0x1e4>
    24b8:	8880030b 	ldhu	r2,12(r17)
    24bc:	8a000a17 	ldw	r8,40(r17)
    24c0:	003fae06 	br	237c <__sflush_r+0x58>
    24c4:	98c00017 	ldw	r3,0(r19)
    24c8:	183fba26 	beq	r3,zero,23b4 <__sflush_r+0x90>
    24cc:	01000744 	movi	r4,29
    24d0:	19000626 	beq	r3,r4,24ec <__sflush_r+0x1c8>
    24d4:	01000584 	movi	r4,22
    24d8:	19000426 	beq	r3,r4,24ec <__sflush_r+0x1c8>
    24dc:	88c0030b 	ldhu	r3,12(r17)
    24e0:	18c01014 	ori	r3,r3,64
    24e4:	88c0030d 	sth	r3,12(r17)
    24e8:	003fc306 	br	23f8 <__sflush_r+0xd4>
    24ec:	8880030b 	ldhu	r2,12(r17)
    24f0:	88c00417 	ldw	r3,16(r17)
    24f4:	88000115 	stw	zero,4(r17)
    24f8:	10bdffcc 	andi	r2,r2,63487
    24fc:	8880030d 	sth	r2,12(r17)
    2500:	88c00015 	stw	r3,0(r17)
    2504:	003fb306 	br	23d4 <__sflush_r+0xb0>
    2508:	98800017 	ldw	r2,0(r19)
    250c:	103fea26 	beq	r2,zero,24b8 <__sflush_r+0x194>
    2510:	00c00744 	movi	r3,29
    2514:	10c00226 	beq	r2,r3,2520 <__sflush_r+0x1fc>
    2518:	00c00584 	movi	r3,22
    251c:	10c0031e 	bne	r2,r3,252c <__sflush_r+0x208>
    2520:	9c000015 	stw	r16,0(r19)
    2524:	0005883a 	mov	r2,zero
    2528:	003fb306 	br	23f8 <__sflush_r+0xd4>
    252c:	88c0030b 	ldhu	r3,12(r17)
    2530:	3005883a 	mov	r2,r6
    2534:	18c01014 	ori	r3,r3,64
    2538:	88c0030d 	sth	r3,12(r17)
    253c:	003fae06 	br	23f8 <__sflush_r+0xd4>

00002540 <_fflush_r>:
    2540:	defffd04 	addi	sp,sp,-12
    2544:	dc000115 	stw	r16,4(sp)
    2548:	dfc00215 	stw	ra,8(sp)
    254c:	2021883a 	mov	r16,r4
    2550:	20000226 	beq	r4,zero,255c <_fflush_r+0x1c>
    2554:	20800e17 	ldw	r2,56(r4)
    2558:	10000c26 	beq	r2,zero,258c <_fflush_r+0x4c>
    255c:	2880030f 	ldh	r2,12(r5)
    2560:	1000051e 	bne	r2,zero,2578 <_fflush_r+0x38>
    2564:	0005883a 	mov	r2,zero
    2568:	dfc00217 	ldw	ra,8(sp)
    256c:	dc000117 	ldw	r16,4(sp)
    2570:	dec00304 	addi	sp,sp,12
    2574:	f800283a 	ret
    2578:	8009883a 	mov	r4,r16
    257c:	dfc00217 	ldw	ra,8(sp)
    2580:	dc000117 	ldw	r16,4(sp)
    2584:	dec00304 	addi	sp,sp,12
    2588:	00023241 	jmpi	2324 <__sflush_r>
    258c:	d9400015 	stw	r5,0(sp)
    2590:	00005c80 	call	5c8 <__sinit>
    2594:	d9400017 	ldw	r5,0(sp)
    2598:	003ff006 	br	255c <_fflush_r+0x1c>

0000259c <fflush>:
    259c:	20000526 	beq	r4,zero,25b4 <fflush+0x18>
    25a0:	00800034 	movhi	r2,0
    25a4:	1094cb04 	addi	r2,r2,21292
    25a8:	200b883a 	mov	r5,r4
    25ac:	11000017 	ldw	r4,0(r2)
    25b0:	00025401 	jmpi	2540 <_fflush_r>
    25b4:	00800034 	movhi	r2,0
    25b8:	1094ca04 	addi	r2,r2,21288
    25bc:	11000017 	ldw	r4,0(r2)
    25c0:	01400034 	movhi	r5,0
    25c4:	29495004 	addi	r5,r5,9536
    25c8:	0000ba41 	jmpi	ba4 <_fwalk_reent>

000025cc <_malloc_trim_r>:
    25cc:	defffb04 	addi	sp,sp,-20
    25d0:	dcc00315 	stw	r19,12(sp)
    25d4:	04c00034 	movhi	r19,0
    25d8:	dc800215 	stw	r18,8(sp)
    25dc:	dc400115 	stw	r17,4(sp)
    25e0:	dc000015 	stw	r16,0(sp)
    25e4:	dfc00415 	stw	ra,16(sp)
    25e8:	2821883a 	mov	r16,r5
    25ec:	9cd35304 	addi	r19,r19,19788
    25f0:	2025883a 	mov	r18,r4
    25f4:	00034a40 	call	34a4 <__malloc_lock>
    25f8:	98800217 	ldw	r2,8(r19)
    25fc:	14400117 	ldw	r17,4(r2)
    2600:	00bfff04 	movi	r2,-4
    2604:	88a2703a 	and	r17,r17,r2
    2608:	8c21c83a 	sub	r16,r17,r16
    260c:	8403fbc4 	addi	r16,r16,4079
    2610:	8020d33a 	srli	r16,r16,12
    2614:	0083ffc4 	movi	r2,4095
    2618:	843fffc4 	addi	r16,r16,-1
    261c:	8020933a 	slli	r16,r16,12
    2620:	1400060e 	bge	r2,r16,263c <_malloc_trim_r+0x70>
    2624:	000b883a 	mov	r5,zero
    2628:	9009883a 	mov	r4,r18
    262c:	0001e880 	call	1e88 <_sbrk_r>
    2630:	98c00217 	ldw	r3,8(r19)
    2634:	1c47883a 	add	r3,r3,r17
    2638:	10c00a26 	beq	r2,r3,2664 <_malloc_trim_r+0x98>
    263c:	9009883a 	mov	r4,r18
    2640:	00034c80 	call	34c8 <__malloc_unlock>
    2644:	0005883a 	mov	r2,zero
    2648:	dfc00417 	ldw	ra,16(sp)
    264c:	dcc00317 	ldw	r19,12(sp)
    2650:	dc800217 	ldw	r18,8(sp)
    2654:	dc400117 	ldw	r17,4(sp)
    2658:	dc000017 	ldw	r16,0(sp)
    265c:	dec00504 	addi	sp,sp,20
    2660:	f800283a 	ret
    2664:	040bc83a 	sub	r5,zero,r16
    2668:	9009883a 	mov	r4,r18
    266c:	0001e880 	call	1e88 <_sbrk_r>
    2670:	00ffffc4 	movi	r3,-1
    2674:	10c00d26 	beq	r2,r3,26ac <_malloc_trim_r+0xe0>
    2678:	00c00034 	movhi	r3,0
    267c:	18d76704 	addi	r3,r3,23964
    2680:	18800017 	ldw	r2,0(r3)
    2684:	99000217 	ldw	r4,8(r19)
    2688:	8c23c83a 	sub	r17,r17,r16
    268c:	8c400054 	ori	r17,r17,1
    2690:	1421c83a 	sub	r16,r2,r16
    2694:	24400115 	stw	r17,4(r4)
    2698:	9009883a 	mov	r4,r18
    269c:	1c000015 	stw	r16,0(r3)
    26a0:	00034c80 	call	34c8 <__malloc_unlock>
    26a4:	00800044 	movi	r2,1
    26a8:	003fe706 	br	2648 <_malloc_trim_r+0x7c>
    26ac:	000b883a 	mov	r5,zero
    26b0:	9009883a 	mov	r4,r18
    26b4:	0001e880 	call	1e88 <_sbrk_r>
    26b8:	99000217 	ldw	r4,8(r19)
    26bc:	014003c4 	movi	r5,15
    26c0:	1107c83a 	sub	r3,r2,r4
    26c4:	28ffdd0e 	bge	r5,r3,263c <_malloc_trim_r+0x70>
    26c8:	01400034 	movhi	r5,0
    26cc:	2954cc04 	addi	r5,r5,21296
    26d0:	29400017 	ldw	r5,0(r5)
    26d4:	18c00054 	ori	r3,r3,1
    26d8:	20c00115 	stw	r3,4(r4)
    26dc:	00c00034 	movhi	r3,0
    26e0:	1145c83a 	sub	r2,r2,r5
    26e4:	18d76704 	addi	r3,r3,23964
    26e8:	18800015 	stw	r2,0(r3)
    26ec:	003fd306 	br	263c <_malloc_trim_r+0x70>

000026f0 <_free_r>:
    26f0:	28004126 	beq	r5,zero,27f8 <_free_r+0x108>
    26f4:	defffd04 	addi	sp,sp,-12
    26f8:	dc400115 	stw	r17,4(sp)
    26fc:	dc000015 	stw	r16,0(sp)
    2700:	2023883a 	mov	r17,r4
    2704:	2821883a 	mov	r16,r5
    2708:	dfc00215 	stw	ra,8(sp)
    270c:	00034a40 	call	34a4 <__malloc_lock>
    2710:	81ffff17 	ldw	r7,-4(r16)
    2714:	00bfff84 	movi	r2,-2
    2718:	01000034 	movhi	r4,0
    271c:	81bffe04 	addi	r6,r16,-8
    2720:	3884703a 	and	r2,r7,r2
    2724:	21135304 	addi	r4,r4,19788
    2728:	308b883a 	add	r5,r6,r2
    272c:	2a400117 	ldw	r9,4(r5)
    2730:	22000217 	ldw	r8,8(r4)
    2734:	00ffff04 	movi	r3,-4
    2738:	48c6703a 	and	r3,r9,r3
    273c:	2a005726 	beq	r5,r8,289c <_free_r+0x1ac>
    2740:	28c00115 	stw	r3,4(r5)
    2744:	39c0004c 	andi	r7,r7,1
    2748:	3800091e 	bne	r7,zero,2770 <_free_r+0x80>
    274c:	823ffe17 	ldw	r8,-8(r16)
    2750:	22400204 	addi	r9,r4,8
    2754:	320dc83a 	sub	r6,r6,r8
    2758:	31c00217 	ldw	r7,8(r6)
    275c:	1205883a 	add	r2,r2,r8
    2760:	3a406526 	beq	r7,r9,28f8 <_free_r+0x208>
    2764:	32000317 	ldw	r8,12(r6)
    2768:	3a000315 	stw	r8,12(r7)
    276c:	41c00215 	stw	r7,8(r8)
    2770:	28cf883a 	add	r7,r5,r3
    2774:	39c00117 	ldw	r7,4(r7)
    2778:	39c0004c 	andi	r7,r7,1
    277c:	38003a26 	beq	r7,zero,2868 <_free_r+0x178>
    2780:	10c00054 	ori	r3,r2,1
    2784:	30c00115 	stw	r3,4(r6)
    2788:	3087883a 	add	r3,r6,r2
    278c:	18800015 	stw	r2,0(r3)
    2790:	00c07fc4 	movi	r3,511
    2794:	18801936 	bltu	r3,r2,27fc <_free_r+0x10c>
    2798:	1004d0fa 	srli	r2,r2,3
    279c:	01c00044 	movi	r7,1
    27a0:	21400117 	ldw	r5,4(r4)
    27a4:	10c00044 	addi	r3,r2,1
    27a8:	18c7883a 	add	r3,r3,r3
    27ac:	1005d0ba 	srai	r2,r2,2
    27b0:	18c7883a 	add	r3,r3,r3
    27b4:	18c7883a 	add	r3,r3,r3
    27b8:	1907883a 	add	r3,r3,r4
    27bc:	3884983a 	sll	r2,r7,r2
    27c0:	19c00017 	ldw	r7,0(r3)
    27c4:	1a3ffe04 	addi	r8,r3,-8
    27c8:	1144b03a 	or	r2,r2,r5
    27cc:	32000315 	stw	r8,12(r6)
    27d0:	31c00215 	stw	r7,8(r6)
    27d4:	20800115 	stw	r2,4(r4)
    27d8:	19800015 	stw	r6,0(r3)
    27dc:	39800315 	stw	r6,12(r7)
    27e0:	8809883a 	mov	r4,r17
    27e4:	dfc00217 	ldw	ra,8(sp)
    27e8:	dc400117 	ldw	r17,4(sp)
    27ec:	dc000017 	ldw	r16,0(sp)
    27f0:	dec00304 	addi	sp,sp,12
    27f4:	00034c81 	jmpi	34c8 <__malloc_unlock>
    27f8:	f800283a 	ret
    27fc:	100ad27a 	srli	r5,r2,9
    2800:	00c00104 	movi	r3,4
    2804:	19404a36 	bltu	r3,r5,2930 <_free_r+0x240>
    2808:	100ad1ba 	srli	r5,r2,6
    280c:	28c00e44 	addi	r3,r5,57
    2810:	18c7883a 	add	r3,r3,r3
    2814:	29400e04 	addi	r5,r5,56
    2818:	18c7883a 	add	r3,r3,r3
    281c:	18c7883a 	add	r3,r3,r3
    2820:	1909883a 	add	r4,r3,r4
    2824:	20c00017 	ldw	r3,0(r4)
    2828:	01c00034 	movhi	r7,0
    282c:	213ffe04 	addi	r4,r4,-8
    2830:	39d35304 	addi	r7,r7,19788
    2834:	20c04426 	beq	r4,r3,2948 <_free_r+0x258>
    2838:	01ffff04 	movi	r7,-4
    283c:	19400117 	ldw	r5,4(r3)
    2840:	29ca703a 	and	r5,r5,r7
    2844:	1140022e 	bgeu	r2,r5,2850 <_free_r+0x160>
    2848:	18c00217 	ldw	r3,8(r3)
    284c:	20fffb1e 	bne	r4,r3,283c <_free_r+0x14c>
    2850:	19000317 	ldw	r4,12(r3)
    2854:	31000315 	stw	r4,12(r6)
    2858:	30c00215 	stw	r3,8(r6)
    285c:	21800215 	stw	r6,8(r4)
    2860:	19800315 	stw	r6,12(r3)
    2864:	003fde06 	br	27e0 <_free_r+0xf0>
    2868:	29c00217 	ldw	r7,8(r5)
    286c:	10c5883a 	add	r2,r2,r3
    2870:	00c00034 	movhi	r3,0
    2874:	18d35504 	addi	r3,r3,19796
    2878:	38c03b26 	beq	r7,r3,2968 <_free_r+0x278>
    287c:	2a000317 	ldw	r8,12(r5)
    2880:	11400054 	ori	r5,r2,1
    2884:	3087883a 	add	r3,r6,r2
    2888:	3a000315 	stw	r8,12(r7)
    288c:	41c00215 	stw	r7,8(r8)
    2890:	31400115 	stw	r5,4(r6)
    2894:	18800015 	stw	r2,0(r3)
    2898:	003fbd06 	br	2790 <_free_r+0xa0>
    289c:	39c0004c 	andi	r7,r7,1
    28a0:	10c5883a 	add	r2,r2,r3
    28a4:	3800071e 	bne	r7,zero,28c4 <_free_r+0x1d4>
    28a8:	81fffe17 	ldw	r7,-8(r16)
    28ac:	31cdc83a 	sub	r6,r6,r7
    28b0:	30c00317 	ldw	r3,12(r6)
    28b4:	31400217 	ldw	r5,8(r6)
    28b8:	11c5883a 	add	r2,r2,r7
    28bc:	28c00315 	stw	r3,12(r5)
    28c0:	19400215 	stw	r5,8(r3)
    28c4:	10c00054 	ori	r3,r2,1
    28c8:	30c00115 	stw	r3,4(r6)
    28cc:	00c00034 	movhi	r3,0
    28d0:	18d4cd04 	addi	r3,r3,21300
    28d4:	18c00017 	ldw	r3,0(r3)
    28d8:	21800215 	stw	r6,8(r4)
    28dc:	10ffc036 	bltu	r2,r3,27e0 <_free_r+0xf0>
    28e0:	00800034 	movhi	r2,0
    28e4:	10976204 	addi	r2,r2,23944
    28e8:	11400017 	ldw	r5,0(r2)
    28ec:	8809883a 	mov	r4,r17
    28f0:	00025cc0 	call	25cc <_malloc_trim_r>
    28f4:	003fba06 	br	27e0 <_free_r+0xf0>
    28f8:	28c9883a 	add	r4,r5,r3
    28fc:	21000117 	ldw	r4,4(r4)
    2900:	2100004c 	andi	r4,r4,1
    2904:	2000391e 	bne	r4,zero,29ec <_free_r+0x2fc>
    2908:	29c00217 	ldw	r7,8(r5)
    290c:	29000317 	ldw	r4,12(r5)
    2910:	1885883a 	add	r2,r3,r2
    2914:	10c00054 	ori	r3,r2,1
    2918:	39000315 	stw	r4,12(r7)
    291c:	21c00215 	stw	r7,8(r4)
    2920:	30c00115 	stw	r3,4(r6)
    2924:	308d883a 	add	r6,r6,r2
    2928:	30800015 	stw	r2,0(r6)
    292c:	003fac06 	br	27e0 <_free_r+0xf0>
    2930:	00c00504 	movi	r3,20
    2934:	19401536 	bltu	r3,r5,298c <_free_r+0x29c>
    2938:	28c01704 	addi	r3,r5,92
    293c:	18c7883a 	add	r3,r3,r3
    2940:	294016c4 	addi	r5,r5,91
    2944:	003fb406 	br	2818 <_free_r+0x128>
    2948:	280bd0ba 	srai	r5,r5,2
    294c:	00c00044 	movi	r3,1
    2950:	38800117 	ldw	r2,4(r7)
    2954:	194a983a 	sll	r5,r3,r5
    2958:	2007883a 	mov	r3,r4
    295c:	2884b03a 	or	r2,r5,r2
    2960:	38800115 	stw	r2,4(r7)
    2964:	003fbb06 	br	2854 <_free_r+0x164>
    2968:	21800515 	stw	r6,20(r4)
    296c:	21800415 	stw	r6,16(r4)
    2970:	10c00054 	ori	r3,r2,1
    2974:	31c00315 	stw	r7,12(r6)
    2978:	31c00215 	stw	r7,8(r6)
    297c:	30c00115 	stw	r3,4(r6)
    2980:	308d883a 	add	r6,r6,r2
    2984:	30800015 	stw	r2,0(r6)
    2988:	003f9506 	br	27e0 <_free_r+0xf0>
    298c:	00c01504 	movi	r3,84
    2990:	19400536 	bltu	r3,r5,29a8 <_free_r+0x2b8>
    2994:	100ad33a 	srli	r5,r2,12
    2998:	28c01bc4 	addi	r3,r5,111
    299c:	18c7883a 	add	r3,r3,r3
    29a0:	29401b84 	addi	r5,r5,110
    29a4:	003f9c06 	br	2818 <_free_r+0x128>
    29a8:	00c05504 	movi	r3,340
    29ac:	19400536 	bltu	r3,r5,29c4 <_free_r+0x2d4>
    29b0:	100ad3fa 	srli	r5,r2,15
    29b4:	28c01e04 	addi	r3,r5,120
    29b8:	18c7883a 	add	r3,r3,r3
    29bc:	29401dc4 	addi	r5,r5,119
    29c0:	003f9506 	br	2818 <_free_r+0x128>
    29c4:	00c15504 	movi	r3,1364
    29c8:	19400536 	bltu	r3,r5,29e0 <_free_r+0x2f0>
    29cc:	100ad4ba 	srli	r5,r2,18
    29d0:	28c01f44 	addi	r3,r5,125
    29d4:	18c7883a 	add	r3,r3,r3
    29d8:	29401f04 	addi	r5,r5,124
    29dc:	003f8e06 	br	2818 <_free_r+0x128>
    29e0:	00c03f84 	movi	r3,254
    29e4:	01401f84 	movi	r5,126
    29e8:	003f8b06 	br	2818 <_free_r+0x128>
    29ec:	10c00054 	ori	r3,r2,1
    29f0:	30c00115 	stw	r3,4(r6)
    29f4:	308d883a 	add	r6,r6,r2
    29f8:	30800015 	stw	r2,0(r6)
    29fc:	003f7806 	br	27e0 <_free_r+0xf0>

00002a00 <_lseek_r>:
    2a00:	defffd04 	addi	sp,sp,-12
    2a04:	2805883a 	mov	r2,r5
    2a08:	dc000015 	stw	r16,0(sp)
    2a0c:	04000034 	movhi	r16,0
    2a10:	dc400115 	stw	r17,4(sp)
    2a14:	300b883a 	mov	r5,r6
    2a18:	84176304 	addi	r16,r16,23948
    2a1c:	2023883a 	mov	r17,r4
    2a20:	380d883a 	mov	r6,r7
    2a24:	1009883a 	mov	r4,r2
    2a28:	dfc00215 	stw	ra,8(sp)
    2a2c:	80000015 	stw	zero,0(r16)
    2a30:	000334c0 	call	334c <lseek>
    2a34:	00ffffc4 	movi	r3,-1
    2a38:	10c00526 	beq	r2,r3,2a50 <_lseek_r+0x50>
    2a3c:	dfc00217 	ldw	ra,8(sp)
    2a40:	dc400117 	ldw	r17,4(sp)
    2a44:	dc000017 	ldw	r16,0(sp)
    2a48:	dec00304 	addi	sp,sp,12
    2a4c:	f800283a 	ret
    2a50:	80c00017 	ldw	r3,0(r16)
    2a54:	183ff926 	beq	r3,zero,2a3c <_lseek_r+0x3c>
    2a58:	88c00015 	stw	r3,0(r17)
    2a5c:	003ff706 	br	2a3c <_lseek_r+0x3c>

00002a60 <__smakebuf_r>:
    2a60:	2880030b 	ldhu	r2,12(r5)
    2a64:	10c0008c 	andi	r3,r2,2
    2a68:	1800411e 	bne	r3,zero,2b70 <__smakebuf_r+0x110>
    2a6c:	deffec04 	addi	sp,sp,-80
    2a70:	dc000f15 	stw	r16,60(sp)
    2a74:	2821883a 	mov	r16,r5
    2a78:	2940038f 	ldh	r5,14(r5)
    2a7c:	dc401015 	stw	r17,64(sp)
    2a80:	dfc01315 	stw	ra,76(sp)
    2a84:	dcc01215 	stw	r19,72(sp)
    2a88:	dc801115 	stw	r18,68(sp)
    2a8c:	2023883a 	mov	r17,r4
    2a90:	28001c16 	blt	r5,zero,2b04 <__smakebuf_r+0xa4>
    2a94:	d80d883a 	mov	r6,sp
    2a98:	0002c7c0 	call	2c7c <_fstat_r>
    2a9c:	10001816 	blt	r2,zero,2b00 <__smakebuf_r+0xa0>
    2aa0:	d8800117 	ldw	r2,4(sp)
    2aa4:	00e00014 	movui	r3,32768
    2aa8:	10bc000c 	andi	r2,r2,61440
    2aac:	14c80020 	cmpeqi	r19,r2,8192
    2ab0:	10c03726 	beq	r2,r3,2b90 <__smakebuf_r+0x130>
    2ab4:	80c0030b 	ldhu	r3,12(r16)
    2ab8:	18c20014 	ori	r3,r3,2048
    2abc:	80c0030d 	sth	r3,12(r16)
    2ac0:	00c80004 	movi	r3,8192
    2ac4:	10c0521e 	bne	r2,r3,2c10 <__smakebuf_r+0x1b0>
    2ac8:	8140038f 	ldh	r5,14(r16)
    2acc:	8809883a 	mov	r4,r17
    2ad0:	0002cd80 	call	2cd8 <_isatty_r>
    2ad4:	10004c26 	beq	r2,zero,2c08 <__smakebuf_r+0x1a8>
    2ad8:	8080030b 	ldhu	r2,12(r16)
    2adc:	80c010c4 	addi	r3,r16,67
    2ae0:	80c00015 	stw	r3,0(r16)
    2ae4:	10800054 	ori	r2,r2,1
    2ae8:	8080030d 	sth	r2,12(r16)
    2aec:	00800044 	movi	r2,1
    2af0:	80c00415 	stw	r3,16(r16)
    2af4:	80800515 	stw	r2,20(r16)
    2af8:	04810004 	movi	r18,1024
    2afc:	00000706 	br	2b1c <__smakebuf_r+0xbc>
    2b00:	8080030b 	ldhu	r2,12(r16)
    2b04:	10c0200c 	andi	r3,r2,128
    2b08:	18001f1e 	bne	r3,zero,2b88 <__smakebuf_r+0x128>
    2b0c:	04810004 	movi	r18,1024
    2b10:	10820014 	ori	r2,r2,2048
    2b14:	8080030d 	sth	r2,12(r16)
    2b18:	0027883a 	mov	r19,zero
    2b1c:	900b883a 	mov	r5,r18
    2b20:	8809883a 	mov	r4,r17
    2b24:	0000c680 	call	c68 <_malloc_r>
    2b28:	10002c26 	beq	r2,zero,2bdc <__smakebuf_r+0x17c>
    2b2c:	80c0030b 	ldhu	r3,12(r16)
    2b30:	01000034 	movhi	r4,0
    2b34:	21009c04 	addi	r4,r4,624
    2b38:	89000f15 	stw	r4,60(r17)
    2b3c:	18c02014 	ori	r3,r3,128
    2b40:	80c0030d 	sth	r3,12(r16)
    2b44:	80800015 	stw	r2,0(r16)
    2b48:	80800415 	stw	r2,16(r16)
    2b4c:	84800515 	stw	r18,20(r16)
    2b50:	98001a1e 	bne	r19,zero,2bbc <__smakebuf_r+0x15c>
    2b54:	dfc01317 	ldw	ra,76(sp)
    2b58:	dcc01217 	ldw	r19,72(sp)
    2b5c:	dc801117 	ldw	r18,68(sp)
    2b60:	dc401017 	ldw	r17,64(sp)
    2b64:	dc000f17 	ldw	r16,60(sp)
    2b68:	dec01404 	addi	sp,sp,80
    2b6c:	f800283a 	ret
    2b70:	288010c4 	addi	r2,r5,67
    2b74:	28800015 	stw	r2,0(r5)
    2b78:	28800415 	stw	r2,16(r5)
    2b7c:	00800044 	movi	r2,1
    2b80:	28800515 	stw	r2,20(r5)
    2b84:	f800283a 	ret
    2b88:	04801004 	movi	r18,64
    2b8c:	003fe006 	br	2b10 <__smakebuf_r+0xb0>
    2b90:	81000a17 	ldw	r4,40(r16)
    2b94:	00c00034 	movhi	r3,0
    2b98:	18c7ed04 	addi	r3,r3,8116
    2b9c:	20ffc51e 	bne	r4,r3,2ab4 <__smakebuf_r+0x54>
    2ba0:	8080030b 	ldhu	r2,12(r16)
    2ba4:	04810004 	movi	r18,1024
    2ba8:	84801315 	stw	r18,76(r16)
    2bac:	1484b03a 	or	r2,r2,r18
    2bb0:	8080030d 	sth	r2,12(r16)
    2bb4:	0027883a 	mov	r19,zero
    2bb8:	003fd806 	br	2b1c <__smakebuf_r+0xbc>
    2bbc:	8140038f 	ldh	r5,14(r16)
    2bc0:	8809883a 	mov	r4,r17
    2bc4:	0002cd80 	call	2cd8 <_isatty_r>
    2bc8:	103fe226 	beq	r2,zero,2b54 <__smakebuf_r+0xf4>
    2bcc:	8080030b 	ldhu	r2,12(r16)
    2bd0:	10800054 	ori	r2,r2,1
    2bd4:	8080030d 	sth	r2,12(r16)
    2bd8:	003fde06 	br	2b54 <__smakebuf_r+0xf4>
    2bdc:	8080030b 	ldhu	r2,12(r16)
    2be0:	10c0800c 	andi	r3,r2,512
    2be4:	183fdb1e 	bne	r3,zero,2b54 <__smakebuf_r+0xf4>
    2be8:	10800094 	ori	r2,r2,2
    2bec:	80c010c4 	addi	r3,r16,67
    2bf0:	8080030d 	sth	r2,12(r16)
    2bf4:	00800044 	movi	r2,1
    2bf8:	80c00015 	stw	r3,0(r16)
    2bfc:	80c00415 	stw	r3,16(r16)
    2c00:	80800515 	stw	r2,20(r16)
    2c04:	003fd306 	br	2b54 <__smakebuf_r+0xf4>
    2c08:	04810004 	movi	r18,1024
    2c0c:	003fc306 	br	2b1c <__smakebuf_r+0xbc>
    2c10:	0027883a 	mov	r19,zero
    2c14:	04810004 	movi	r18,1024
    2c18:	003fc006 	br	2b1c <__smakebuf_r+0xbc>

00002c1c <_read_r>:
    2c1c:	defffd04 	addi	sp,sp,-12
    2c20:	2805883a 	mov	r2,r5
    2c24:	dc000015 	stw	r16,0(sp)
    2c28:	04000034 	movhi	r16,0
    2c2c:	dc400115 	stw	r17,4(sp)
    2c30:	300b883a 	mov	r5,r6
    2c34:	84176304 	addi	r16,r16,23948
    2c38:	2023883a 	mov	r17,r4
    2c3c:	380d883a 	mov	r6,r7
    2c40:	1009883a 	mov	r4,r2
    2c44:	dfc00215 	stw	ra,8(sp)
    2c48:	80000015 	stw	zero,0(r16)
    2c4c:	00035280 	call	3528 <read>
    2c50:	00ffffc4 	movi	r3,-1
    2c54:	10c00526 	beq	r2,r3,2c6c <_read_r+0x50>
    2c58:	dfc00217 	ldw	ra,8(sp)
    2c5c:	dc400117 	ldw	r17,4(sp)
    2c60:	dc000017 	ldw	r16,0(sp)
    2c64:	dec00304 	addi	sp,sp,12
    2c68:	f800283a 	ret
    2c6c:	80c00017 	ldw	r3,0(r16)
    2c70:	183ff926 	beq	r3,zero,2c58 <_read_r+0x3c>
    2c74:	88c00015 	stw	r3,0(r17)
    2c78:	003ff706 	br	2c58 <_read_r+0x3c>

00002c7c <_fstat_r>:
    2c7c:	defffd04 	addi	sp,sp,-12
    2c80:	2805883a 	mov	r2,r5
    2c84:	dc000015 	stw	r16,0(sp)
    2c88:	04000034 	movhi	r16,0
    2c8c:	dc400115 	stw	r17,4(sp)
    2c90:	84176304 	addi	r16,r16,23948
    2c94:	2023883a 	mov	r17,r4
    2c98:	300b883a 	mov	r5,r6
    2c9c:	1009883a 	mov	r4,r2
    2ca0:	dfc00215 	stw	ra,8(sp)
    2ca4:	80000015 	stw	zero,0(r16)
    2ca8:	00030840 	call	3084 <fstat>
    2cac:	00ffffc4 	movi	r3,-1
    2cb0:	10c00526 	beq	r2,r3,2cc8 <_fstat_r+0x4c>
    2cb4:	dfc00217 	ldw	ra,8(sp)
    2cb8:	dc400117 	ldw	r17,4(sp)
    2cbc:	dc000017 	ldw	r16,0(sp)
    2cc0:	dec00304 	addi	sp,sp,12
    2cc4:	f800283a 	ret
    2cc8:	80c00017 	ldw	r3,0(r16)
    2ccc:	183ff926 	beq	r3,zero,2cb4 <_fstat_r+0x38>
    2cd0:	88c00015 	stw	r3,0(r17)
    2cd4:	003ff706 	br	2cb4 <_fstat_r+0x38>

00002cd8 <_isatty_r>:
    2cd8:	defffd04 	addi	sp,sp,-12
    2cdc:	dc000015 	stw	r16,0(sp)
    2ce0:	04000034 	movhi	r16,0
    2ce4:	dc400115 	stw	r17,4(sp)
    2ce8:	84176304 	addi	r16,r16,23948
    2cec:	2023883a 	mov	r17,r4
    2cf0:	2809883a 	mov	r4,r5
    2cf4:	dfc00215 	stw	ra,8(sp)
    2cf8:	80000015 	stw	zero,0(r16)
    2cfc:	00031780 	call	3178 <isatty>
    2d00:	00ffffc4 	movi	r3,-1
    2d04:	10c00526 	beq	r2,r3,2d1c <_isatty_r+0x44>
    2d08:	dfc00217 	ldw	ra,8(sp)
    2d0c:	dc400117 	ldw	r17,4(sp)
    2d10:	dc000017 	ldw	r16,0(sp)
    2d14:	dec00304 	addi	sp,sp,12
    2d18:	f800283a 	ret
    2d1c:	80c00017 	ldw	r3,0(r16)
    2d20:	183ff926 	beq	r3,zero,2d08 <_isatty_r+0x30>
    2d24:	88c00015 	stw	r3,0(r17)
    2d28:	003ff706 	br	2d08 <_isatty_r+0x30>

00002d2c <__divsi3>:
    2d2c:	20001b16 	blt	r4,zero,2d9c <__divsi3+0x70>
    2d30:	000f883a 	mov	r7,zero
    2d34:	28001616 	blt	r5,zero,2d90 <__divsi3+0x64>
    2d38:	200d883a 	mov	r6,r4
    2d3c:	29001a2e 	bgeu	r5,r4,2da8 <__divsi3+0x7c>
    2d40:	00800804 	movi	r2,32
    2d44:	00c00044 	movi	r3,1
    2d48:	00000106 	br	2d50 <__divsi3+0x24>
    2d4c:	10000d26 	beq	r2,zero,2d84 <__divsi3+0x58>
    2d50:	294b883a 	add	r5,r5,r5
    2d54:	10bfffc4 	addi	r2,r2,-1
    2d58:	18c7883a 	add	r3,r3,r3
    2d5c:	293ffb36 	bltu	r5,r4,2d4c <__divsi3+0x20>
    2d60:	0005883a 	mov	r2,zero
    2d64:	18000726 	beq	r3,zero,2d84 <__divsi3+0x58>
    2d68:	0005883a 	mov	r2,zero
    2d6c:	31400236 	bltu	r6,r5,2d78 <__divsi3+0x4c>
    2d70:	314dc83a 	sub	r6,r6,r5
    2d74:	10c4b03a 	or	r2,r2,r3
    2d78:	1806d07a 	srli	r3,r3,1
    2d7c:	280ad07a 	srli	r5,r5,1
    2d80:	183ffa1e 	bne	r3,zero,2d6c <__divsi3+0x40>
    2d84:	38000126 	beq	r7,zero,2d8c <__divsi3+0x60>
    2d88:	0085c83a 	sub	r2,zero,r2
    2d8c:	f800283a 	ret
    2d90:	014bc83a 	sub	r5,zero,r5
    2d94:	39c0005c 	xori	r7,r7,1
    2d98:	003fe706 	br	2d38 <__divsi3+0xc>
    2d9c:	0109c83a 	sub	r4,zero,r4
    2da0:	01c00044 	movi	r7,1
    2da4:	003fe306 	br	2d34 <__divsi3+0x8>
    2da8:	00c00044 	movi	r3,1
    2dac:	003fee06 	br	2d68 <__divsi3+0x3c>

00002db0 <__modsi3>:
    2db0:	20001716 	blt	r4,zero,2e10 <__modsi3+0x60>
    2db4:	000f883a 	mov	r7,zero
    2db8:	2005883a 	mov	r2,r4
    2dbc:	28001216 	blt	r5,zero,2e08 <__modsi3+0x58>
    2dc0:	2900162e 	bgeu	r5,r4,2e1c <__modsi3+0x6c>
    2dc4:	01800804 	movi	r6,32
    2dc8:	00c00044 	movi	r3,1
    2dcc:	00000106 	br	2dd4 <__modsi3+0x24>
    2dd0:	30000a26 	beq	r6,zero,2dfc <__modsi3+0x4c>
    2dd4:	294b883a 	add	r5,r5,r5
    2dd8:	31bfffc4 	addi	r6,r6,-1
    2ddc:	18c7883a 	add	r3,r3,r3
    2de0:	293ffb36 	bltu	r5,r4,2dd0 <__modsi3+0x20>
    2de4:	18000526 	beq	r3,zero,2dfc <__modsi3+0x4c>
    2de8:	1806d07a 	srli	r3,r3,1
    2dec:	11400136 	bltu	r2,r5,2df4 <__modsi3+0x44>
    2df0:	1145c83a 	sub	r2,r2,r5
    2df4:	280ad07a 	srli	r5,r5,1
    2df8:	183ffb1e 	bne	r3,zero,2de8 <__modsi3+0x38>
    2dfc:	38000126 	beq	r7,zero,2e04 <__modsi3+0x54>
    2e00:	0085c83a 	sub	r2,zero,r2
    2e04:	f800283a 	ret
    2e08:	014bc83a 	sub	r5,zero,r5
    2e0c:	003fec06 	br	2dc0 <__modsi3+0x10>
    2e10:	0109c83a 	sub	r4,zero,r4
    2e14:	01c00044 	movi	r7,1
    2e18:	003fe706 	br	2db8 <__modsi3+0x8>
    2e1c:	00c00044 	movi	r3,1
    2e20:	003ff106 	br	2de8 <__modsi3+0x38>

00002e24 <__udivsi3>:
    2e24:	200d883a 	mov	r6,r4
    2e28:	2900152e 	bgeu	r5,r4,2e80 <__udivsi3+0x5c>
    2e2c:	28001416 	blt	r5,zero,2e80 <__udivsi3+0x5c>
    2e30:	00800804 	movi	r2,32
    2e34:	00c00044 	movi	r3,1
    2e38:	00000206 	br	2e44 <__udivsi3+0x20>
    2e3c:	10000e26 	beq	r2,zero,2e78 <__udivsi3+0x54>
    2e40:	28000516 	blt	r5,zero,2e58 <__udivsi3+0x34>
    2e44:	294b883a 	add	r5,r5,r5
    2e48:	10bfffc4 	addi	r2,r2,-1
    2e4c:	18c7883a 	add	r3,r3,r3
    2e50:	293ffa36 	bltu	r5,r4,2e3c <__udivsi3+0x18>
    2e54:	18000826 	beq	r3,zero,2e78 <__udivsi3+0x54>
    2e58:	0005883a 	mov	r2,zero
    2e5c:	31400236 	bltu	r6,r5,2e68 <__udivsi3+0x44>
    2e60:	314dc83a 	sub	r6,r6,r5
    2e64:	10c4b03a 	or	r2,r2,r3
    2e68:	1806d07a 	srli	r3,r3,1
    2e6c:	280ad07a 	srli	r5,r5,1
    2e70:	183ffa1e 	bne	r3,zero,2e5c <__udivsi3+0x38>
    2e74:	f800283a 	ret
    2e78:	0005883a 	mov	r2,zero
    2e7c:	f800283a 	ret
    2e80:	00c00044 	movi	r3,1
    2e84:	003ff406 	br	2e58 <__udivsi3+0x34>

00002e88 <__umodsi3>:
    2e88:	2005883a 	mov	r2,r4
    2e8c:	2900122e 	bgeu	r5,r4,2ed8 <__umodsi3+0x50>
    2e90:	28001116 	blt	r5,zero,2ed8 <__umodsi3+0x50>
    2e94:	01800804 	movi	r6,32
    2e98:	00c00044 	movi	r3,1
    2e9c:	00000206 	br	2ea8 <__umodsi3+0x20>
    2ea0:	30000c26 	beq	r6,zero,2ed4 <__umodsi3+0x4c>
    2ea4:	28000516 	blt	r5,zero,2ebc <__umodsi3+0x34>
    2ea8:	294b883a 	add	r5,r5,r5
    2eac:	31bfffc4 	addi	r6,r6,-1
    2eb0:	18c7883a 	add	r3,r3,r3
    2eb4:	293ffa36 	bltu	r5,r4,2ea0 <__umodsi3+0x18>
    2eb8:	18000626 	beq	r3,zero,2ed4 <__umodsi3+0x4c>
    2ebc:	1806d07a 	srli	r3,r3,1
    2ec0:	11400136 	bltu	r2,r5,2ec8 <__umodsi3+0x40>
    2ec4:	1145c83a 	sub	r2,r2,r5
    2ec8:	280ad07a 	srli	r5,r5,1
    2ecc:	183ffb1e 	bne	r3,zero,2ebc <__umodsi3+0x34>
    2ed0:	f800283a 	ret
    2ed4:	f800283a 	ret
    2ed8:	00c00044 	movi	r3,1
    2edc:	003ff706 	br	2ebc <__umodsi3+0x34>

00002ee0 <__mulsi3>:
    2ee0:	0005883a 	mov	r2,zero
    2ee4:	20000726 	beq	r4,zero,2f04 <__mulsi3+0x24>
    2ee8:	20c0004c 	andi	r3,r4,1
    2eec:	2008d07a 	srli	r4,r4,1
    2ef0:	18000126 	beq	r3,zero,2ef8 <__mulsi3+0x18>
    2ef4:	1145883a 	add	r2,r2,r5
    2ef8:	294b883a 	add	r5,r5,r5
    2efc:	203ffa1e 	bne	r4,zero,2ee8 <__mulsi3+0x8>
    2f00:	f800283a 	ret
    2f04:	f800283a 	ret

00002f08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2f08:	defffe04 	addi	sp,sp,-8
    2f0c:	dfc00115 	stw	ra,4(sp)
    2f10:	df000015 	stw	fp,0(sp)
    2f14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2f18:	d0a00917 	ldw	r2,-32732(gp)
    2f1c:	10000326 	beq	r2,zero,2f2c <alt_get_errno+0x24>
    2f20:	d0a00917 	ldw	r2,-32732(gp)
    2f24:	103ee83a 	callr	r2
    2f28:	00000106 	br	2f30 <alt_get_errno+0x28>
    2f2c:	d0a29904 	addi	r2,gp,-30108
}
    2f30:	e037883a 	mov	sp,fp
    2f34:	dfc00117 	ldw	ra,4(sp)
    2f38:	df000017 	ldw	fp,0(sp)
    2f3c:	dec00204 	addi	sp,sp,8
    2f40:	f800283a 	ret

00002f44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2f44:	defffb04 	addi	sp,sp,-20
    2f48:	dfc00415 	stw	ra,16(sp)
    2f4c:	df000315 	stw	fp,12(sp)
    2f50:	df000304 	addi	fp,sp,12
    2f54:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2f58:	e0bfff17 	ldw	r2,-4(fp)
    2f5c:	10000816 	blt	r2,zero,2f80 <close+0x3c>
    2f60:	01400304 	movi	r5,12
    2f64:	e13fff17 	ldw	r4,-4(fp)
    2f68:	0002ee00 	call	2ee0 <__mulsi3>
    2f6c:	1007883a 	mov	r3,r2
    2f70:	00800034 	movhi	r2,0
    2f74:	10945f04 	addi	r2,r2,20860
    2f78:	1885883a 	add	r2,r3,r2
    2f7c:	00000106 	br	2f84 <close+0x40>
    2f80:	0005883a 	mov	r2,zero
    2f84:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    2f88:	e0bffd17 	ldw	r2,-12(fp)
    2f8c:	10001926 	beq	r2,zero,2ff4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2f90:	e0bffd17 	ldw	r2,-12(fp)
    2f94:	10800017 	ldw	r2,0(r2)
    2f98:	10800417 	ldw	r2,16(r2)
    2f9c:	10000626 	beq	r2,zero,2fb8 <close+0x74>
    2fa0:	e0bffd17 	ldw	r2,-12(fp)
    2fa4:	10800017 	ldw	r2,0(r2)
    2fa8:	10800417 	ldw	r2,16(r2)
    2fac:	e13ffd17 	ldw	r4,-12(fp)
    2fb0:	103ee83a 	callr	r2
    2fb4:	00000106 	br	2fbc <close+0x78>
    2fb8:	0005883a 	mov	r2,zero
    2fbc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2fc0:	e13fff17 	ldw	r4,-4(fp)
    2fc4:	000362c0 	call	362c <alt_release_fd>
    if (rval < 0)
    2fc8:	e0bffe17 	ldw	r2,-8(fp)
    2fcc:	1000070e 	bge	r2,zero,2fec <close+0xa8>
    {
      ALT_ERRNO = -rval;
    2fd0:	0002f080 	call	2f08 <alt_get_errno>
    2fd4:	1007883a 	mov	r3,r2
    2fd8:	e0bffe17 	ldw	r2,-8(fp)
    2fdc:	0085c83a 	sub	r2,zero,r2
    2fe0:	18800015 	stw	r2,0(r3)
      return -1;
    2fe4:	00bfffc4 	movi	r2,-1
    2fe8:	00000706 	br	3008 <close+0xc4>
    }
    return 0;
    2fec:	0005883a 	mov	r2,zero
    2ff0:	00000506 	br	3008 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2ff4:	0002f080 	call	2f08 <alt_get_errno>
    2ff8:	1007883a 	mov	r3,r2
    2ffc:	00801444 	movi	r2,81
    3000:	18800015 	stw	r2,0(r3)
    return -1;
    3004:	00bfffc4 	movi	r2,-1
  }
}
    3008:	e037883a 	mov	sp,fp
    300c:	dfc00117 	ldw	ra,4(sp)
    3010:	df000017 	ldw	fp,0(sp)
    3014:	dec00204 	addi	sp,sp,8
    3018:	f800283a 	ret

0000301c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    301c:	defffc04 	addi	sp,sp,-16
    3020:	df000315 	stw	fp,12(sp)
    3024:	df000304 	addi	fp,sp,12
    3028:	e13ffd15 	stw	r4,-12(fp)
    302c:	e17ffe15 	stw	r5,-8(fp)
    3030:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3034:	e0bfff17 	ldw	r2,-4(fp)
}
    3038:	e037883a 	mov	sp,fp
    303c:	df000017 	ldw	fp,0(sp)
    3040:	dec00104 	addi	sp,sp,4
    3044:	f800283a 	ret

00003048 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3048:	defffe04 	addi	sp,sp,-8
    304c:	dfc00115 	stw	ra,4(sp)
    3050:	df000015 	stw	fp,0(sp)
    3054:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3058:	d0a00917 	ldw	r2,-32732(gp)
    305c:	10000326 	beq	r2,zero,306c <alt_get_errno+0x24>
    3060:	d0a00917 	ldw	r2,-32732(gp)
    3064:	103ee83a 	callr	r2
    3068:	00000106 	br	3070 <alt_get_errno+0x28>
    306c:	d0a29904 	addi	r2,gp,-30108
}
    3070:	e037883a 	mov	sp,fp
    3074:	dfc00117 	ldw	ra,4(sp)
    3078:	df000017 	ldw	fp,0(sp)
    307c:	dec00204 	addi	sp,sp,8
    3080:	f800283a 	ret

00003084 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3084:	defffb04 	addi	sp,sp,-20
    3088:	dfc00415 	stw	ra,16(sp)
    308c:	df000315 	stw	fp,12(sp)
    3090:	df000304 	addi	fp,sp,12
    3094:	e13ffe15 	stw	r4,-8(fp)
    3098:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    309c:	e0bffe17 	ldw	r2,-8(fp)
    30a0:	10000816 	blt	r2,zero,30c4 <fstat+0x40>
    30a4:	01400304 	movi	r5,12
    30a8:	e13ffe17 	ldw	r4,-8(fp)
    30ac:	0002ee00 	call	2ee0 <__mulsi3>
    30b0:	1007883a 	mov	r3,r2
    30b4:	00800034 	movhi	r2,0
    30b8:	10945f04 	addi	r2,r2,20860
    30bc:	1885883a 	add	r2,r3,r2
    30c0:	00000106 	br	30c8 <fstat+0x44>
    30c4:	0005883a 	mov	r2,zero
    30c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    30cc:	e0bffd17 	ldw	r2,-12(fp)
    30d0:	10001026 	beq	r2,zero,3114 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    30d4:	e0bffd17 	ldw	r2,-12(fp)
    30d8:	10800017 	ldw	r2,0(r2)
    30dc:	10800817 	ldw	r2,32(r2)
    30e0:	10000726 	beq	r2,zero,3100 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    30e4:	e0bffd17 	ldw	r2,-12(fp)
    30e8:	10800017 	ldw	r2,0(r2)
    30ec:	10800817 	ldw	r2,32(r2)
    30f0:	e17fff17 	ldw	r5,-4(fp)
    30f4:	e13ffd17 	ldw	r4,-12(fp)
    30f8:	103ee83a 	callr	r2
    30fc:	00000a06 	br	3128 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3100:	e0bfff17 	ldw	r2,-4(fp)
    3104:	00c80004 	movi	r3,8192
    3108:	10c00115 	stw	r3,4(r2)
      return 0;
    310c:	0005883a 	mov	r2,zero
    3110:	00000506 	br	3128 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3114:	00030480 	call	3048 <alt_get_errno>
    3118:	1007883a 	mov	r3,r2
    311c:	00801444 	movi	r2,81
    3120:	18800015 	stw	r2,0(r3)
    return -1;
    3124:	00bfffc4 	movi	r2,-1
  }
}
    3128:	e037883a 	mov	sp,fp
    312c:	dfc00117 	ldw	ra,4(sp)
    3130:	df000017 	ldw	fp,0(sp)
    3134:	dec00204 	addi	sp,sp,8
    3138:	f800283a 	ret

0000313c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    313c:	defffe04 	addi	sp,sp,-8
    3140:	dfc00115 	stw	ra,4(sp)
    3144:	df000015 	stw	fp,0(sp)
    3148:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    314c:	d0a00917 	ldw	r2,-32732(gp)
    3150:	10000326 	beq	r2,zero,3160 <alt_get_errno+0x24>
    3154:	d0a00917 	ldw	r2,-32732(gp)
    3158:	103ee83a 	callr	r2
    315c:	00000106 	br	3164 <alt_get_errno+0x28>
    3160:	d0a29904 	addi	r2,gp,-30108
}
    3164:	e037883a 	mov	sp,fp
    3168:	dfc00117 	ldw	ra,4(sp)
    316c:	df000017 	ldw	fp,0(sp)
    3170:	dec00204 	addi	sp,sp,8
    3174:	f800283a 	ret

00003178 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3178:	deffed04 	addi	sp,sp,-76
    317c:	dfc01215 	stw	ra,72(sp)
    3180:	df001115 	stw	fp,68(sp)
    3184:	df001104 	addi	fp,sp,68
    3188:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    318c:	e0bfff17 	ldw	r2,-4(fp)
    3190:	10000816 	blt	r2,zero,31b4 <isatty+0x3c>
    3194:	01400304 	movi	r5,12
    3198:	e13fff17 	ldw	r4,-4(fp)
    319c:	0002ee00 	call	2ee0 <__mulsi3>
    31a0:	1007883a 	mov	r3,r2
    31a4:	00800034 	movhi	r2,0
    31a8:	10945f04 	addi	r2,r2,20860
    31ac:	1885883a 	add	r2,r3,r2
    31b0:	00000106 	br	31b8 <isatty+0x40>
    31b4:	0005883a 	mov	r2,zero
    31b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    31bc:	e0bfef17 	ldw	r2,-68(fp)
    31c0:	10000e26 	beq	r2,zero,31fc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    31c4:	e0bfef17 	ldw	r2,-68(fp)
    31c8:	10800017 	ldw	r2,0(r2)
    31cc:	10800817 	ldw	r2,32(r2)
    31d0:	1000021e 	bne	r2,zero,31dc <isatty+0x64>
    {
      return 1;
    31d4:	00800044 	movi	r2,1
    31d8:	00000d06 	br	3210 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    31dc:	e0bff004 	addi	r2,fp,-64
    31e0:	100b883a 	mov	r5,r2
    31e4:	e13fff17 	ldw	r4,-4(fp)
    31e8:	00030840 	call	3084 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    31ec:	e0bff117 	ldw	r2,-60(fp)
    31f0:	10880020 	cmpeqi	r2,r2,8192
    31f4:	10803fcc 	andi	r2,r2,255
    31f8:	00000506 	br	3210 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    31fc:	000313c0 	call	313c <alt_get_errno>
    3200:	1007883a 	mov	r3,r2
    3204:	00801444 	movi	r2,81
    3208:	18800015 	stw	r2,0(r3)
    return 0;
    320c:	0005883a 	mov	r2,zero
  }
}
    3210:	e037883a 	mov	sp,fp
    3214:	dfc00117 	ldw	ra,4(sp)
    3218:	df000017 	ldw	fp,0(sp)
    321c:	dec00204 	addi	sp,sp,8
    3220:	f800283a 	ret

00003224 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3224:	defffc04 	addi	sp,sp,-16
    3228:	df000315 	stw	fp,12(sp)
    322c:	df000304 	addi	fp,sp,12
    3230:	e13ffd15 	stw	r4,-12(fp)
    3234:	e17ffe15 	stw	r5,-8(fp)
    3238:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    323c:	e0fffe17 	ldw	r3,-8(fp)
    3240:	e0bffd17 	ldw	r2,-12(fp)
    3244:	18800c26 	beq	r3,r2,3278 <alt_load_section+0x54>
  {
    while( to != end )
    3248:	00000806 	br	326c <alt_load_section+0x48>
    {
      *to++ = *from++;
    324c:	e0bffe17 	ldw	r2,-8(fp)
    3250:	10c00104 	addi	r3,r2,4
    3254:	e0fffe15 	stw	r3,-8(fp)
    3258:	e0fffd17 	ldw	r3,-12(fp)
    325c:	19000104 	addi	r4,r3,4
    3260:	e13ffd15 	stw	r4,-12(fp)
    3264:	18c00017 	ldw	r3,0(r3)
    3268:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    326c:	e0fffe17 	ldw	r3,-8(fp)
    3270:	e0bfff17 	ldw	r2,-4(fp)
    3274:	18bff51e 	bne	r3,r2,324c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3278:	0001883a 	nop
    327c:	e037883a 	mov	sp,fp
    3280:	df000017 	ldw	fp,0(sp)
    3284:	dec00104 	addi	sp,sp,4
    3288:	f800283a 	ret

0000328c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    328c:	defffe04 	addi	sp,sp,-8
    3290:	dfc00115 	stw	ra,4(sp)
    3294:	df000015 	stw	fp,0(sp)
    3298:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    329c:	01800034 	movhi	r6,0
    32a0:	3194d504 	addi	r6,r6,21332
    32a4:	01400034 	movhi	r5,0
    32a8:	29524a04 	addi	r5,r5,18728
    32ac:	01000034 	movhi	r4,0
    32b0:	2114d504 	addi	r4,r4,21332
    32b4:	00032240 	call	3224 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    32b8:	01800034 	movhi	r6,0
    32bc:	31800804 	addi	r6,r6,32
    32c0:	01400034 	movhi	r5,0
    32c4:	29400804 	addi	r5,r5,32
    32c8:	01000034 	movhi	r4,0
    32cc:	21000804 	addi	r4,r4,32
    32d0:	00032240 	call	3224 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    32d4:	01800034 	movhi	r6,0
    32d8:	31924a04 	addi	r6,r6,18728
    32dc:	01400034 	movhi	r5,0
    32e0:	29523704 	addi	r5,r5,18652
    32e4:	01000034 	movhi	r4,0
    32e8:	21123704 	addi	r4,r4,18652
    32ec:	00032240 	call	3224 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    32f0:	0003d040 	call	3d04 <alt_dcache_flush_all>
  alt_icache_flush_all();
    32f4:	0003ec40 	call	3ec4 <alt_icache_flush_all>
}
    32f8:	0001883a 	nop
    32fc:	e037883a 	mov	sp,fp
    3300:	dfc00117 	ldw	ra,4(sp)
    3304:	df000017 	ldw	fp,0(sp)
    3308:	dec00204 	addi	sp,sp,8
    330c:	f800283a 	ret

00003310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3310:	defffe04 	addi	sp,sp,-8
    3314:	dfc00115 	stw	ra,4(sp)
    3318:	df000015 	stw	fp,0(sp)
    331c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3320:	d0a00917 	ldw	r2,-32732(gp)
    3324:	10000326 	beq	r2,zero,3334 <alt_get_errno+0x24>
    3328:	d0a00917 	ldw	r2,-32732(gp)
    332c:	103ee83a 	callr	r2
    3330:	00000106 	br	3338 <alt_get_errno+0x28>
    3334:	d0a29904 	addi	r2,gp,-30108
}
    3338:	e037883a 	mov	sp,fp
    333c:	dfc00117 	ldw	ra,4(sp)
    3340:	df000017 	ldw	fp,0(sp)
    3344:	dec00204 	addi	sp,sp,8
    3348:	f800283a 	ret

0000334c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    334c:	defff904 	addi	sp,sp,-28
    3350:	dfc00615 	stw	ra,24(sp)
    3354:	df000515 	stw	fp,20(sp)
    3358:	df000504 	addi	fp,sp,20
    335c:	e13ffd15 	stw	r4,-12(fp)
    3360:	e17ffe15 	stw	r5,-8(fp)
    3364:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3368:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    336c:	e0bffd17 	ldw	r2,-12(fp)
    3370:	10000816 	blt	r2,zero,3394 <lseek+0x48>
    3374:	01400304 	movi	r5,12
    3378:	e13ffd17 	ldw	r4,-12(fp)
    337c:	0002ee00 	call	2ee0 <__mulsi3>
    3380:	1007883a 	mov	r3,r2
    3384:	00800034 	movhi	r2,0
    3388:	10945f04 	addi	r2,r2,20860
    338c:	1885883a 	add	r2,r3,r2
    3390:	00000106 	br	3398 <lseek+0x4c>
    3394:	0005883a 	mov	r2,zero
    3398:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    339c:	e0bffc17 	ldw	r2,-16(fp)
    33a0:	10001026 	beq	r2,zero,33e4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    33a4:	e0bffc17 	ldw	r2,-16(fp)
    33a8:	10800017 	ldw	r2,0(r2)
    33ac:	10800717 	ldw	r2,28(r2)
    33b0:	10000926 	beq	r2,zero,33d8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    33b4:	e0bffc17 	ldw	r2,-16(fp)
    33b8:	10800017 	ldw	r2,0(r2)
    33bc:	10800717 	ldw	r2,28(r2)
    33c0:	e1bfff17 	ldw	r6,-4(fp)
    33c4:	e17ffe17 	ldw	r5,-8(fp)
    33c8:	e13ffc17 	ldw	r4,-16(fp)
    33cc:	103ee83a 	callr	r2
    33d0:	e0bffb15 	stw	r2,-20(fp)
    33d4:	00000506 	br	33ec <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    33d8:	00bfde84 	movi	r2,-134
    33dc:	e0bffb15 	stw	r2,-20(fp)
    33e0:	00000206 	br	33ec <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    33e4:	00bfebc4 	movi	r2,-81
    33e8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    33ec:	e0bffb17 	ldw	r2,-20(fp)
    33f0:	1000070e 	bge	r2,zero,3410 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    33f4:	00033100 	call	3310 <alt_get_errno>
    33f8:	1007883a 	mov	r3,r2
    33fc:	e0bffb17 	ldw	r2,-20(fp)
    3400:	0085c83a 	sub	r2,zero,r2
    3404:	18800015 	stw	r2,0(r3)
    rc = -1;
    3408:	00bfffc4 	movi	r2,-1
    340c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3410:	e0bffb17 	ldw	r2,-20(fp)
}
    3414:	e037883a 	mov	sp,fp
    3418:	dfc00117 	ldw	ra,4(sp)
    341c:	df000017 	ldw	fp,0(sp)
    3420:	dec00204 	addi	sp,sp,8
    3424:	f800283a 	ret

00003428 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3428:	defffd04 	addi	sp,sp,-12
    342c:	dfc00215 	stw	ra,8(sp)
    3430:	df000115 	stw	fp,4(sp)
    3434:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3438:	0009883a 	mov	r4,zero
    343c:	00039000 	call	3900 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3440:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3444:	00039380 	call	3938 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3448:	01800034 	movhi	r6,0
    344c:	31924004 	addi	r6,r6,18688
    3450:	01400034 	movhi	r5,0
    3454:	29524004 	addi	r5,r5,18688
    3458:	01000034 	movhi	r4,0
    345c:	21124004 	addi	r4,r4,18688
    3460:	0003fc80 	call	3fc8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3464:	0003e040 	call	3e04 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3468:	01000034 	movhi	r4,0
    346c:	210f9904 	addi	r4,r4,15972
    3470:	00045480 	call	4548 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3474:	d0a29a17 	ldw	r2,-30104(gp)
    3478:	d0e29b17 	ldw	r3,-30100(gp)
    347c:	d1229c17 	ldw	r4,-30096(gp)
    3480:	200d883a 	mov	r6,r4
    3484:	180b883a 	mov	r5,r3
    3488:	1009883a 	mov	r4,r2
    348c:	00000a00 	call	a0 <main>
    3490:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3494:	01000044 	movi	r4,1
    3498:	0002f440 	call	2f44 <close>
  exit (result);
    349c:	e13fff17 	ldw	r4,-4(fp)
    34a0:	000455c0 	call	455c <exit>

000034a4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    34a4:	defffe04 	addi	sp,sp,-8
    34a8:	df000115 	stw	fp,4(sp)
    34ac:	df000104 	addi	fp,sp,4
    34b0:	e13fff15 	stw	r4,-4(fp)
}
    34b4:	0001883a 	nop
    34b8:	e037883a 	mov	sp,fp
    34bc:	df000017 	ldw	fp,0(sp)
    34c0:	dec00104 	addi	sp,sp,4
    34c4:	f800283a 	ret

000034c8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    34c8:	defffe04 	addi	sp,sp,-8
    34cc:	df000115 	stw	fp,4(sp)
    34d0:	df000104 	addi	fp,sp,4
    34d4:	e13fff15 	stw	r4,-4(fp)
}
    34d8:	0001883a 	nop
    34dc:	e037883a 	mov	sp,fp
    34e0:	df000017 	ldw	fp,0(sp)
    34e4:	dec00104 	addi	sp,sp,4
    34e8:	f800283a 	ret

000034ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    34ec:	defffe04 	addi	sp,sp,-8
    34f0:	dfc00115 	stw	ra,4(sp)
    34f4:	df000015 	stw	fp,0(sp)
    34f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    34fc:	d0a00917 	ldw	r2,-32732(gp)
    3500:	10000326 	beq	r2,zero,3510 <alt_get_errno+0x24>
    3504:	d0a00917 	ldw	r2,-32732(gp)
    3508:	103ee83a 	callr	r2
    350c:	00000106 	br	3514 <alt_get_errno+0x28>
    3510:	d0a29904 	addi	r2,gp,-30108
}
    3514:	e037883a 	mov	sp,fp
    3518:	dfc00117 	ldw	ra,4(sp)
    351c:	df000017 	ldw	fp,0(sp)
    3520:	dec00204 	addi	sp,sp,8
    3524:	f800283a 	ret

00003528 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3528:	defff904 	addi	sp,sp,-28
    352c:	dfc00615 	stw	ra,24(sp)
    3530:	df000515 	stw	fp,20(sp)
    3534:	df000504 	addi	fp,sp,20
    3538:	e13ffd15 	stw	r4,-12(fp)
    353c:	e17ffe15 	stw	r5,-8(fp)
    3540:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3544:	e0bffd17 	ldw	r2,-12(fp)
    3548:	10000816 	blt	r2,zero,356c <read+0x44>
    354c:	01400304 	movi	r5,12
    3550:	e13ffd17 	ldw	r4,-12(fp)
    3554:	0002ee00 	call	2ee0 <__mulsi3>
    3558:	1007883a 	mov	r3,r2
    355c:	00800034 	movhi	r2,0
    3560:	10945f04 	addi	r2,r2,20860
    3564:	1885883a 	add	r2,r3,r2
    3568:	00000106 	br	3570 <read+0x48>
    356c:	0005883a 	mov	r2,zero
    3570:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3574:	e0bffb17 	ldw	r2,-20(fp)
    3578:	10002226 	beq	r2,zero,3604 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    357c:	e0bffb17 	ldw	r2,-20(fp)
    3580:	10800217 	ldw	r2,8(r2)
    3584:	108000cc 	andi	r2,r2,3
    3588:	10800060 	cmpeqi	r2,r2,1
    358c:	1000181e 	bne	r2,zero,35f0 <read+0xc8>
        (fd->dev->read))
    3590:	e0bffb17 	ldw	r2,-20(fp)
    3594:	10800017 	ldw	r2,0(r2)
    3598:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    359c:	10001426 	beq	r2,zero,35f0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    35a0:	e0bffb17 	ldw	r2,-20(fp)
    35a4:	10800017 	ldw	r2,0(r2)
    35a8:	10800517 	ldw	r2,20(r2)
    35ac:	e0ffff17 	ldw	r3,-4(fp)
    35b0:	180d883a 	mov	r6,r3
    35b4:	e17ffe17 	ldw	r5,-8(fp)
    35b8:	e13ffb17 	ldw	r4,-20(fp)
    35bc:	103ee83a 	callr	r2
    35c0:	e0bffc15 	stw	r2,-16(fp)
    35c4:	e0bffc17 	ldw	r2,-16(fp)
    35c8:	1000070e 	bge	r2,zero,35e8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    35cc:	00034ec0 	call	34ec <alt_get_errno>
    35d0:	1007883a 	mov	r3,r2
    35d4:	e0bffc17 	ldw	r2,-16(fp)
    35d8:	0085c83a 	sub	r2,zero,r2
    35dc:	18800015 	stw	r2,0(r3)
          return -1;
    35e0:	00bfffc4 	movi	r2,-1
    35e4:	00000c06 	br	3618 <read+0xf0>
        }
        return rval;
    35e8:	e0bffc17 	ldw	r2,-16(fp)
    35ec:	00000a06 	br	3618 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    35f0:	00034ec0 	call	34ec <alt_get_errno>
    35f4:	1007883a 	mov	r3,r2
    35f8:	00800344 	movi	r2,13
    35fc:	18800015 	stw	r2,0(r3)
    3600:	00000406 	br	3614 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3604:	00034ec0 	call	34ec <alt_get_errno>
    3608:	1007883a 	mov	r3,r2
    360c:	00801444 	movi	r2,81
    3610:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3614:	00bfffc4 	movi	r2,-1
}
    3618:	e037883a 	mov	sp,fp
    361c:	dfc00117 	ldw	ra,4(sp)
    3620:	df000017 	ldw	fp,0(sp)
    3624:	dec00204 	addi	sp,sp,8
    3628:	f800283a 	ret

0000362c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    362c:	defffc04 	addi	sp,sp,-16
    3630:	dfc00315 	stw	ra,12(sp)
    3634:	df000215 	stw	fp,8(sp)
    3638:	dc000115 	stw	r16,4(sp)
    363c:	df000204 	addi	fp,sp,8
    3640:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    3644:	e0bffe17 	ldw	r2,-8(fp)
    3648:	108000d0 	cmplti	r2,r2,3
    364c:	1000111e 	bne	r2,zero,3694 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    3650:	04000034 	movhi	r16,0
    3654:	84145f04 	addi	r16,r16,20860
    3658:	e0bffe17 	ldw	r2,-8(fp)
    365c:	01400304 	movi	r5,12
    3660:	1009883a 	mov	r4,r2
    3664:	0002ee00 	call	2ee0 <__mulsi3>
    3668:	8085883a 	add	r2,r16,r2
    366c:	10800204 	addi	r2,r2,8
    3670:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3674:	04000034 	movhi	r16,0
    3678:	84145f04 	addi	r16,r16,20860
    367c:	e0bffe17 	ldw	r2,-8(fp)
    3680:	01400304 	movi	r5,12
    3684:	1009883a 	mov	r4,r2
    3688:	0002ee00 	call	2ee0 <__mulsi3>
    368c:	8085883a 	add	r2,r16,r2
    3690:	10000015 	stw	zero,0(r2)
  }
}
    3694:	0001883a 	nop
    3698:	e6ffff04 	addi	sp,fp,-4
    369c:	dfc00217 	ldw	ra,8(sp)
    36a0:	df000117 	ldw	fp,4(sp)
    36a4:	dc000017 	ldw	r16,0(sp)
    36a8:	dec00304 	addi	sp,sp,12
    36ac:	f800283a 	ret

000036b0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    36b0:	defff904 	addi	sp,sp,-28
    36b4:	df000615 	stw	fp,24(sp)
    36b8:	df000604 	addi	fp,sp,24
    36bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    36c0:	0005303a 	rdctl	r2,status
    36c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    36c8:	e0fffe17 	ldw	r3,-8(fp)
    36cc:	00bfff84 	movi	r2,-2
    36d0:	1884703a 	and	r2,r3,r2
    36d4:	1001703a 	wrctl	status,r2
  
  return context;
    36d8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    36dc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    36e0:	d0a00a17 	ldw	r2,-32728(gp)
    36e4:	10c000c4 	addi	r3,r2,3
    36e8:	00bfff04 	movi	r2,-4
    36ec:	1884703a 	and	r2,r3,r2
    36f0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    36f4:	d0e00a17 	ldw	r3,-32728(gp)
    36f8:	e0bfff17 	ldw	r2,-4(fp)
    36fc:	1887883a 	add	r3,r3,r2
    3700:	00800074 	movhi	r2,1
    3704:	10a00004 	addi	r2,r2,-32768
    3708:	10c0062e 	bgeu	r2,r3,3724 <sbrk+0x74>
    370c:	e0bffb17 	ldw	r2,-20(fp)
    3710:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3714:	e0bffa17 	ldw	r2,-24(fp)
    3718:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    371c:	00bfffc4 	movi	r2,-1
    3720:	00000b06 	br	3750 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3724:	d0a00a17 	ldw	r2,-32728(gp)
    3728:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    372c:	d0e00a17 	ldw	r3,-32728(gp)
    3730:	e0bfff17 	ldw	r2,-4(fp)
    3734:	1885883a 	add	r2,r3,r2
    3738:	d0a00a15 	stw	r2,-32728(gp)
    373c:	e0bffb17 	ldw	r2,-20(fp)
    3740:	e0bffc15 	stw	r2,-16(fp)
    3744:	e0bffc17 	ldw	r2,-16(fp)
    3748:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    374c:	e0bffd17 	ldw	r2,-12(fp)
} 
    3750:	e037883a 	mov	sp,fp
    3754:	df000017 	ldw	fp,0(sp)
    3758:	dec00104 	addi	sp,sp,4
    375c:	f800283a 	ret

00003760 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    3760:	defffd04 	addi	sp,sp,-12
    3764:	dfc00215 	stw	ra,8(sp)
    3768:	df000115 	stw	fp,4(sp)
    376c:	df000104 	addi	fp,sp,4
    3770:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    3774:	e13fff17 	ldw	r4,-4(fp)
    3778:	0003bac0 	call	3bac <alt_busy_sleep>
}
    377c:	e037883a 	mov	sp,fp
    3780:	dfc00117 	ldw	ra,4(sp)
    3784:	df000017 	ldw	fp,0(sp)
    3788:	dec00204 	addi	sp,sp,8
    378c:	f800283a 	ret

00003790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3790:	defffe04 	addi	sp,sp,-8
    3794:	dfc00115 	stw	ra,4(sp)
    3798:	df000015 	stw	fp,0(sp)
    379c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    37a0:	d0a00917 	ldw	r2,-32732(gp)
    37a4:	10000326 	beq	r2,zero,37b4 <alt_get_errno+0x24>
    37a8:	d0a00917 	ldw	r2,-32732(gp)
    37ac:	103ee83a 	callr	r2
    37b0:	00000106 	br	37b8 <alt_get_errno+0x28>
    37b4:	d0a29904 	addi	r2,gp,-30108
}
    37b8:	e037883a 	mov	sp,fp
    37bc:	dfc00117 	ldw	ra,4(sp)
    37c0:	df000017 	ldw	fp,0(sp)
    37c4:	dec00204 	addi	sp,sp,8
    37c8:	f800283a 	ret

000037cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    37cc:	defff904 	addi	sp,sp,-28
    37d0:	dfc00615 	stw	ra,24(sp)
    37d4:	df000515 	stw	fp,20(sp)
    37d8:	df000504 	addi	fp,sp,20
    37dc:	e13ffd15 	stw	r4,-12(fp)
    37e0:	e17ffe15 	stw	r5,-8(fp)
    37e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    37e8:	e0bffd17 	ldw	r2,-12(fp)
    37ec:	10000816 	blt	r2,zero,3810 <write+0x44>
    37f0:	01400304 	movi	r5,12
    37f4:	e13ffd17 	ldw	r4,-12(fp)
    37f8:	0002ee00 	call	2ee0 <__mulsi3>
    37fc:	1007883a 	mov	r3,r2
    3800:	00800034 	movhi	r2,0
    3804:	10945f04 	addi	r2,r2,20860
    3808:	1885883a 	add	r2,r3,r2
    380c:	00000106 	br	3814 <write+0x48>
    3810:	0005883a 	mov	r2,zero
    3814:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3818:	e0bffb17 	ldw	r2,-20(fp)
    381c:	10002126 	beq	r2,zero,38a4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3820:	e0bffb17 	ldw	r2,-20(fp)
    3824:	10800217 	ldw	r2,8(r2)
    3828:	108000cc 	andi	r2,r2,3
    382c:	10001826 	beq	r2,zero,3890 <write+0xc4>
    3830:	e0bffb17 	ldw	r2,-20(fp)
    3834:	10800017 	ldw	r2,0(r2)
    3838:	10800617 	ldw	r2,24(r2)
    383c:	10001426 	beq	r2,zero,3890 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3840:	e0bffb17 	ldw	r2,-20(fp)
    3844:	10800017 	ldw	r2,0(r2)
    3848:	10800617 	ldw	r2,24(r2)
    384c:	e0ffff17 	ldw	r3,-4(fp)
    3850:	180d883a 	mov	r6,r3
    3854:	e17ffe17 	ldw	r5,-8(fp)
    3858:	e13ffb17 	ldw	r4,-20(fp)
    385c:	103ee83a 	callr	r2
    3860:	e0bffc15 	stw	r2,-16(fp)
    3864:	e0bffc17 	ldw	r2,-16(fp)
    3868:	1000070e 	bge	r2,zero,3888 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    386c:	00037900 	call	3790 <alt_get_errno>
    3870:	1007883a 	mov	r3,r2
    3874:	e0bffc17 	ldw	r2,-16(fp)
    3878:	0085c83a 	sub	r2,zero,r2
    387c:	18800015 	stw	r2,0(r3)
        return -1;
    3880:	00bfffc4 	movi	r2,-1
    3884:	00000c06 	br	38b8 <write+0xec>
      }
      return rval;
    3888:	e0bffc17 	ldw	r2,-16(fp)
    388c:	00000a06 	br	38b8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3890:	00037900 	call	3790 <alt_get_errno>
    3894:	1007883a 	mov	r3,r2
    3898:	00800344 	movi	r2,13
    389c:	18800015 	stw	r2,0(r3)
    38a0:	00000406 	br	38b4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    38a4:	00037900 	call	3790 <alt_get_errno>
    38a8:	1007883a 	mov	r3,r2
    38ac:	00801444 	movi	r2,81
    38b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    38b4:	00bfffc4 	movi	r2,-1
}
    38b8:	e037883a 	mov	sp,fp
    38bc:	dfc00117 	ldw	ra,4(sp)
    38c0:	df000017 	ldw	fp,0(sp)
    38c4:	dec00204 	addi	sp,sp,8
    38c8:	f800283a 	ret

000038cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    38cc:	defffd04 	addi	sp,sp,-12
    38d0:	dfc00215 	stw	ra,8(sp)
    38d4:	df000115 	stw	fp,4(sp)
    38d8:	df000104 	addi	fp,sp,4
    38dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    38e0:	d1600604 	addi	r5,gp,-32744
    38e4:	e13fff17 	ldw	r4,-4(fp)
    38e8:	0003d600 	call	3d60 <alt_dev_llist_insert>
}
    38ec:	e037883a 	mov	sp,fp
    38f0:	dfc00117 	ldw	ra,4(sp)
    38f4:	df000017 	ldw	fp,0(sp)
    38f8:	dec00204 	addi	sp,sp,8
    38fc:	f800283a 	ret

00003900 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3900:	defffd04 	addi	sp,sp,-12
    3904:	dfc00215 	stw	ra,8(sp)
    3908:	df000115 	stw	fp,4(sp)
    390c:	df000104 	addi	fp,sp,4
    3910:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    3914:	00042c80 	call	42c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3918:	00800044 	movi	r2,1
    391c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3920:	0001883a 	nop
    3924:	e037883a 	mov	sp,fp
    3928:	dfc00117 	ldw	ra,4(sp)
    392c:	df000017 	ldw	fp,0(sp)
    3930:	dec00204 	addi	sp,sp,8
    3934:	f800283a 	ret

00003938 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3938:	defffe04 	addi	sp,sp,-8
    393c:	dfc00115 	stw	ra,4(sp)
    3940:	df000015 	stw	fp,0(sp)
    3944:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    3948:	01000034 	movhi	r4,0
    394c:	2114bf04 	addi	r4,r4,21244
    3950:	00038cc0 	call	38cc <alt_dev_reg>
}
    3954:	0001883a 	nop
    3958:	e037883a 	mov	sp,fp
    395c:	dfc00117 	ldw	ra,4(sp)
    3960:	df000017 	ldw	fp,0(sp)
    3964:	dec00204 	addi	sp,sp,8
    3968:	f800283a 	ret

0000396c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    396c:	defffa04 	addi	sp,sp,-24
    3970:	dfc00515 	stw	ra,20(sp)
    3974:	df000415 	stw	fp,16(sp)
    3978:	df000404 	addi	fp,sp,16
    397c:	e13ffd15 	stw	r4,-12(fp)
    3980:	e17ffe15 	stw	r5,-8(fp)
    3984:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3988:	e0bffd17 	ldw	r2,-12(fp)
    398c:	10800017 	ldw	r2,0(r2)
    3990:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3994:	e0bffc17 	ldw	r2,-16(fp)
    3998:	10c00a04 	addi	r3,r2,40
    399c:	e0bffd17 	ldw	r2,-12(fp)
    39a0:	10800217 	ldw	r2,8(r2)
    39a4:	100f883a 	mov	r7,r2
    39a8:	e1bfff17 	ldw	r6,-4(fp)
    39ac:	e17ffe17 	ldw	r5,-8(fp)
    39b0:	1809883a 	mov	r4,r3
    39b4:	0003a2c0 	call	3a2c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    39b8:	e037883a 	mov	sp,fp
    39bc:	dfc00117 	ldw	ra,4(sp)
    39c0:	df000017 	ldw	fp,0(sp)
    39c4:	dec00204 	addi	sp,sp,8
    39c8:	f800283a 	ret

000039cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    39cc:	defffa04 	addi	sp,sp,-24
    39d0:	dfc00515 	stw	ra,20(sp)
    39d4:	df000415 	stw	fp,16(sp)
    39d8:	df000404 	addi	fp,sp,16
    39dc:	e13ffd15 	stw	r4,-12(fp)
    39e0:	e17ffe15 	stw	r5,-8(fp)
    39e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    39e8:	e0bffd17 	ldw	r2,-12(fp)
    39ec:	10800017 	ldw	r2,0(r2)
    39f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    39f4:	e0bffc17 	ldw	r2,-16(fp)
    39f8:	10c00a04 	addi	r3,r2,40
    39fc:	e0bffd17 	ldw	r2,-12(fp)
    3a00:	10800217 	ldw	r2,8(r2)
    3a04:	100f883a 	mov	r7,r2
    3a08:	e1bfff17 	ldw	r6,-4(fp)
    3a0c:	e17ffe17 	ldw	r5,-8(fp)
    3a10:	1809883a 	mov	r4,r3
    3a14:	0003b180 	call	3b18 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3a18:	e037883a 	mov	sp,fp
    3a1c:	dfc00117 	ldw	ra,4(sp)
    3a20:	df000017 	ldw	fp,0(sp)
    3a24:	dec00204 	addi	sp,sp,8
    3a28:	f800283a 	ret

00003a2c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    3a2c:	defff704 	addi	sp,sp,-36
    3a30:	df000815 	stw	fp,32(sp)
    3a34:	df000804 	addi	fp,sp,32
    3a38:	e13ffc15 	stw	r4,-16(fp)
    3a3c:	e17ffd15 	stw	r5,-12(fp)
    3a40:	e1bffe15 	stw	r6,-8(fp)
    3a44:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    3a48:	e0bffc17 	ldw	r2,-16(fp)
    3a4c:	10800017 	ldw	r2,0(r2)
    3a50:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    3a54:	e0bffd17 	ldw	r2,-12(fp)
    3a58:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    3a5c:	e0bffe17 	ldw	r2,-8(fp)
    3a60:	e0fffd17 	ldw	r3,-12(fp)
    3a64:	1885883a 	add	r2,r3,r2
    3a68:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    3a6c:	00001206 	br	3ab8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3a70:	e0bff917 	ldw	r2,-28(fp)
    3a74:	10800037 	ldwio	r2,0(r2)
    3a78:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    3a7c:	e0bffb17 	ldw	r2,-20(fp)
    3a80:	10a0000c 	andi	r2,r2,32768
    3a84:	10000626 	beq	r2,zero,3aa0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3a88:	e0bff817 	ldw	r2,-32(fp)
    3a8c:	10c00044 	addi	r3,r2,1
    3a90:	e0fff815 	stw	r3,-32(fp)
    3a94:	e0fffb17 	ldw	r3,-20(fp)
    3a98:	10c00005 	stb	r3,0(r2)
    3a9c:	00000606 	br	3ab8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    3aa0:	e0fff817 	ldw	r3,-32(fp)
    3aa4:	e0bffd17 	ldw	r2,-12(fp)
    3aa8:	1880071e 	bne	r3,r2,3ac8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    3aac:	e0bfff17 	ldw	r2,-4(fp)
    3ab0:	1090000c 	andi	r2,r2,16384
    3ab4:	1000061e 	bne	r2,zero,3ad0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    3ab8:	e0fff817 	ldw	r3,-32(fp)
    3abc:	e0bffa17 	ldw	r2,-24(fp)
    3ac0:	18bfeb36 	bltu	r3,r2,3a70 <altera_avalon_jtag_uart_read+0x44>
    3ac4:	00000306 	br	3ad4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    3ac8:	0001883a 	nop
    3acc:	00000106 	br	3ad4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    3ad0:	0001883a 	nop
    
  }

  if (ptr != buffer)
    3ad4:	e0fff817 	ldw	r3,-32(fp)
    3ad8:	e0bffd17 	ldw	r2,-12(fp)
    3adc:	18800426 	beq	r3,r2,3af0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    3ae0:	e0fff817 	ldw	r3,-32(fp)
    3ae4:	e0bffd17 	ldw	r2,-12(fp)
    3ae8:	1885c83a 	sub	r2,r3,r2
    3aec:	00000606 	br	3b08 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    3af0:	e0bfff17 	ldw	r2,-4(fp)
    3af4:	1090000c 	andi	r2,r2,16384
    3af8:	10000226 	beq	r2,zero,3b04 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    3afc:	00bffd44 	movi	r2,-11
    3b00:	00000106 	br	3b08 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    3b04:	00bffec4 	movi	r2,-5
}
    3b08:	e037883a 	mov	sp,fp
    3b0c:	df000017 	ldw	fp,0(sp)
    3b10:	dec00104 	addi	sp,sp,4
    3b14:	f800283a 	ret

00003b18 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    3b18:	defff904 	addi	sp,sp,-28
    3b1c:	df000615 	stw	fp,24(sp)
    3b20:	df000604 	addi	fp,sp,24
    3b24:	e13ffc15 	stw	r4,-16(fp)
    3b28:	e17ffd15 	stw	r5,-12(fp)
    3b2c:	e1bffe15 	stw	r6,-8(fp)
    3b30:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    3b34:	e0bffc17 	ldw	r2,-16(fp)
    3b38:	10800017 	ldw	r2,0(r2)
    3b3c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    3b40:	e0bffe17 	ldw	r2,-8(fp)
    3b44:	e0fffd17 	ldw	r3,-12(fp)
    3b48:	1885883a 	add	r2,r3,r2
    3b4c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    3b50:	00000e06 	br	3b8c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    3b54:	e0bffa17 	ldw	r2,-24(fp)
    3b58:	10800104 	addi	r2,r2,4
    3b5c:	10800037 	ldwio	r2,0(r2)
    3b60:	10bfffec 	andhi	r2,r2,65535
    3b64:	10000926 	beq	r2,zero,3b8c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    3b68:	e0fffa17 	ldw	r3,-24(fp)
    3b6c:	e0bffd17 	ldw	r2,-12(fp)
    3b70:	11000044 	addi	r4,r2,1
    3b74:	e13ffd15 	stw	r4,-12(fp)
    3b78:	10800003 	ldbu	r2,0(r2)
    3b7c:	10803fcc 	andi	r2,r2,255
    3b80:	1080201c 	xori	r2,r2,128
    3b84:	10bfe004 	addi	r2,r2,-128
    3b88:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    3b8c:	e0fffd17 	ldw	r3,-12(fp)
    3b90:	e0bffb17 	ldw	r2,-20(fp)
    3b94:	18bfef36 	bltu	r3,r2,3b54 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    3b98:	e0bffe17 	ldw	r2,-8(fp)
}
    3b9c:	e037883a 	mov	sp,fp
    3ba0:	df000017 	ldw	fp,0(sp)
    3ba4:	dec00104 	addi	sp,sp,4
    3ba8:	f800283a 	ret

00003bac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    3bac:	defffa04 	addi	sp,sp,-24
    3bb0:	dfc00515 	stw	ra,20(sp)
    3bb4:	df000415 	stw	fp,16(sp)
    3bb8:	df000404 	addi	fp,sp,16
    3bbc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    3bc0:	00800244 	movi	r2,9
    3bc4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    3bc8:	014003f4 	movhi	r5,15
    3bcc:	29509004 	addi	r5,r5,16960
    3bd0:	e13ffd17 	ldw	r4,-12(fp)
    3bd4:	0002ee00 	call	2ee0 <__mulsi3>
    3bd8:	100b883a 	mov	r5,r2
    3bdc:	0100bef4 	movhi	r4,763
    3be0:	213c2004 	addi	r4,r4,-3968
    3be4:	0002e240 	call	2e24 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    3be8:	100b883a 	mov	r5,r2
    3bec:	01200034 	movhi	r4,32768
    3bf0:	213fffc4 	addi	r4,r4,-1
    3bf4:	0002e240 	call	2e24 <__udivsi3>
    3bf8:	100b883a 	mov	r5,r2
    3bfc:	e13fff17 	ldw	r4,-4(fp)
    3c00:	0002e240 	call	2e24 <__udivsi3>
    3c04:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    3c08:	e0bffe17 	ldw	r2,-8(fp)
    3c0c:	10002a26 	beq	r2,zero,3cb8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    3c10:	e03ffc15 	stw	zero,-16(fp)
    3c14:	00001706 	br	3c74 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    3c18:	00a00034 	movhi	r2,32768
    3c1c:	10bfffc4 	addi	r2,r2,-1
    3c20:	10bfffc4 	addi	r2,r2,-1
    3c24:	103ffe1e 	bne	r2,zero,3c20 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    3c28:	014003f4 	movhi	r5,15
    3c2c:	29509004 	addi	r5,r5,16960
    3c30:	e13ffd17 	ldw	r4,-12(fp)
    3c34:	0002ee00 	call	2ee0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    3c38:	100b883a 	mov	r5,r2
    3c3c:	0100bef4 	movhi	r4,763
    3c40:	213c2004 	addi	r4,r4,-3968
    3c44:	0002e240 	call	2e24 <__udivsi3>
    3c48:	100b883a 	mov	r5,r2
    3c4c:	01200034 	movhi	r4,32768
    3c50:	213fffc4 	addi	r4,r4,-1
    3c54:	0002e240 	call	2e24 <__udivsi3>
    3c58:	1007883a 	mov	r3,r2
    3c5c:	e0bfff17 	ldw	r2,-4(fp)
    3c60:	10c5c83a 	sub	r2,r2,r3
    3c64:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    3c68:	e0bffc17 	ldw	r2,-16(fp)
    3c6c:	10800044 	addi	r2,r2,1
    3c70:	e0bffc15 	stw	r2,-16(fp)
    3c74:	e0fffc17 	ldw	r3,-16(fp)
    3c78:	e0bffe17 	ldw	r2,-8(fp)
    3c7c:	18bfe616 	blt	r3,r2,3c18 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    3c80:	014003f4 	movhi	r5,15
    3c84:	29509004 	addi	r5,r5,16960
    3c88:	e13ffd17 	ldw	r4,-12(fp)
    3c8c:	0002ee00 	call	2ee0 <__mulsi3>
    3c90:	100b883a 	mov	r5,r2
    3c94:	0100bef4 	movhi	r4,763
    3c98:	213c2004 	addi	r4,r4,-3968
    3c9c:	0002e240 	call	2e24 <__udivsi3>
    3ca0:	e17fff17 	ldw	r5,-4(fp)
    3ca4:	1009883a 	mov	r4,r2
    3ca8:	0002ee00 	call	2ee0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    3cac:	10bfffc4 	addi	r2,r2,-1
    3cb0:	103ffe1e 	bne	r2,zero,3cac <alt_busy_sleep+0x100>
    3cb4:	00000d06 	br	3cec <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    3cb8:	014003f4 	movhi	r5,15
    3cbc:	29509004 	addi	r5,r5,16960
    3cc0:	e13ffd17 	ldw	r4,-12(fp)
    3cc4:	0002ee00 	call	2ee0 <__mulsi3>
    3cc8:	100b883a 	mov	r5,r2
    3ccc:	0100bef4 	movhi	r4,763
    3cd0:	213c2004 	addi	r4,r4,-3968
    3cd4:	0002e240 	call	2e24 <__udivsi3>
    3cd8:	e17fff17 	ldw	r5,-4(fp)
    3cdc:	1009883a 	mov	r4,r2
    3ce0:	0002ee00 	call	2ee0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    3ce4:	10bfffc4 	addi	r2,r2,-1
    3ce8:	00bffe16 	blt	zero,r2,3ce4 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    3cec:	0005883a 	mov	r2,zero
}
    3cf0:	e037883a 	mov	sp,fp
    3cf4:	dfc00117 	ldw	ra,4(sp)
    3cf8:	df000017 	ldw	fp,0(sp)
    3cfc:	dec00204 	addi	sp,sp,8
    3d00:	f800283a 	ret

00003d04 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    3d04:	deffff04 	addi	sp,sp,-4
    3d08:	df000015 	stw	fp,0(sp)
    3d0c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    3d10:	0001883a 	nop
    3d14:	e037883a 	mov	sp,fp
    3d18:	df000017 	ldw	fp,0(sp)
    3d1c:	dec00104 	addi	sp,sp,4
    3d20:	f800283a 	ret

00003d24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3d24:	defffe04 	addi	sp,sp,-8
    3d28:	dfc00115 	stw	ra,4(sp)
    3d2c:	df000015 	stw	fp,0(sp)
    3d30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3d34:	d0a00917 	ldw	r2,-32732(gp)
    3d38:	10000326 	beq	r2,zero,3d48 <alt_get_errno+0x24>
    3d3c:	d0a00917 	ldw	r2,-32732(gp)
    3d40:	103ee83a 	callr	r2
    3d44:	00000106 	br	3d4c <alt_get_errno+0x28>
    3d48:	d0a29904 	addi	r2,gp,-30108
}
    3d4c:	e037883a 	mov	sp,fp
    3d50:	dfc00117 	ldw	ra,4(sp)
    3d54:	df000017 	ldw	fp,0(sp)
    3d58:	dec00204 	addi	sp,sp,8
    3d5c:	f800283a 	ret

00003d60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    3d60:	defffa04 	addi	sp,sp,-24
    3d64:	dfc00515 	stw	ra,20(sp)
    3d68:	df000415 	stw	fp,16(sp)
    3d6c:	df000404 	addi	fp,sp,16
    3d70:	e13ffe15 	stw	r4,-8(fp)
    3d74:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    3d78:	e0bffe17 	ldw	r2,-8(fp)
    3d7c:	10000326 	beq	r2,zero,3d8c <alt_dev_llist_insert+0x2c>
    3d80:	e0bffe17 	ldw	r2,-8(fp)
    3d84:	10800217 	ldw	r2,8(r2)
    3d88:	1000061e 	bne	r2,zero,3da4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    3d8c:	0003d240 	call	3d24 <alt_get_errno>
    3d90:	1007883a 	mov	r3,r2
    3d94:	00800584 	movi	r2,22
    3d98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    3d9c:	00bffa84 	movi	r2,-22
    3da0:	00001306 	br	3df0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    3da4:	e0bffe17 	ldw	r2,-8(fp)
    3da8:	e0ffff17 	ldw	r3,-4(fp)
    3dac:	e0fffc15 	stw	r3,-16(fp)
    3db0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    3db4:	e0bffd17 	ldw	r2,-12(fp)
    3db8:	e0fffc17 	ldw	r3,-16(fp)
    3dbc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    3dc0:	e0bffc17 	ldw	r2,-16(fp)
    3dc4:	10c00017 	ldw	r3,0(r2)
    3dc8:	e0bffd17 	ldw	r2,-12(fp)
    3dcc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3dd0:	e0bffc17 	ldw	r2,-16(fp)
    3dd4:	10800017 	ldw	r2,0(r2)
    3dd8:	e0fffd17 	ldw	r3,-12(fp)
    3ddc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    3de0:	e0bffc17 	ldw	r2,-16(fp)
    3de4:	e0fffd17 	ldw	r3,-12(fp)
    3de8:	10c00015 	stw	r3,0(r2)

  return 0;  
    3dec:	0005883a 	mov	r2,zero
}
    3df0:	e037883a 	mov	sp,fp
    3df4:	dfc00117 	ldw	ra,4(sp)
    3df8:	df000017 	ldw	fp,0(sp)
    3dfc:	dec00204 	addi	sp,sp,8
    3e00:	f800283a 	ret

00003e04 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    3e04:	defffd04 	addi	sp,sp,-12
    3e08:	dfc00215 	stw	ra,8(sp)
    3e0c:	df000115 	stw	fp,4(sp)
    3e10:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3e14:	00800034 	movhi	r2,0
    3e18:	10923604 	addi	r2,r2,18648
    3e1c:	e0bfff15 	stw	r2,-4(fp)
    3e20:	00000606 	br	3e3c <_do_ctors+0x38>
        (*ctor) (); 
    3e24:	e0bfff17 	ldw	r2,-4(fp)
    3e28:	10800017 	ldw	r2,0(r2)
    3e2c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3e30:	e0bfff17 	ldw	r2,-4(fp)
    3e34:	10bfff04 	addi	r2,r2,-4
    3e38:	e0bfff15 	stw	r2,-4(fp)
    3e3c:	e0ffff17 	ldw	r3,-4(fp)
    3e40:	00800034 	movhi	r2,0
    3e44:	10923704 	addi	r2,r2,18652
    3e48:	18bff62e 	bgeu	r3,r2,3e24 <_do_ctors+0x20>
        (*ctor) (); 
}
    3e4c:	0001883a 	nop
    3e50:	e037883a 	mov	sp,fp
    3e54:	dfc00117 	ldw	ra,4(sp)
    3e58:	df000017 	ldw	fp,0(sp)
    3e5c:	dec00204 	addi	sp,sp,8
    3e60:	f800283a 	ret

00003e64 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    3e64:	defffd04 	addi	sp,sp,-12
    3e68:	dfc00215 	stw	ra,8(sp)
    3e6c:	df000115 	stw	fp,4(sp)
    3e70:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3e74:	00800034 	movhi	r2,0
    3e78:	10923604 	addi	r2,r2,18648
    3e7c:	e0bfff15 	stw	r2,-4(fp)
    3e80:	00000606 	br	3e9c <_do_dtors+0x38>
        (*dtor) (); 
    3e84:	e0bfff17 	ldw	r2,-4(fp)
    3e88:	10800017 	ldw	r2,0(r2)
    3e8c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3e90:	e0bfff17 	ldw	r2,-4(fp)
    3e94:	10bfff04 	addi	r2,r2,-4
    3e98:	e0bfff15 	stw	r2,-4(fp)
    3e9c:	e0ffff17 	ldw	r3,-4(fp)
    3ea0:	00800034 	movhi	r2,0
    3ea4:	10923704 	addi	r2,r2,18652
    3ea8:	18bff62e 	bgeu	r3,r2,3e84 <_do_dtors+0x20>
        (*dtor) (); 
}
    3eac:	0001883a 	nop
    3eb0:	e037883a 	mov	sp,fp
    3eb4:	dfc00117 	ldw	ra,4(sp)
    3eb8:	df000017 	ldw	fp,0(sp)
    3ebc:	dec00204 	addi	sp,sp,8
    3ec0:	f800283a 	ret

00003ec4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    3ec4:	deffff04 	addi	sp,sp,-4
    3ec8:	df000015 	stw	fp,0(sp)
    3ecc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    3ed0:	0001883a 	nop
    3ed4:	e037883a 	mov	sp,fp
    3ed8:	df000017 	ldw	fp,0(sp)
    3edc:	dec00104 	addi	sp,sp,4
    3ee0:	f800283a 	ret

00003ee4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    3ee4:	defff804 	addi	sp,sp,-32
    3ee8:	dfc00715 	stw	ra,28(sp)
    3eec:	df000615 	stw	fp,24(sp)
    3ef0:	dc000515 	stw	r16,20(sp)
    3ef4:	df000604 	addi	fp,sp,24
    3ef8:	e13ffb15 	stw	r4,-20(fp)
    3efc:	e17ffc15 	stw	r5,-16(fp)
    3f00:	e1bffd15 	stw	r6,-12(fp)
    3f04:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    3f08:	e1bffe17 	ldw	r6,-8(fp)
    3f0c:	e17ffd17 	ldw	r5,-12(fp)
    3f10:	e13ffc17 	ldw	r4,-16(fp)
    3f14:	000416c0 	call	416c <open>
    3f18:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    3f1c:	e0bffa17 	ldw	r2,-24(fp)
    3f20:	10002216 	blt	r2,zero,3fac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    3f24:	04000034 	movhi	r16,0
    3f28:	84145f04 	addi	r16,r16,20860
    3f2c:	e0bffa17 	ldw	r2,-24(fp)
    3f30:	01400304 	movi	r5,12
    3f34:	1009883a 	mov	r4,r2
    3f38:	0002ee00 	call	2ee0 <__mulsi3>
    3f3c:	8085883a 	add	r2,r16,r2
    3f40:	10c00017 	ldw	r3,0(r2)
    3f44:	e0bffb17 	ldw	r2,-20(fp)
    3f48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    3f4c:	04000034 	movhi	r16,0
    3f50:	84145f04 	addi	r16,r16,20860
    3f54:	e0bffa17 	ldw	r2,-24(fp)
    3f58:	01400304 	movi	r5,12
    3f5c:	1009883a 	mov	r4,r2
    3f60:	0002ee00 	call	2ee0 <__mulsi3>
    3f64:	8085883a 	add	r2,r16,r2
    3f68:	10800104 	addi	r2,r2,4
    3f6c:	10c00017 	ldw	r3,0(r2)
    3f70:	e0bffb17 	ldw	r2,-20(fp)
    3f74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    3f78:	04000034 	movhi	r16,0
    3f7c:	84145f04 	addi	r16,r16,20860
    3f80:	e0bffa17 	ldw	r2,-24(fp)
    3f84:	01400304 	movi	r5,12
    3f88:	1009883a 	mov	r4,r2
    3f8c:	0002ee00 	call	2ee0 <__mulsi3>
    3f90:	8085883a 	add	r2,r16,r2
    3f94:	10800204 	addi	r2,r2,8
    3f98:	10c00017 	ldw	r3,0(r2)
    3f9c:	e0bffb17 	ldw	r2,-20(fp)
    3fa0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    3fa4:	e13ffa17 	ldw	r4,-24(fp)
    3fa8:	000362c0 	call	362c <alt_release_fd>
  }
} 
    3fac:	0001883a 	nop
    3fb0:	e6ffff04 	addi	sp,fp,-4
    3fb4:	dfc00217 	ldw	ra,8(sp)
    3fb8:	df000117 	ldw	fp,4(sp)
    3fbc:	dc000017 	ldw	r16,0(sp)
    3fc0:	dec00304 	addi	sp,sp,12
    3fc4:	f800283a 	ret

00003fc8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    3fc8:	defffb04 	addi	sp,sp,-20
    3fcc:	dfc00415 	stw	ra,16(sp)
    3fd0:	df000315 	stw	fp,12(sp)
    3fd4:	df000304 	addi	fp,sp,12
    3fd8:	e13ffd15 	stw	r4,-12(fp)
    3fdc:	e17ffe15 	stw	r5,-8(fp)
    3fe0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    3fe4:	01c07fc4 	movi	r7,511
    3fe8:	01800044 	movi	r6,1
    3fec:	e17ffd17 	ldw	r5,-12(fp)
    3ff0:	01000034 	movhi	r4,0
    3ff4:	21146204 	addi	r4,r4,20872
    3ff8:	0003ee40 	call	3ee4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    3ffc:	01c07fc4 	movi	r7,511
    4000:	000d883a 	mov	r6,zero
    4004:	e17ffe17 	ldw	r5,-8(fp)
    4008:	01000034 	movhi	r4,0
    400c:	21145f04 	addi	r4,r4,20860
    4010:	0003ee40 	call	3ee4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4014:	01c07fc4 	movi	r7,511
    4018:	01800044 	movi	r6,1
    401c:	e17fff17 	ldw	r5,-4(fp)
    4020:	01000034 	movhi	r4,0
    4024:	21146504 	addi	r4,r4,20884
    4028:	0003ee40 	call	3ee4 <alt_open_fd>
}  
    402c:	0001883a 	nop
    4030:	e037883a 	mov	sp,fp
    4034:	dfc00117 	ldw	ra,4(sp)
    4038:	df000017 	ldw	fp,0(sp)
    403c:	dec00204 	addi	sp,sp,8
    4040:	f800283a 	ret

00004044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4044:	defffe04 	addi	sp,sp,-8
    4048:	dfc00115 	stw	ra,4(sp)
    404c:	df000015 	stw	fp,0(sp)
    4050:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4054:	d0a00917 	ldw	r2,-32732(gp)
    4058:	10000326 	beq	r2,zero,4068 <alt_get_errno+0x24>
    405c:	d0a00917 	ldw	r2,-32732(gp)
    4060:	103ee83a 	callr	r2
    4064:	00000106 	br	406c <alt_get_errno+0x28>
    4068:	d0a29904 	addi	r2,gp,-30108
}
    406c:	e037883a 	mov	sp,fp
    4070:	dfc00117 	ldw	ra,4(sp)
    4074:	df000017 	ldw	fp,0(sp)
    4078:	dec00204 	addi	sp,sp,8
    407c:	f800283a 	ret

00004080 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4080:	defffb04 	addi	sp,sp,-20
    4084:	dfc00415 	stw	ra,16(sp)
    4088:	df000315 	stw	fp,12(sp)
    408c:	dc000215 	stw	r16,8(sp)
    4090:	df000304 	addi	fp,sp,12
    4094:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4098:	e0bffe17 	ldw	r2,-8(fp)
    409c:	10800217 	ldw	r2,8(r2)
    40a0:	10d00034 	orhi	r3,r2,16384
    40a4:	e0bffe17 	ldw	r2,-8(fp)
    40a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    40ac:	e03ffd15 	stw	zero,-12(fp)
    40b0:	00002306 	br	4140 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    40b4:	04000034 	movhi	r16,0
    40b8:	84145f04 	addi	r16,r16,20860
    40bc:	e0bffd17 	ldw	r2,-12(fp)
    40c0:	01400304 	movi	r5,12
    40c4:	1009883a 	mov	r4,r2
    40c8:	0002ee00 	call	2ee0 <__mulsi3>
    40cc:	8085883a 	add	r2,r16,r2
    40d0:	10c00017 	ldw	r3,0(r2)
    40d4:	e0bffe17 	ldw	r2,-8(fp)
    40d8:	10800017 	ldw	r2,0(r2)
    40dc:	1880151e 	bne	r3,r2,4134 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    40e0:	04000034 	movhi	r16,0
    40e4:	84145f04 	addi	r16,r16,20860
    40e8:	e0bffd17 	ldw	r2,-12(fp)
    40ec:	01400304 	movi	r5,12
    40f0:	1009883a 	mov	r4,r2
    40f4:	0002ee00 	call	2ee0 <__mulsi3>
    40f8:	8085883a 	add	r2,r16,r2
    40fc:	10800204 	addi	r2,r2,8
    4100:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4104:	10000b0e 	bge	r2,zero,4134 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    4108:	01400304 	movi	r5,12
    410c:	e13ffd17 	ldw	r4,-12(fp)
    4110:	0002ee00 	call	2ee0 <__mulsi3>
    4114:	1007883a 	mov	r3,r2
    4118:	00800034 	movhi	r2,0
    411c:	10945f04 	addi	r2,r2,20860
    4120:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4124:	e0bffe17 	ldw	r2,-8(fp)
    4128:	18800226 	beq	r3,r2,4134 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    412c:	00bffcc4 	movi	r2,-13
    4130:	00000806 	br	4154 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4134:	e0bffd17 	ldw	r2,-12(fp)
    4138:	10800044 	addi	r2,r2,1
    413c:	e0bffd15 	stw	r2,-12(fp)
    4140:	d0a00817 	ldw	r2,-32736(gp)
    4144:	1007883a 	mov	r3,r2
    4148:	e0bffd17 	ldw	r2,-12(fp)
    414c:	18bfd92e 	bgeu	r3,r2,40b4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4150:	0005883a 	mov	r2,zero
}
    4154:	e6ffff04 	addi	sp,fp,-4
    4158:	dfc00217 	ldw	ra,8(sp)
    415c:	df000117 	ldw	fp,4(sp)
    4160:	dc000017 	ldw	r16,0(sp)
    4164:	dec00304 	addi	sp,sp,12
    4168:	f800283a 	ret

0000416c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    416c:	defff604 	addi	sp,sp,-40
    4170:	dfc00915 	stw	ra,36(sp)
    4174:	df000815 	stw	fp,32(sp)
    4178:	df000804 	addi	fp,sp,32
    417c:	e13ffd15 	stw	r4,-12(fp)
    4180:	e17ffe15 	stw	r5,-8(fp)
    4184:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4188:	00bfffc4 	movi	r2,-1
    418c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4190:	00bffb44 	movi	r2,-19
    4194:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    4198:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    419c:	d1600604 	addi	r5,gp,-32744
    41a0:	e13ffd17 	ldw	r4,-12(fp)
    41a4:	00042ec0 	call	42ec <alt_find_dev>
    41a8:	e0bff815 	stw	r2,-32(fp)
    41ac:	e0bff817 	ldw	r2,-32(fp)
    41b0:	1000051e 	bne	r2,zero,41c8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    41b4:	e13ffd17 	ldw	r4,-12(fp)
    41b8:	000437c0 	call	437c <alt_find_file>
    41bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    41c0:	00800044 	movi	r2,1
    41c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    41c8:	e0bff817 	ldw	r2,-32(fp)
    41cc:	10002b26 	beq	r2,zero,427c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    41d0:	e13ff817 	ldw	r4,-32(fp)
    41d4:	00044840 	call	4484 <alt_get_fd>
    41d8:	e0bff915 	stw	r2,-28(fp)
    41dc:	e0bff917 	ldw	r2,-28(fp)
    41e0:	1000030e 	bge	r2,zero,41f0 <open+0x84>
    {
      status = index;
    41e4:	e0bff917 	ldw	r2,-28(fp)
    41e8:	e0bffa15 	stw	r2,-24(fp)
    41ec:	00002506 	br	4284 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    41f0:	01400304 	movi	r5,12
    41f4:	e13ff917 	ldw	r4,-28(fp)
    41f8:	0002ee00 	call	2ee0 <__mulsi3>
    41fc:	1007883a 	mov	r3,r2
    4200:	00800034 	movhi	r2,0
    4204:	10945f04 	addi	r2,r2,20860
    4208:	1885883a 	add	r2,r3,r2
    420c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4210:	e0fffe17 	ldw	r3,-8(fp)
    4214:	00900034 	movhi	r2,16384
    4218:	10bfffc4 	addi	r2,r2,-1
    421c:	1886703a 	and	r3,r3,r2
    4220:	e0bffc17 	ldw	r2,-16(fp)
    4224:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4228:	e0bffb17 	ldw	r2,-20(fp)
    422c:	1000051e 	bne	r2,zero,4244 <open+0xd8>
    4230:	e13ffc17 	ldw	r4,-16(fp)
    4234:	00040800 	call	4080 <alt_file_locked>
    4238:	e0bffa15 	stw	r2,-24(fp)
    423c:	e0bffa17 	ldw	r2,-24(fp)
    4240:	10001016 	blt	r2,zero,4284 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4244:	e0bff817 	ldw	r2,-32(fp)
    4248:	10800317 	ldw	r2,12(r2)
    424c:	10000826 	beq	r2,zero,4270 <open+0x104>
    4250:	e0bff817 	ldw	r2,-32(fp)
    4254:	10800317 	ldw	r2,12(r2)
    4258:	e1ffff17 	ldw	r7,-4(fp)
    425c:	e1bffe17 	ldw	r6,-8(fp)
    4260:	e17ffd17 	ldw	r5,-12(fp)
    4264:	e13ffc17 	ldw	r4,-16(fp)
    4268:	103ee83a 	callr	r2
    426c:	00000106 	br	4274 <open+0x108>
    4270:	0005883a 	mov	r2,zero
    4274:	e0bffa15 	stw	r2,-24(fp)
    4278:	00000206 	br	4284 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    427c:	00bffb44 	movi	r2,-19
    4280:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4284:	e0bffa17 	ldw	r2,-24(fp)
    4288:	1000090e 	bge	r2,zero,42b0 <open+0x144>
  {
    alt_release_fd (index);  
    428c:	e13ff917 	ldw	r4,-28(fp)
    4290:	000362c0 	call	362c <alt_release_fd>
    ALT_ERRNO = -status;
    4294:	00040440 	call	4044 <alt_get_errno>
    4298:	1007883a 	mov	r3,r2
    429c:	e0bffa17 	ldw	r2,-24(fp)
    42a0:	0085c83a 	sub	r2,zero,r2
    42a4:	18800015 	stw	r2,0(r3)
    return -1;
    42a8:	00bfffc4 	movi	r2,-1
    42ac:	00000106 	br	42b4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    42b0:	e0bff917 	ldw	r2,-28(fp)
}
    42b4:	e037883a 	mov	sp,fp
    42b8:	dfc00117 	ldw	ra,4(sp)
    42bc:	df000017 	ldw	fp,0(sp)
    42c0:	dec00204 	addi	sp,sp,8
    42c4:	f800283a 	ret

000042c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    42c8:	deffff04 	addi	sp,sp,-4
    42cc:	df000015 	stw	fp,0(sp)
    42d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    42d4:	000170fa 	wrctl	ienable,zero
}
    42d8:	0001883a 	nop
    42dc:	e037883a 	mov	sp,fp
    42e0:	df000017 	ldw	fp,0(sp)
    42e4:	dec00104 	addi	sp,sp,4
    42e8:	f800283a 	ret

000042ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    42ec:	defffa04 	addi	sp,sp,-24
    42f0:	dfc00515 	stw	ra,20(sp)
    42f4:	df000415 	stw	fp,16(sp)
    42f8:	df000404 	addi	fp,sp,16
    42fc:	e13ffe15 	stw	r4,-8(fp)
    4300:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    4304:	e0bfff17 	ldw	r2,-4(fp)
    4308:	10800017 	ldw	r2,0(r2)
    430c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4310:	e13ffe17 	ldw	r4,-8(fp)
    4314:	00001d00 	call	1d0 <strlen>
    4318:	10800044 	addi	r2,r2,1
    431c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4320:	00000d06 	br	4358 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4324:	e0bffc17 	ldw	r2,-16(fp)
    4328:	10800217 	ldw	r2,8(r2)
    432c:	e0fffd17 	ldw	r3,-12(fp)
    4330:	180d883a 	mov	r6,r3
    4334:	e17ffe17 	ldw	r5,-8(fp)
    4338:	1009883a 	mov	r4,r2
    433c:	00045940 	call	4594 <memcmp>
    4340:	1000021e 	bne	r2,zero,434c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    4344:	e0bffc17 	ldw	r2,-16(fp)
    4348:	00000706 	br	4368 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    434c:	e0bffc17 	ldw	r2,-16(fp)
    4350:	10800017 	ldw	r2,0(r2)
    4354:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4358:	e0fffc17 	ldw	r3,-16(fp)
    435c:	e0bfff17 	ldw	r2,-4(fp)
    4360:	18bff01e 	bne	r3,r2,4324 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    4364:	0005883a 	mov	r2,zero
}
    4368:	e037883a 	mov	sp,fp
    436c:	dfc00117 	ldw	ra,4(sp)
    4370:	df000017 	ldw	fp,0(sp)
    4374:	dec00204 	addi	sp,sp,8
    4378:	f800283a 	ret

0000437c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    437c:	defffb04 	addi	sp,sp,-20
    4380:	dfc00415 	stw	ra,16(sp)
    4384:	df000315 	stw	fp,12(sp)
    4388:	df000304 	addi	fp,sp,12
    438c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4390:	d0a00417 	ldw	r2,-32752(gp)
    4394:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4398:	00003106 	br	4460 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    439c:	e0bffd17 	ldw	r2,-12(fp)
    43a0:	10800217 	ldw	r2,8(r2)
    43a4:	1009883a 	mov	r4,r2
    43a8:	00001d00 	call	1d0 <strlen>
    43ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    43b0:	e0bffd17 	ldw	r2,-12(fp)
    43b4:	10c00217 	ldw	r3,8(r2)
    43b8:	e0bffe17 	ldw	r2,-8(fp)
    43bc:	10bfffc4 	addi	r2,r2,-1
    43c0:	1885883a 	add	r2,r3,r2
    43c4:	10800003 	ldbu	r2,0(r2)
    43c8:	10803fcc 	andi	r2,r2,255
    43cc:	1080201c 	xori	r2,r2,128
    43d0:	10bfe004 	addi	r2,r2,-128
    43d4:	10800bd8 	cmpnei	r2,r2,47
    43d8:	1000031e 	bne	r2,zero,43e8 <alt_find_file+0x6c>
    {
      len -= 1;
    43dc:	e0bffe17 	ldw	r2,-8(fp)
    43e0:	10bfffc4 	addi	r2,r2,-1
    43e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    43e8:	e0bffe17 	ldw	r2,-8(fp)
    43ec:	e0ffff17 	ldw	r3,-4(fp)
    43f0:	1885883a 	add	r2,r3,r2
    43f4:	10800003 	ldbu	r2,0(r2)
    43f8:	10803fcc 	andi	r2,r2,255
    43fc:	1080201c 	xori	r2,r2,128
    4400:	10bfe004 	addi	r2,r2,-128
    4404:	10800be0 	cmpeqi	r2,r2,47
    4408:	1000081e 	bne	r2,zero,442c <alt_find_file+0xb0>
    440c:	e0bffe17 	ldw	r2,-8(fp)
    4410:	e0ffff17 	ldw	r3,-4(fp)
    4414:	1885883a 	add	r2,r3,r2
    4418:	10800003 	ldbu	r2,0(r2)
    441c:	10803fcc 	andi	r2,r2,255
    4420:	1080201c 	xori	r2,r2,128
    4424:	10bfe004 	addi	r2,r2,-128
    4428:	10000a1e 	bne	r2,zero,4454 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    442c:	e0bffd17 	ldw	r2,-12(fp)
    4430:	10800217 	ldw	r2,8(r2)
    4434:	e0fffe17 	ldw	r3,-8(fp)
    4438:	180d883a 	mov	r6,r3
    443c:	e17fff17 	ldw	r5,-4(fp)
    4440:	1009883a 	mov	r4,r2
    4444:	00045940 	call	4594 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4448:	1000021e 	bne	r2,zero,4454 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    444c:	e0bffd17 	ldw	r2,-12(fp)
    4450:	00000706 	br	4470 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    4454:	e0bffd17 	ldw	r2,-12(fp)
    4458:	10800017 	ldw	r2,0(r2)
    445c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4460:	e0fffd17 	ldw	r3,-12(fp)
    4464:	d0a00404 	addi	r2,gp,-32752
    4468:	18bfcc1e 	bne	r3,r2,439c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    446c:	0005883a 	mov	r2,zero
}
    4470:	e037883a 	mov	sp,fp
    4474:	dfc00117 	ldw	ra,4(sp)
    4478:	df000017 	ldw	fp,0(sp)
    447c:	dec00204 	addi	sp,sp,8
    4480:	f800283a 	ret

00004484 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    4484:	defffa04 	addi	sp,sp,-24
    4488:	dfc00515 	stw	ra,20(sp)
    448c:	df000415 	stw	fp,16(sp)
    4490:	dc000315 	stw	r16,12(sp)
    4494:	df000404 	addi	fp,sp,16
    4498:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    449c:	00bffa04 	movi	r2,-24
    44a0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    44a4:	e03ffc15 	stw	zero,-16(fp)
    44a8:	00001d06 	br	4520 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    44ac:	04000034 	movhi	r16,0
    44b0:	84145f04 	addi	r16,r16,20860
    44b4:	e0bffc17 	ldw	r2,-16(fp)
    44b8:	01400304 	movi	r5,12
    44bc:	1009883a 	mov	r4,r2
    44c0:	0002ee00 	call	2ee0 <__mulsi3>
    44c4:	8085883a 	add	r2,r16,r2
    44c8:	10800017 	ldw	r2,0(r2)
    44cc:	1000111e 	bne	r2,zero,4514 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    44d0:	04000034 	movhi	r16,0
    44d4:	84145f04 	addi	r16,r16,20860
    44d8:	e0bffc17 	ldw	r2,-16(fp)
    44dc:	01400304 	movi	r5,12
    44e0:	1009883a 	mov	r4,r2
    44e4:	0002ee00 	call	2ee0 <__mulsi3>
    44e8:	8085883a 	add	r2,r16,r2
    44ec:	e0fffe17 	ldw	r3,-8(fp)
    44f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    44f4:	d0e00817 	ldw	r3,-32736(gp)
    44f8:	e0bffc17 	ldw	r2,-16(fp)
    44fc:	1880020e 	bge	r3,r2,4508 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    4500:	e0bffc17 	ldw	r2,-16(fp)
    4504:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    4508:	e0bffc17 	ldw	r2,-16(fp)
    450c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    4510:	00000606 	br	452c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4514:	e0bffc17 	ldw	r2,-16(fp)
    4518:	10800044 	addi	r2,r2,1
    451c:	e0bffc15 	stw	r2,-16(fp)
    4520:	e0bffc17 	ldw	r2,-16(fp)
    4524:	10800810 	cmplti	r2,r2,32
    4528:	103fe01e 	bne	r2,zero,44ac <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    452c:	e0bffd17 	ldw	r2,-12(fp)
}
    4530:	e6ffff04 	addi	sp,fp,-4
    4534:	dfc00217 	ldw	ra,8(sp)
    4538:	df000117 	ldw	fp,4(sp)
    453c:	dc000017 	ldw	r16,0(sp)
    4540:	dec00304 	addi	sp,sp,12
    4544:	f800283a 	ret

00004548 <atexit>:
    4548:	200b883a 	mov	r5,r4
    454c:	000f883a 	mov	r7,zero
    4550:	000d883a 	mov	r6,zero
    4554:	0009883a 	mov	r4,zero
    4558:	00046101 	jmpi	4610 <__register_exitproc>

0000455c <exit>:
    455c:	defffe04 	addi	sp,sp,-8
    4560:	000b883a 	mov	r5,zero
    4564:	dc000015 	stw	r16,0(sp)
    4568:	dfc00115 	stw	ra,4(sp)
    456c:	2021883a 	mov	r16,r4
    4570:	00047280 	call	4728 <__call_exitprocs>
    4574:	00800034 	movhi	r2,0
    4578:	1094ca04 	addi	r2,r2,21288
    457c:	11000017 	ldw	r4,0(r2)
    4580:	20800f17 	ldw	r2,60(r4)
    4584:	10000126 	beq	r2,zero,458c <exit+0x30>
    4588:	103ee83a 	callr	r2
    458c:	8009883a 	mov	r4,r16
    4590:	00048a80 	call	48a8 <_exit>

00004594 <memcmp>:
    4594:	01c000c4 	movi	r7,3
    4598:	3980192e 	bgeu	r7,r6,4600 <memcmp+0x6c>
    459c:	2144b03a 	or	r2,r4,r5
    45a0:	11c4703a 	and	r2,r2,r7
    45a4:	10000f26 	beq	r2,zero,45e4 <memcmp+0x50>
    45a8:	20800003 	ldbu	r2,0(r4)
    45ac:	28c00003 	ldbu	r3,0(r5)
    45b0:	10c0151e 	bne	r2,r3,4608 <memcmp+0x74>
    45b4:	31bfff84 	addi	r6,r6,-2
    45b8:	01ffffc4 	movi	r7,-1
    45bc:	00000406 	br	45d0 <memcmp+0x3c>
    45c0:	20800003 	ldbu	r2,0(r4)
    45c4:	28c00003 	ldbu	r3,0(r5)
    45c8:	31bfffc4 	addi	r6,r6,-1
    45cc:	10c00e1e 	bne	r2,r3,4608 <memcmp+0x74>
    45d0:	21000044 	addi	r4,r4,1
    45d4:	29400044 	addi	r5,r5,1
    45d8:	31fff91e 	bne	r6,r7,45c0 <memcmp+0x2c>
    45dc:	0005883a 	mov	r2,zero
    45e0:	f800283a 	ret
    45e4:	20c00017 	ldw	r3,0(r4)
    45e8:	28800017 	ldw	r2,0(r5)
    45ec:	18bfee1e 	bne	r3,r2,45a8 <memcmp+0x14>
    45f0:	31bfff04 	addi	r6,r6,-4
    45f4:	21000104 	addi	r4,r4,4
    45f8:	29400104 	addi	r5,r5,4
    45fc:	39bff936 	bltu	r7,r6,45e4 <memcmp+0x50>
    4600:	303fe91e 	bne	r6,zero,45a8 <memcmp+0x14>
    4604:	003ff506 	br	45dc <memcmp+0x48>
    4608:	10c5c83a 	sub	r2,r2,r3
    460c:	f800283a 	ret

00004610 <__register_exitproc>:
    4610:	defffa04 	addi	sp,sp,-24
    4614:	dc000315 	stw	r16,12(sp)
    4618:	04000034 	movhi	r16,0
    461c:	8414ca04 	addi	r16,r16,21288
    4620:	80c00017 	ldw	r3,0(r16)
    4624:	dc400415 	stw	r17,16(sp)
    4628:	dfc00515 	stw	ra,20(sp)
    462c:	18805217 	ldw	r2,328(r3)
    4630:	2023883a 	mov	r17,r4
    4634:	10003726 	beq	r2,zero,4714 <__register_exitproc+0x104>
    4638:	10c00117 	ldw	r3,4(r2)
    463c:	010007c4 	movi	r4,31
    4640:	20c00e16 	blt	r4,r3,467c <__register_exitproc+0x6c>
    4644:	1a000044 	addi	r8,r3,1
    4648:	8800221e 	bne	r17,zero,46d4 <__register_exitproc+0xc4>
    464c:	18c00084 	addi	r3,r3,2
    4650:	18c7883a 	add	r3,r3,r3
    4654:	18c7883a 	add	r3,r3,r3
    4658:	12000115 	stw	r8,4(r2)
    465c:	10c7883a 	add	r3,r2,r3
    4660:	19400015 	stw	r5,0(r3)
    4664:	0005883a 	mov	r2,zero
    4668:	dfc00517 	ldw	ra,20(sp)
    466c:	dc400417 	ldw	r17,16(sp)
    4670:	dc000317 	ldw	r16,12(sp)
    4674:	dec00604 	addi	sp,sp,24
    4678:	f800283a 	ret
    467c:	00800034 	movhi	r2,0
    4680:	10800004 	addi	r2,r2,0
    4684:	10002626 	beq	r2,zero,4720 <__register_exitproc+0x110>
    4688:	01006404 	movi	r4,400
    468c:	d9400015 	stw	r5,0(sp)
    4690:	d9800115 	stw	r6,4(sp)
    4694:	d9c00215 	stw	r7,8(sp)
    4698:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    469c:	d9400017 	ldw	r5,0(sp)
    46a0:	d9800117 	ldw	r6,4(sp)
    46a4:	d9c00217 	ldw	r7,8(sp)
    46a8:	10001d26 	beq	r2,zero,4720 <__register_exitproc+0x110>
    46ac:	81000017 	ldw	r4,0(r16)
    46b0:	10000115 	stw	zero,4(r2)
    46b4:	02000044 	movi	r8,1
    46b8:	22405217 	ldw	r9,328(r4)
    46bc:	0007883a 	mov	r3,zero
    46c0:	12400015 	stw	r9,0(r2)
    46c4:	20805215 	stw	r2,328(r4)
    46c8:	10006215 	stw	zero,392(r2)
    46cc:	10006315 	stw	zero,396(r2)
    46d0:	883fde26 	beq	r17,zero,464c <__register_exitproc+0x3c>
    46d4:	18c9883a 	add	r4,r3,r3
    46d8:	2109883a 	add	r4,r4,r4
    46dc:	1109883a 	add	r4,r2,r4
    46e0:	21802215 	stw	r6,136(r4)
    46e4:	01800044 	movi	r6,1
    46e8:	12406217 	ldw	r9,392(r2)
    46ec:	30cc983a 	sll	r6,r6,r3
    46f0:	4992b03a 	or	r9,r9,r6
    46f4:	12406215 	stw	r9,392(r2)
    46f8:	21c04215 	stw	r7,264(r4)
    46fc:	01000084 	movi	r4,2
    4700:	893fd21e 	bne	r17,r4,464c <__register_exitproc+0x3c>
    4704:	11006317 	ldw	r4,396(r2)
    4708:	218cb03a 	or	r6,r4,r6
    470c:	11806315 	stw	r6,396(r2)
    4710:	003fce06 	br	464c <__register_exitproc+0x3c>
    4714:	18805304 	addi	r2,r3,332
    4718:	18805215 	stw	r2,328(r3)
    471c:	003fc606 	br	4638 <__register_exitproc+0x28>
    4720:	00bfffc4 	movi	r2,-1
    4724:	003fd006 	br	4668 <__register_exitproc+0x58>

00004728 <__call_exitprocs>:
    4728:	defff504 	addi	sp,sp,-44
    472c:	df000915 	stw	fp,36(sp)
    4730:	dd400615 	stw	r21,24(sp)
    4734:	dc800315 	stw	r18,12(sp)
    4738:	dfc00a15 	stw	ra,40(sp)
    473c:	ddc00815 	stw	r23,32(sp)
    4740:	dd800715 	stw	r22,28(sp)
    4744:	dd000515 	stw	r20,20(sp)
    4748:	dcc00415 	stw	r19,16(sp)
    474c:	dc400215 	stw	r17,8(sp)
    4750:	dc000115 	stw	r16,4(sp)
    4754:	d9000015 	stw	r4,0(sp)
    4758:	2839883a 	mov	fp,r5
    475c:	04800044 	movi	r18,1
    4760:	057fffc4 	movi	r21,-1
    4764:	00800034 	movhi	r2,0
    4768:	1094ca04 	addi	r2,r2,21288
    476c:	12000017 	ldw	r8,0(r2)
    4770:	45005217 	ldw	r20,328(r8)
    4774:	44c05204 	addi	r19,r8,328
    4778:	a0001c26 	beq	r20,zero,47ec <__call_exitprocs+0xc4>
    477c:	a0800117 	ldw	r2,4(r20)
    4780:	15ffffc4 	addi	r23,r2,-1
    4784:	b8000d16 	blt	r23,zero,47bc <__call_exitprocs+0x94>
    4788:	14000044 	addi	r16,r2,1
    478c:	8421883a 	add	r16,r16,r16
    4790:	8421883a 	add	r16,r16,r16
    4794:	84402004 	addi	r17,r16,128
    4798:	a463883a 	add	r17,r20,r17
    479c:	a421883a 	add	r16,r20,r16
    47a0:	e0001e26 	beq	fp,zero,481c <__call_exitprocs+0xf4>
    47a4:	80804017 	ldw	r2,256(r16)
    47a8:	e0801c26 	beq	fp,r2,481c <__call_exitprocs+0xf4>
    47ac:	bdffffc4 	addi	r23,r23,-1
    47b0:	843fff04 	addi	r16,r16,-4
    47b4:	8c7fff04 	addi	r17,r17,-4
    47b8:	bd7ff91e 	bne	r23,r21,47a0 <__call_exitprocs+0x78>
    47bc:	00800034 	movhi	r2,0
    47c0:	10800004 	addi	r2,r2,0
    47c4:	10000926 	beq	r2,zero,47ec <__call_exitprocs+0xc4>
    47c8:	a0800117 	ldw	r2,4(r20)
    47cc:	1000301e 	bne	r2,zero,4890 <__call_exitprocs+0x168>
    47d0:	a0800017 	ldw	r2,0(r20)
    47d4:	10003226 	beq	r2,zero,48a0 <__call_exitprocs+0x178>
    47d8:	a009883a 	mov	r4,r20
    47dc:	98800015 	stw	r2,0(r19)
    47e0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    47e4:	9d000017 	ldw	r20,0(r19)
    47e8:	a03fe41e 	bne	r20,zero,477c <__call_exitprocs+0x54>
    47ec:	dfc00a17 	ldw	ra,40(sp)
    47f0:	df000917 	ldw	fp,36(sp)
    47f4:	ddc00817 	ldw	r23,32(sp)
    47f8:	dd800717 	ldw	r22,28(sp)
    47fc:	dd400617 	ldw	r21,24(sp)
    4800:	dd000517 	ldw	r20,20(sp)
    4804:	dcc00417 	ldw	r19,16(sp)
    4808:	dc800317 	ldw	r18,12(sp)
    480c:	dc400217 	ldw	r17,8(sp)
    4810:	dc000117 	ldw	r16,4(sp)
    4814:	dec00b04 	addi	sp,sp,44
    4818:	f800283a 	ret
    481c:	a0800117 	ldw	r2,4(r20)
    4820:	80c00017 	ldw	r3,0(r16)
    4824:	10bfffc4 	addi	r2,r2,-1
    4828:	15c01426 	beq	r2,r23,487c <__call_exitprocs+0x154>
    482c:	80000015 	stw	zero,0(r16)
    4830:	183fde26 	beq	r3,zero,47ac <__call_exitprocs+0x84>
    4834:	95c8983a 	sll	r4,r18,r23
    4838:	a0806217 	ldw	r2,392(r20)
    483c:	a5800117 	ldw	r22,4(r20)
    4840:	2084703a 	and	r2,r4,r2
    4844:	10000b26 	beq	r2,zero,4874 <__call_exitprocs+0x14c>
    4848:	a0806317 	ldw	r2,396(r20)
    484c:	2088703a 	and	r4,r4,r2
    4850:	20000c1e 	bne	r4,zero,4884 <__call_exitprocs+0x15c>
    4854:	89400017 	ldw	r5,0(r17)
    4858:	d9000017 	ldw	r4,0(sp)
    485c:	183ee83a 	callr	r3
    4860:	a0800117 	ldw	r2,4(r20)
    4864:	15bfbf1e 	bne	r2,r22,4764 <__call_exitprocs+0x3c>
    4868:	98800017 	ldw	r2,0(r19)
    486c:	153fcf26 	beq	r2,r20,47ac <__call_exitprocs+0x84>
    4870:	003fbc06 	br	4764 <__call_exitprocs+0x3c>
    4874:	183ee83a 	callr	r3
    4878:	003ff906 	br	4860 <__call_exitprocs+0x138>
    487c:	a5c00115 	stw	r23,4(r20)
    4880:	003feb06 	br	4830 <__call_exitprocs+0x108>
    4884:	89000017 	ldw	r4,0(r17)
    4888:	183ee83a 	callr	r3
    488c:	003ff406 	br	4860 <__call_exitprocs+0x138>
    4890:	a0800017 	ldw	r2,0(r20)
    4894:	a027883a 	mov	r19,r20
    4898:	1029883a 	mov	r20,r2
    489c:	003fb606 	br	4778 <__call_exitprocs+0x50>
    48a0:	0005883a 	mov	r2,zero
    48a4:	003ffb06 	br	4894 <__call_exitprocs+0x16c>

000048a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    48a8:	defffd04 	addi	sp,sp,-12
    48ac:	df000215 	stw	fp,8(sp)
    48b0:	df000204 	addi	fp,sp,8
    48b4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    48b8:	0001883a 	nop
    48bc:	e0bfff17 	ldw	r2,-4(fp)
    48c0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    48c4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    48c8:	10000226 	beq	r2,zero,48d4 <_exit+0x2c>
    ALT_SIM_FAIL();
    48cc:	002af070 	cmpltui	zero,zero,43969
    48d0:	00000106 	br	48d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    48d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    48d8:	003fff06 	br	48d8 <_exit+0x30>
