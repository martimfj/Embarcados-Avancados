
niosLED.elf:     file format elf32-littlenios2
niosLED.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00060230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x0000004c memsz 0x0000004c flags r--
    LOAD off    0x00002000 vaddr 0x00060000 paddr 0x00060000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00002020 vaddr 0x00060020 paddr 0x00060020 align 2**12
         filesz 0x00005968 memsz 0x00005968 flags r-x
    LOAD off    0x0000804c vaddr 0x0004004c paddr 0x00065988 align 2**12
         filesz 0x00001a74 memsz 0x00001bd4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00060000  00060000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00060020  00060020  00002020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005758  00060230  00060230  00002230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00040000  00040000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a74  0004004c  00065988  0000804c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00041ac0  000673fc  00009ac0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_1 00000000  00041c20  00041c20  00009ac0  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  000673fc  000673fc  00009ac0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00009ac0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a30  00000000  00000000  00009ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000166e8  00000000  00000000  0000a518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000060fe  00000000  00000000  00020c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006a7a  00000000  00000000  00026cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001590  00000000  00000000  0002d778  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002819  00000000  00000000  0002ed08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  00031521  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00035ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00036010  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00038c42  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00038c45  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00038c51  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00038c52  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00038c53  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00038c5e  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00038c69  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00038c74  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000051  00000000  00000000  00038c7d  2**0
                  CONTENTS, READONLY
 27 .jdi          00004f87  00000000  00000000  00038cce  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00049910  00000000  00000000  0003dc55  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00060000 l    d  .entry	00000000 .entry
00060020 l    d  .exceptions	00000000 .exceptions
00060230 l    d  .text	00000000 .text
00040000 l    d  .rodata	00000000 .rodata
0004004c l    d  .rwdata	00000000 .rwdata
00041ac0 l    d  .bss	00000000 .bss
00041c20 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
000673fc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLED_bsp//obj/HAL/src/crt0.o
00060268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00060688 l     F .text	00000008 __fp_unlock
0006069c l     F .text	0000019c __sinit.part.1
00060838 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0004004c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00063174 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00063288 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000632b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00063528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00063610 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000636fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000638d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00041ab4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00063b4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00063c88 l     F .text	00000034 alt_dev_reg
00040a20 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00063f60 l     F .text	0000020c altera_avalon_jtag_uart_irq
0006416c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000648f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00064d50 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00064eb0 l     F .text	0000003c alt_get_errno
00064eec l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00041af4 g     O .bss	00000004 alt_instruction_exception_handler
000630f8 g     F .text	00000054 _isatty_r
00063814 g     F .text	0000007c alt_main
0006051c g     F .text	000000c0 _puts_r
00041b20 g     O .bss	00000100 alt_irq
0006026c g     F .text	000000c8 handleTimerInterrupt
00062e20 g     F .text	00000060 _lseek_r
00065988 g       *ABS*	00000000 __flash_rwdata_start
00041c20 g       *ABS*	00000000 __alt_heap_start
000623d4 g     F .text	0000005c __sseek
000609e8 g     F .text	00000010 __sinit
00060840 g     F .text	00000078 __sfmoreglue
000638b4 g     F .text	00000024 __malloc_unlock
00061ac0 g     F .text	0000015c memmove
000609d0 g     F .text	00000018 _cleanup
000652d8 g     F .text	00000024 altera_nios2_gen2_irq_init
00060000 g     F .entry	0000000c __reset
00041ac8 g     O .bss	00000004 edge_capture
00060020 g       *ABS*	00000000 __flash_exceptions_start
0006309c g     F .text	0000005c _fstat_r
00041ad8 g     O .bss	00000004 errno
00062350 g     F .text	00000008 __seofread
00041ae4 g     O .bss	00000004 alt_argv
00049a80 g       *ABS*	00000000 _gp
000408a0 g     O .rwdata	00000180 alt_fd_list
000652fc g     F .text	00000090 alt_find_dev
00061978 g     F .text	00000148 memcpy
00060690 g     F .text	0000000c _cleanup_r
00064e34 g     F .text	0000007c alt_io_redirect
00065988 g       *ABS*	00000000 __DTOR_END__
000605dc g     F .text	00000014 puts
00065558 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00064364 g     F .text	0000021c altera_avalon_jtag_uart_read
00060000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00060460 g     F .text	00000064 .hidden __udivsi3
00063564 g     F .text	000000ac isatty
00041ad4 g     O .bss	00000004 __malloc_top_pad
00041a80 g     O .rwdata	00000004 flag
00060a38 g     F .text	000004c8 __sfvwrite_r
000622a8 g     F .text	00000054 _sbrk_r
0006303c g     F .text	00000060 _read_r
00041aa8 g     O .rwdata	00000004 alt_max_fd
00062640 g     F .text	000000f0 _fclose_r
000629bc g     F .text	00000030 fflush
00041ad0 g     O .bss	00000004 __malloc_max_sbrked_mem
000633a8 g     F .text	00000180 alt_irq_register
00063738 g     F .text	000000dc lseek
00041a88 g     O .rwdata	00000004 _global_impure_ptr
00061d44 g     F .text	00000564 _realloc_r
00041c20 g       *ABS*	00000000 __bss_end
00064c60 g     F .text	000000f0 alt_iic_isr_register
000651d0 g     F .text	00000108 alt_tick
00060a08 g     F .text	00000018 __fp_lock_all
00064c14 g     F .text	0000004c alt_ic_irq_enabled
00065134 g     F .text	0000009c alt_alarm_stop
00041adc g     O .bss	00000004 alt_irq_active
000600fc g     F .exceptions	000000d4 alt_irq_handler
00040878 g     O .rwdata	00000028 alt_dev_null
000648d0 g     F .text	00000020 alt_dcache_flush_all
00041ac0 g       *ABS*	00000000 __ram_rwdata_end
00041aa0 g     O .rwdata	00000008 alt_dev_list
00063b88 g     F .text	00000100 write
0004004c g       *ABS*	00000000 __ram_rodata_end
000632f0 g     F .text	000000b8 fstat
00041ac0 g     O .bss	00000004 led
000604c4 g     F .text	00000058 .hidden __umodsi3
00041c20 g       *ABS*	00000000 end
00063ea0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000601d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00065988 g       *ABS*	00000000 __CTOR_LIST__
00060000 g       *ABS*	00000000 __alt_stack_pointer
00064580 g     F .text	00000224 altera_avalon_jtag_uart_write
000609f8 g     F .text	00000004 __sfp_lock_acquire
00061894 g     F .text	000000e4 memchr
00062b10 g     F .text	00000310 _free_r
000657d4 g     F .text	00000180 __call_exitprocs
00041a90 g     O .rwdata	00000004 __malloc_sbrk_base
00060230 g     F .text	0000003c _start
00041aec g     O .bss	00000004 _alt_tick_rate
00041af0 g     O .bss	00000004 _alt_nticks
00063914 g     F .text	00000104 read
00063cf4 g     F .text	00000048 alt_sys_init
000656bc g     F .text	00000118 __register_exitproc
0006420c g     F .text	00000068 altera_avalon_jtag_uart_close
0006314c g     F .text	00000028 .hidden __mulsi3
0004004c g       *ABS*	00000000 __ram_rwdata_start
00040000 g       *ABS*	00000000 __ram_rodata_start
00041af8 g     O .bss	00000028 __malloc_current_mallinfo
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00063d3c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00065494 g     F .text	000000c4 alt_get_fd
000625ec g     F .text	00000054 _close_r
00065640 g     F .text	0000007c memcmp
00063dfc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00041c20 g       *ABS*	00000000 __alt_stack_base
00063e4c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00062498 g     F .text	00000154 __swsetup_r
000608b8 g     F .text	00000118 __sfp
00040470 g     O .rwdata	00000408 __malloc_av_
00060a04 g     F .text	00000004 __sinit_lock_release
000622fc g     F .text	00000054 __sread
00041ac4 g     O .bss	00000004 counter
0006538c g     F .text	00000108 alt_find_file
0006492c g     F .text	000000a4 alt_dev_llist_insert
00063890 g     F .text	00000024 __malloc_lock
00063a9c g     F .text	000000b0 sbrk
00062960 g     F .text	0000005c _fflush_r
00041ac0 g       *ABS*	00000000 __bss_start
00061c1c g     F .text	00000128 memset
00060334 g     F .text	00000034 main
00041ae8 g     O .bss	00000004 alt_envp
00041acc g     O .bss	00000004 __malloc_max_total_mem
00063d9c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00062430 g     F .text	00000008 __sclose
00060000 g       *ABS*	00000000 __alt_heap_limit
00062730 g     F .text	00000014 fclose
00061088 g     F .text	0000080c _malloc_r
00041aac g     O .rwdata	00000004 alt_errno
00060f00 g     F .text	000000c4 _fwalk
00060368 g     F .text	00000084 .hidden __divsi3
000629ec g     F .text	00000124 _malloc_trim_r
00065988 g       *ABS*	00000000 __CTOR_END__
00040000 g       *ABS*	00000000 __flash_rodata_start
00065988 g       *ABS*	00000000 __DTOR_LIST__
00063cbc g     F .text	00000038 alt_irq_init
00063a18 g     F .text	00000084 alt_release_fd
000655f4 g     F .text	00000014 atexit
00062438 g     F .text	00000060 _write_r
00041a8c g     O .rwdata	00000004 _impure_ptr
00041ae0 g     O .bss	00000004 alt_argc
00062744 g     F .text	0000021c __sflush_r
00064a30 g     F .text	00000060 _do_dtors
00060020 g       .exceptions	00000000 alt_irq_entry
00060a20 g     F .text	00000018 __fp_unlock_all
00041a98 g     O .rwdata	00000008 alt_fs_list
00060020 g       *ABS*	00000000 __ram_exceptions_start
00064ab0 g     F .text	00000050 alt_ic_isr_register
00041ac0 g       *ABS*	00000000 _edata
00041c20 g       *ABS*	00000000 _end
00060230 g       *ABS*	00000000 __ram_exceptions_end
00064274 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00064b88 g     F .text	0000008c alt_ic_irq_disable
00062358 g     F .text	0000007c __swrite
00041a94 g     O .rwdata	00000004 __malloc_trim_threshold
00065608 g     F .text	00000038 exit
00060fc4 g     F .text	000000c4 _fwalk_reent
000603ec g     F .text	00000074 .hidden __modsi3
00060000 g       *ABS*	00000000 __alt_data_end
00041a84 g     O .rwdata	00000004 p_pio0
00060020 g     F .exceptions	00000000 alt_exception
000609fc g     F .text	00000004 __sfp_lock_release
00065954 g     F .text	00000034 _exit
000647a4 g     F .text	0000012c alt_alarm_start
00062e80 g     F .text	000001bc __smakebuf_r
000605f0 g     F .text	00000098 strlen
00064fd8 g     F .text	0000015c open
00064a90 g     F .text	00000020 alt_icache_flush_all
00041ab0 g     O .rwdata	00000004 alt_priority_mask
00064b00 g     F .text	00000088 alt_ic_irq_enable
00041ab8 g     O .rwdata	00000008 alt_alarm_list
000649d0 g     F .text	00000060 _do_ctors
000631b0 g     F .text	000000d8 close
00063678 g     F .text	00000084 alt_load
00060a00 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00060000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   60000:	004001b4 	movhi	at,6
    ori r1, r1, %lo(_start)
   60004:	08408c14 	ori	at,at,560
    jmp r1
   60008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00060020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   60020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   60024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   60028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   6002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   60030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   60034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   60038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   6003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   60040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   60044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   60048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   6004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   60050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   60054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   60058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   6005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   60060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   60064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   60068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   6006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   60070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   60074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   60078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   6007c:	10000326 	beq	r2,zero,6008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   60080:	20000226 	beq	r4,zero,6008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   60084:	00600fc0 	call	600fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   60088:	00000706 	br	600a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   6008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   60090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   60094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   60098:	00601d00 	call	601d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   6009c:	1000021e 	bne	r2,zero,600a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   600a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   600a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   600a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   600ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   600b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   600b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   600b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   600bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   600c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   600c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   600c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   600cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   600d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   600d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   600d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   600dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   600e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   600e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   600e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   600ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   600f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   600f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   600f8:	ef80083a 	eret

000600fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   600fc:	defff904 	addi	sp,sp,-28
   60100:	dfc00615 	stw	ra,24(sp)
   60104:	df000515 	stw	fp,20(sp)
   60108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   6010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   60110:	0005313a 	rdctl	r2,ipending
   60114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   60118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   6011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   60120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   60124:	00800044 	movi	r2,1
   60128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   6012c:	e0fffb17 	ldw	r3,-20(fp)
   60130:	e0bffc17 	ldw	r2,-16(fp)
   60134:	1884703a 	and	r2,r3,r2
   60138:	10001426 	beq	r2,zero,6018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   6013c:	00800134 	movhi	r2,4
   60140:	1086c804 	addi	r2,r2,6944
   60144:	e0fffd17 	ldw	r3,-12(fp)
   60148:	180690fa 	slli	r3,r3,3
   6014c:	10c5883a 	add	r2,r2,r3
   60150:	10c00017 	ldw	r3,0(r2)
   60154:	00800134 	movhi	r2,4
   60158:	1086c804 	addi	r2,r2,6944
   6015c:	e13ffd17 	ldw	r4,-12(fp)
   60160:	200890fa 	slli	r4,r4,3
   60164:	1105883a 	add	r2,r2,r4
   60168:	10800104 	addi	r2,r2,4
   6016c:	10800017 	ldw	r2,0(r2)
   60170:	1009883a 	mov	r4,r2
   60174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   60178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   6017c:	0005313a 	rdctl	r2,ipending
   60180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   60184:	e0bfff17 	ldw	r2,-4(fp)
   60188:	00000706 	br	601a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   6018c:	e0bffc17 	ldw	r2,-16(fp)
   60190:	1085883a 	add	r2,r2,r2
   60194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   60198:	e0bffd17 	ldw	r2,-12(fp)
   6019c:	10800044 	addi	r2,r2,1
   601a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   601a4:	003fe106 	br	6012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   601a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   601ac:	e0bffb17 	ldw	r2,-20(fp)
   601b0:	103fdb1e 	bne	r2,zero,60120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   601b4:	0001883a 	nop
}
   601b8:	0001883a 	nop
   601bc:	e037883a 	mov	sp,fp
   601c0:	dfc00117 	ldw	ra,4(sp)
   601c4:	df000017 	ldw	fp,0(sp)
   601c8:	dec00204 	addi	sp,sp,8
   601cc:	f800283a 	ret

000601d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   601d0:	defffb04 	addi	sp,sp,-20
   601d4:	dfc00415 	stw	ra,16(sp)
   601d8:	df000315 	stw	fp,12(sp)
   601dc:	df000304 	addi	fp,sp,12
   601e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   601e4:	00bfffc4 	movi	r2,-1
   601e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   601ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   601f0:	d0a01d17 	ldw	r2,-32652(gp)
   601f4:	10000726 	beq	r2,zero,60214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   601f8:	d0a01d17 	ldw	r2,-32652(gp)
   601fc:	e0fffd17 	ldw	r3,-12(fp)
   60200:	e1bffe17 	ldw	r6,-8(fp)
   60204:	e17fff17 	ldw	r5,-4(fp)
   60208:	1809883a 	mov	r4,r3
   6020c:	103ee83a 	callr	r2
   60210:	00000206 	br	6021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   60214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   60218:	0005883a 	mov	r2,zero
}
   6021c:	e037883a 	mov	sp,fp
   60220:	dfc00117 	ldw	ra,4(sp)
   60224:	df000017 	ldw	fp,0(sp)
   60228:	dec00204 	addi	sp,sp,8
   6022c:	f800283a 	ret

Disassembly of section .text:

00060230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   60230:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   60234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   60238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   6023c:	d6a6a014 	ori	gp,gp,39552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   60240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   60244:	1086b014 	ori	r2,r2,6848

    movhi r3, %hi(__bss_end)
   60248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   6024c:	18c70814 	ori	r3,r3,7200

    beq r2, r3, 1f
   60250:	10c00326 	beq	r2,r3,60260 <_start+0x30>

0:
    stw zero, (r2)
   60254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   60258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   6025c:	10fffd36 	bltu	r2,r3,60254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   60260:	00636780 	call	63678 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   60264:	00638140 	call	63814 <alt_main>

00060268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   60268:	003fff06 	br	60268 <alt_after_alt_main>

0006026c <handleTimerInterrupt>:
unsigned int counter = 0;
unsigned int *p_pio0 = (unsigned int *) PIO_0_BASE;


void handleTimerInterrupt (void* context, alt_u32 id)
{
   6026c:	defffa04 	addi	sp,sp,-24
   60270:	dfc00515 	stw	ra,20(sp)
   60274:	df000415 	stw	fp,16(sp)
   60278:	df000404 	addi	fp,sp,16
   6027c:	e13ffe15 	stw	r4,-8(fp)
   60280:	e17fff15 	stw	r5,-4(fp)
	unsigned int factor = (IORD_32DIRECT(PIO_1_BASE, 0) & 0x0f) + 1;
   60284:	00800234 	movhi	r2,8
   60288:	10840004 	addi	r2,r2,4096
   6028c:	10800037 	ldwio	r2,0(r2)
   60290:	108003cc 	andi	r2,r2,15
   60294:	10800044 	addi	r2,r2,1
   60298:	e0bffc15 	stw	r2,-16(fp)
	unsigned int flag = IORD_32DIRECT(PIO_1_BASE, 0) & 0x10;
   6029c:	00800234 	movhi	r2,8
   602a0:	10840004 	addi	r2,r2,4096
   602a4:	10800037 	ldwio	r2,0(r2)
   602a8:	1080040c 	andi	r2,r2,16
   602ac:	e0bffd15 	stw	r2,-12(fp)

	counter++;
   602b0:	d0a01117 	ldw	r2,-32700(gp)
   602b4:	10800044 	addi	r2,r2,1
   602b8:	d0a01115 	stw	r2,-32700(gp)
	if(counter >= 10000/factor){
   602bc:	e17ffc17 	ldw	r5,-16(fp)
   602c0:	0109c404 	movi	r4,10000
   602c4:	00604600 	call	60460 <__udivsi3>
   602c8:	1007883a 	mov	r3,r2
   602cc:	d0a01117 	ldw	r2,-32700(gp)
   602d0:	10c00f36 	bltu	r2,r3,60310 <handleTimerInterrupt+0xa4>
		if (flag){
   602d4:	e0bffd17 	ldw	r2,-12(fp)
   602d8:	10000c26 	beq	r2,zero,6030c <handleTimerInterrupt+0xa0>
		  if (led <= 5){
   602dc:	d0a01017 	ldw	r2,-32704(gp)
   602e0:	108001a8 	cmpgeui	r2,r2,6
   602e4:	1000081e 	bne	r2,zero,60308 <handleTimerInterrupt+0x9c>
			  *(p_pio0+0) = 0x01 << led++;
   602e8:	d0e00117 	ldw	r3,-32764(gp)
   602ec:	d0a01017 	ldw	r2,-32704(gp)
   602f0:	11000044 	addi	r4,r2,1
   602f4:	d1201015 	stw	r4,-32704(gp)
   602f8:	01000044 	movi	r4,1
   602fc:	2084983a 	sll	r2,r4,r2
   60300:	18800015 	stw	r2,0(r3)
   60304:	00000106 	br	6030c <handleTimerInterrupt+0xa0>
		  }
		  else{
			  led = 0;
   60308:	d0201015 	stw	zero,-32704(gp)
		  }
		}
		counter = 0;
   6030c:	d0201115 	stw	zero,-32700(gp)
	}
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);                             // Clear the interrupt flag
   60310:	0007883a 	mov	r3,zero
   60314:	0005883a 	mov	r2,zero
   60318:	10c00035 	stwio	r3,0(r2)
}
   6031c:	0001883a 	nop
   60320:	e037883a 	mov	sp,fp
   60324:	dfc00117 	ldw	ra,4(sp)
   60328:	df000017 	ldw	fp,0(sp)
   6032c:	dec00204 	addi	sp,sp,8
   60330:	f800283a 	ret

00060334 <main>:


int main(void){
   60334:	defffe04 	addi	sp,sp,-8
   60338:	dfc00115 	stw	ra,4(sp)
   6033c:	df000015 	stw	fp,0(sp)
   60340:	d839883a 	mov	fp,sp
  printf("Embarcados14++ \n");
   60344:	01000134 	movhi	r4,4
   60348:	21000004 	addi	r4,r4,0
   6034c:	00605dc0 	call	605dc <puts>

//  usleep(100000);
  alt_irq_register(TIMER_0_BASE, 0, handleTimerInterrupt);                       // Register the ISR for timer
   60350:	018001b4 	movhi	r6,6
   60354:	31809b04 	addi	r6,r6,620
   60358:	000b883a 	mov	r5,zero
   6035c:	0009883a 	mov	r4,zero
   60360:	00633a80 	call	633a8 <alt_irq_register>

  while(1){};
   60364:	003fff06 	br	60364 <main+0x30>

00060368 <__divsi3>:
   60368:	20001b16 	blt	r4,zero,603d8 <__divsi3+0x70>
   6036c:	000f883a 	mov	r7,zero
   60370:	28001616 	blt	r5,zero,603cc <__divsi3+0x64>
   60374:	200d883a 	mov	r6,r4
   60378:	29001a2e 	bgeu	r5,r4,603e4 <__divsi3+0x7c>
   6037c:	00800804 	movi	r2,32
   60380:	00c00044 	movi	r3,1
   60384:	00000106 	br	6038c <__divsi3+0x24>
   60388:	10000d26 	beq	r2,zero,603c0 <__divsi3+0x58>
   6038c:	294b883a 	add	r5,r5,r5
   60390:	10bfffc4 	addi	r2,r2,-1
   60394:	18c7883a 	add	r3,r3,r3
   60398:	293ffb36 	bltu	r5,r4,60388 <__divsi3+0x20>
   6039c:	0005883a 	mov	r2,zero
   603a0:	18000726 	beq	r3,zero,603c0 <__divsi3+0x58>
   603a4:	0005883a 	mov	r2,zero
   603a8:	31400236 	bltu	r6,r5,603b4 <__divsi3+0x4c>
   603ac:	314dc83a 	sub	r6,r6,r5
   603b0:	10c4b03a 	or	r2,r2,r3
   603b4:	1806d07a 	srli	r3,r3,1
   603b8:	280ad07a 	srli	r5,r5,1
   603bc:	183ffa1e 	bne	r3,zero,603a8 <__divsi3+0x40>
   603c0:	38000126 	beq	r7,zero,603c8 <__divsi3+0x60>
   603c4:	0085c83a 	sub	r2,zero,r2
   603c8:	f800283a 	ret
   603cc:	014bc83a 	sub	r5,zero,r5
   603d0:	39c0005c 	xori	r7,r7,1
   603d4:	003fe706 	br	60374 <__divsi3+0xc>
   603d8:	0109c83a 	sub	r4,zero,r4
   603dc:	01c00044 	movi	r7,1
   603e0:	003fe306 	br	60370 <__divsi3+0x8>
   603e4:	00c00044 	movi	r3,1
   603e8:	003fee06 	br	603a4 <__divsi3+0x3c>

000603ec <__modsi3>:
   603ec:	20001716 	blt	r4,zero,6044c <__modsi3+0x60>
   603f0:	000f883a 	mov	r7,zero
   603f4:	2005883a 	mov	r2,r4
   603f8:	28001216 	blt	r5,zero,60444 <__modsi3+0x58>
   603fc:	2900162e 	bgeu	r5,r4,60458 <__modsi3+0x6c>
   60400:	01800804 	movi	r6,32
   60404:	00c00044 	movi	r3,1
   60408:	00000106 	br	60410 <__modsi3+0x24>
   6040c:	30000a26 	beq	r6,zero,60438 <__modsi3+0x4c>
   60410:	294b883a 	add	r5,r5,r5
   60414:	31bfffc4 	addi	r6,r6,-1
   60418:	18c7883a 	add	r3,r3,r3
   6041c:	293ffb36 	bltu	r5,r4,6040c <__modsi3+0x20>
   60420:	18000526 	beq	r3,zero,60438 <__modsi3+0x4c>
   60424:	1806d07a 	srli	r3,r3,1
   60428:	11400136 	bltu	r2,r5,60430 <__modsi3+0x44>
   6042c:	1145c83a 	sub	r2,r2,r5
   60430:	280ad07a 	srli	r5,r5,1
   60434:	183ffb1e 	bne	r3,zero,60424 <__modsi3+0x38>
   60438:	38000126 	beq	r7,zero,60440 <__modsi3+0x54>
   6043c:	0085c83a 	sub	r2,zero,r2
   60440:	f800283a 	ret
   60444:	014bc83a 	sub	r5,zero,r5
   60448:	003fec06 	br	603fc <__modsi3+0x10>
   6044c:	0109c83a 	sub	r4,zero,r4
   60450:	01c00044 	movi	r7,1
   60454:	003fe706 	br	603f4 <__modsi3+0x8>
   60458:	00c00044 	movi	r3,1
   6045c:	003ff106 	br	60424 <__modsi3+0x38>

00060460 <__udivsi3>:
   60460:	200d883a 	mov	r6,r4
   60464:	2900152e 	bgeu	r5,r4,604bc <__udivsi3+0x5c>
   60468:	28001416 	blt	r5,zero,604bc <__udivsi3+0x5c>
   6046c:	00800804 	movi	r2,32
   60470:	00c00044 	movi	r3,1
   60474:	00000206 	br	60480 <__udivsi3+0x20>
   60478:	10000e26 	beq	r2,zero,604b4 <__udivsi3+0x54>
   6047c:	28000516 	blt	r5,zero,60494 <__udivsi3+0x34>
   60480:	294b883a 	add	r5,r5,r5
   60484:	10bfffc4 	addi	r2,r2,-1
   60488:	18c7883a 	add	r3,r3,r3
   6048c:	293ffa36 	bltu	r5,r4,60478 <__udivsi3+0x18>
   60490:	18000826 	beq	r3,zero,604b4 <__udivsi3+0x54>
   60494:	0005883a 	mov	r2,zero
   60498:	31400236 	bltu	r6,r5,604a4 <__udivsi3+0x44>
   6049c:	314dc83a 	sub	r6,r6,r5
   604a0:	10c4b03a 	or	r2,r2,r3
   604a4:	1806d07a 	srli	r3,r3,1
   604a8:	280ad07a 	srli	r5,r5,1
   604ac:	183ffa1e 	bne	r3,zero,60498 <__udivsi3+0x38>
   604b0:	f800283a 	ret
   604b4:	0005883a 	mov	r2,zero
   604b8:	f800283a 	ret
   604bc:	00c00044 	movi	r3,1
   604c0:	003ff406 	br	60494 <__udivsi3+0x34>

000604c4 <__umodsi3>:
   604c4:	2005883a 	mov	r2,r4
   604c8:	2900122e 	bgeu	r5,r4,60514 <__umodsi3+0x50>
   604cc:	28001116 	blt	r5,zero,60514 <__umodsi3+0x50>
   604d0:	01800804 	movi	r6,32
   604d4:	00c00044 	movi	r3,1
   604d8:	00000206 	br	604e4 <__umodsi3+0x20>
   604dc:	30000c26 	beq	r6,zero,60510 <__umodsi3+0x4c>
   604e0:	28000516 	blt	r5,zero,604f8 <__umodsi3+0x34>
   604e4:	294b883a 	add	r5,r5,r5
   604e8:	31bfffc4 	addi	r6,r6,-1
   604ec:	18c7883a 	add	r3,r3,r3
   604f0:	293ffa36 	bltu	r5,r4,604dc <__umodsi3+0x18>
   604f4:	18000626 	beq	r3,zero,60510 <__umodsi3+0x4c>
   604f8:	1806d07a 	srli	r3,r3,1
   604fc:	11400136 	bltu	r2,r5,60504 <__umodsi3+0x40>
   60500:	1145c83a 	sub	r2,r2,r5
   60504:	280ad07a 	srli	r5,r5,1
   60508:	183ffb1e 	bne	r3,zero,604f8 <__umodsi3+0x34>
   6050c:	f800283a 	ret
   60510:	f800283a 	ret
   60514:	00c00044 	movi	r3,1
   60518:	003ff706 	br	604f8 <__umodsi3+0x34>

0006051c <_puts_r>:
   6051c:	defff604 	addi	sp,sp,-40
   60520:	dc000715 	stw	r16,28(sp)
   60524:	2021883a 	mov	r16,r4
   60528:	2809883a 	mov	r4,r5
   6052c:	dc400815 	stw	r17,32(sp)
   60530:	dfc00915 	stw	ra,36(sp)
   60534:	2823883a 	mov	r17,r5
   60538:	00605f00 	call	605f0 <strlen>
   6053c:	10c00044 	addi	r3,r2,1
   60540:	d8800115 	stw	r2,4(sp)
   60544:	00800134 	movhi	r2,4
   60548:	10800404 	addi	r2,r2,16
   6054c:	d8800215 	stw	r2,8(sp)
   60550:	00800044 	movi	r2,1
   60554:	d8800315 	stw	r2,12(sp)
   60558:	00800084 	movi	r2,2
   6055c:	dc400015 	stw	r17,0(sp)
   60560:	d8c00615 	stw	r3,24(sp)
   60564:	dec00415 	stw	sp,16(sp)
   60568:	d8800515 	stw	r2,20(sp)
   6056c:	80000226 	beq	r16,zero,60578 <_puts_r+0x5c>
   60570:	80800e17 	ldw	r2,56(r16)
   60574:	10001426 	beq	r2,zero,605c8 <_puts_r+0xac>
   60578:	81400217 	ldw	r5,8(r16)
   6057c:	2880030b 	ldhu	r2,12(r5)
   60580:	10c8000c 	andi	r3,r2,8192
   60584:	1800061e 	bne	r3,zero,605a0 <_puts_r+0x84>
   60588:	29001917 	ldw	r4,100(r5)
   6058c:	00f7ffc4 	movi	r3,-8193
   60590:	10880014 	ori	r2,r2,8192
   60594:	20c6703a 	and	r3,r4,r3
   60598:	2880030d 	sth	r2,12(r5)
   6059c:	28c01915 	stw	r3,100(r5)
   605a0:	d9800404 	addi	r6,sp,16
   605a4:	8009883a 	mov	r4,r16
   605a8:	0060a380 	call	60a38 <__sfvwrite_r>
   605ac:	1000091e 	bne	r2,zero,605d4 <_puts_r+0xb8>
   605b0:	00800284 	movi	r2,10
   605b4:	dfc00917 	ldw	ra,36(sp)
   605b8:	dc400817 	ldw	r17,32(sp)
   605bc:	dc000717 	ldw	r16,28(sp)
   605c0:	dec00a04 	addi	sp,sp,40
   605c4:	f800283a 	ret
   605c8:	8009883a 	mov	r4,r16
   605cc:	00609e80 	call	609e8 <__sinit>
   605d0:	003fe906 	br	60578 <_puts_r+0x5c>
   605d4:	00bfffc4 	movi	r2,-1
   605d8:	003ff606 	br	605b4 <_puts_r+0x98>

000605dc <puts>:
   605dc:	00800134 	movhi	r2,4
   605e0:	1086a304 	addi	r2,r2,6796
   605e4:	200b883a 	mov	r5,r4
   605e8:	11000017 	ldw	r4,0(r2)
   605ec:	006051c1 	jmpi	6051c <_puts_r>

000605f0 <strlen>:
   605f0:	208000cc 	andi	r2,r4,3
   605f4:	10002026 	beq	r2,zero,60678 <strlen+0x88>
   605f8:	20800007 	ldb	r2,0(r4)
   605fc:	10002026 	beq	r2,zero,60680 <strlen+0x90>
   60600:	2005883a 	mov	r2,r4
   60604:	00000206 	br	60610 <strlen+0x20>
   60608:	10c00007 	ldb	r3,0(r2)
   6060c:	18001826 	beq	r3,zero,60670 <strlen+0x80>
   60610:	10800044 	addi	r2,r2,1
   60614:	10c000cc 	andi	r3,r2,3
   60618:	183ffb1e 	bne	r3,zero,60608 <strlen+0x18>
   6061c:	10c00017 	ldw	r3,0(r2)
   60620:	01ffbff4 	movhi	r7,65279
   60624:	39ffbfc4 	addi	r7,r7,-257
   60628:	00ca303a 	nor	r5,zero,r3
   6062c:	01a02074 	movhi	r6,32897
   60630:	19c7883a 	add	r3,r3,r7
   60634:	31a02004 	addi	r6,r6,-32640
   60638:	1946703a 	and	r3,r3,r5
   6063c:	1986703a 	and	r3,r3,r6
   60640:	1800091e 	bne	r3,zero,60668 <strlen+0x78>
   60644:	10800104 	addi	r2,r2,4
   60648:	10c00017 	ldw	r3,0(r2)
   6064c:	19cb883a 	add	r5,r3,r7
   60650:	00c6303a 	nor	r3,zero,r3
   60654:	28c6703a 	and	r3,r5,r3
   60658:	1986703a 	and	r3,r3,r6
   6065c:	183ff926 	beq	r3,zero,60644 <strlen+0x54>
   60660:	00000106 	br	60668 <strlen+0x78>
   60664:	10800044 	addi	r2,r2,1
   60668:	10c00007 	ldb	r3,0(r2)
   6066c:	183ffd1e 	bne	r3,zero,60664 <strlen+0x74>
   60670:	1105c83a 	sub	r2,r2,r4
   60674:	f800283a 	ret
   60678:	2005883a 	mov	r2,r4
   6067c:	003fe706 	br	6061c <strlen+0x2c>
   60680:	0005883a 	mov	r2,zero
   60684:	f800283a 	ret

00060688 <__fp_unlock>:
   60688:	0005883a 	mov	r2,zero
   6068c:	f800283a 	ret

00060690 <_cleanup_r>:
   60690:	014001b4 	movhi	r5,6
   60694:	29499004 	addi	r5,r5,9792
   60698:	0060fc41 	jmpi	60fc4 <_fwalk_reent>

0006069c <__sinit.part.1>:
   6069c:	defff704 	addi	sp,sp,-36
   606a0:	00c001b4 	movhi	r3,6
   606a4:	dfc00815 	stw	ra,32(sp)
   606a8:	ddc00715 	stw	r23,28(sp)
   606ac:	dd800615 	stw	r22,24(sp)
   606b0:	dd400515 	stw	r21,20(sp)
   606b4:	dd000415 	stw	r20,16(sp)
   606b8:	dcc00315 	stw	r19,12(sp)
   606bc:	dc800215 	stw	r18,8(sp)
   606c0:	dc400115 	stw	r17,4(sp)
   606c4:	dc000015 	stw	r16,0(sp)
   606c8:	18c1a404 	addi	r3,r3,1680
   606cc:	24000117 	ldw	r16,4(r4)
   606d0:	20c00f15 	stw	r3,60(r4)
   606d4:	2080bb04 	addi	r2,r4,748
   606d8:	00c000c4 	movi	r3,3
   606dc:	20c0b915 	stw	r3,740(r4)
   606e0:	2080ba15 	stw	r2,744(r4)
   606e4:	2000b815 	stw	zero,736(r4)
   606e8:	05c00204 	movi	r23,8
   606ec:	00800104 	movi	r2,4
   606f0:	2025883a 	mov	r18,r4
   606f4:	b80d883a 	mov	r6,r23
   606f8:	81001704 	addi	r4,r16,92
   606fc:	000b883a 	mov	r5,zero
   60700:	80000015 	stw	zero,0(r16)
   60704:	80000115 	stw	zero,4(r16)
   60708:	80000215 	stw	zero,8(r16)
   6070c:	8080030d 	sth	r2,12(r16)
   60710:	80001915 	stw	zero,100(r16)
   60714:	8000038d 	sth	zero,14(r16)
   60718:	80000415 	stw	zero,16(r16)
   6071c:	80000515 	stw	zero,20(r16)
   60720:	80000615 	stw	zero,24(r16)
   60724:	0061c1c0 	call	61c1c <memset>
   60728:	058001b4 	movhi	r22,6
   6072c:	94400217 	ldw	r17,8(r18)
   60730:	054001b4 	movhi	r21,6
   60734:	050001b4 	movhi	r20,6
   60738:	04c001b4 	movhi	r19,6
   6073c:	b588bf04 	addi	r22,r22,8956
   60740:	ad48d604 	addi	r21,r21,9048
   60744:	a508f504 	addi	r20,r20,9172
   60748:	9cc90c04 	addi	r19,r19,9264
   6074c:	85800815 	stw	r22,32(r16)
   60750:	85400915 	stw	r21,36(r16)
   60754:	85000a15 	stw	r20,40(r16)
   60758:	84c00b15 	stw	r19,44(r16)
   6075c:	84000715 	stw	r16,28(r16)
   60760:	00800284 	movi	r2,10
   60764:	8880030d 	sth	r2,12(r17)
   60768:	00800044 	movi	r2,1
   6076c:	b80d883a 	mov	r6,r23
   60770:	89001704 	addi	r4,r17,92
   60774:	000b883a 	mov	r5,zero
   60778:	88000015 	stw	zero,0(r17)
   6077c:	88000115 	stw	zero,4(r17)
   60780:	88000215 	stw	zero,8(r17)
   60784:	88001915 	stw	zero,100(r17)
   60788:	8880038d 	sth	r2,14(r17)
   6078c:	88000415 	stw	zero,16(r17)
   60790:	88000515 	stw	zero,20(r17)
   60794:	88000615 	stw	zero,24(r17)
   60798:	0061c1c0 	call	61c1c <memset>
   6079c:	94000317 	ldw	r16,12(r18)
   607a0:	00800484 	movi	r2,18
   607a4:	8c400715 	stw	r17,28(r17)
   607a8:	8d800815 	stw	r22,32(r17)
   607ac:	8d400915 	stw	r21,36(r17)
   607b0:	8d000a15 	stw	r20,40(r17)
   607b4:	8cc00b15 	stw	r19,44(r17)
   607b8:	8080030d 	sth	r2,12(r16)
   607bc:	00800084 	movi	r2,2
   607c0:	80000015 	stw	zero,0(r16)
   607c4:	80000115 	stw	zero,4(r16)
   607c8:	80000215 	stw	zero,8(r16)
   607cc:	80001915 	stw	zero,100(r16)
   607d0:	8080038d 	sth	r2,14(r16)
   607d4:	80000415 	stw	zero,16(r16)
   607d8:	80000515 	stw	zero,20(r16)
   607dc:	80000615 	stw	zero,24(r16)
   607e0:	b80d883a 	mov	r6,r23
   607e4:	000b883a 	mov	r5,zero
   607e8:	81001704 	addi	r4,r16,92
   607ec:	0061c1c0 	call	61c1c <memset>
   607f0:	00800044 	movi	r2,1
   607f4:	84000715 	stw	r16,28(r16)
   607f8:	85800815 	stw	r22,32(r16)
   607fc:	85400915 	stw	r21,36(r16)
   60800:	85000a15 	stw	r20,40(r16)
   60804:	84c00b15 	stw	r19,44(r16)
   60808:	90800e15 	stw	r2,56(r18)
   6080c:	dfc00817 	ldw	ra,32(sp)
   60810:	ddc00717 	ldw	r23,28(sp)
   60814:	dd800617 	ldw	r22,24(sp)
   60818:	dd400517 	ldw	r21,20(sp)
   6081c:	dd000417 	ldw	r20,16(sp)
   60820:	dcc00317 	ldw	r19,12(sp)
   60824:	dc800217 	ldw	r18,8(sp)
   60828:	dc400117 	ldw	r17,4(sp)
   6082c:	dc000017 	ldw	r16,0(sp)
   60830:	dec00904 	addi	sp,sp,36
   60834:	f800283a 	ret

00060838 <__fp_lock>:
   60838:	0005883a 	mov	r2,zero
   6083c:	f800283a 	ret

00060840 <__sfmoreglue>:
   60840:	defffc04 	addi	sp,sp,-16
   60844:	dc800215 	stw	r18,8(sp)
   60848:	2825883a 	mov	r18,r5
   6084c:	dc000015 	stw	r16,0(sp)
   60850:	01401a04 	movi	r5,104
   60854:	2021883a 	mov	r16,r4
   60858:	913fffc4 	addi	r4,r18,-1
   6085c:	dfc00315 	stw	ra,12(sp)
   60860:	dc400115 	stw	r17,4(sp)
   60864:	006314c0 	call	6314c <__mulsi3>
   60868:	8009883a 	mov	r4,r16
   6086c:	11401d04 	addi	r5,r2,116
   60870:	1023883a 	mov	r17,r2
   60874:	00610880 	call	61088 <_malloc_r>
   60878:	1021883a 	mov	r16,r2
   6087c:	10000726 	beq	r2,zero,6089c <__sfmoreglue+0x5c>
   60880:	11000304 	addi	r4,r2,12
   60884:	10000015 	stw	zero,0(r2)
   60888:	14800115 	stw	r18,4(r2)
   6088c:	11000215 	stw	r4,8(r2)
   60890:	89801a04 	addi	r6,r17,104
   60894:	000b883a 	mov	r5,zero
   60898:	0061c1c0 	call	61c1c <memset>
   6089c:	8005883a 	mov	r2,r16
   608a0:	dfc00317 	ldw	ra,12(sp)
   608a4:	dc800217 	ldw	r18,8(sp)
   608a8:	dc400117 	ldw	r17,4(sp)
   608ac:	dc000017 	ldw	r16,0(sp)
   608b0:	dec00404 	addi	sp,sp,16
   608b4:	f800283a 	ret

000608b8 <__sfp>:
   608b8:	defffb04 	addi	sp,sp,-20
   608bc:	dc000015 	stw	r16,0(sp)
   608c0:	04000134 	movhi	r16,4
   608c4:	8406a204 	addi	r16,r16,6792
   608c8:	dcc00315 	stw	r19,12(sp)
   608cc:	2027883a 	mov	r19,r4
   608d0:	81000017 	ldw	r4,0(r16)
   608d4:	dfc00415 	stw	ra,16(sp)
   608d8:	dc800215 	stw	r18,8(sp)
   608dc:	20800e17 	ldw	r2,56(r4)
   608e0:	dc400115 	stw	r17,4(sp)
   608e4:	1000021e 	bne	r2,zero,608f0 <__sfp+0x38>
   608e8:	006069c0 	call	6069c <__sinit.part.1>
   608ec:	81000017 	ldw	r4,0(r16)
   608f0:	2480b804 	addi	r18,r4,736
   608f4:	047fffc4 	movi	r17,-1
   608f8:	91000117 	ldw	r4,4(r18)
   608fc:	94000217 	ldw	r16,8(r18)
   60900:	213fffc4 	addi	r4,r4,-1
   60904:	20000a16 	blt	r4,zero,60930 <__sfp+0x78>
   60908:	8080030f 	ldh	r2,12(r16)
   6090c:	10000c26 	beq	r2,zero,60940 <__sfp+0x88>
   60910:	80c01d04 	addi	r3,r16,116
   60914:	00000206 	br	60920 <__sfp+0x68>
   60918:	18bfe60f 	ldh	r2,-104(r3)
   6091c:	10000826 	beq	r2,zero,60940 <__sfp+0x88>
   60920:	213fffc4 	addi	r4,r4,-1
   60924:	1c3ffd04 	addi	r16,r3,-12
   60928:	18c01a04 	addi	r3,r3,104
   6092c:	247ffa1e 	bne	r4,r17,60918 <__sfp+0x60>
   60930:	90800017 	ldw	r2,0(r18)
   60934:	10001d26 	beq	r2,zero,609ac <__sfp+0xf4>
   60938:	1025883a 	mov	r18,r2
   6093c:	003fee06 	br	608f8 <__sfp+0x40>
   60940:	00bfffc4 	movi	r2,-1
   60944:	8080038d 	sth	r2,14(r16)
   60948:	00800044 	movi	r2,1
   6094c:	8080030d 	sth	r2,12(r16)
   60950:	80001915 	stw	zero,100(r16)
   60954:	80000015 	stw	zero,0(r16)
   60958:	80000215 	stw	zero,8(r16)
   6095c:	80000115 	stw	zero,4(r16)
   60960:	80000415 	stw	zero,16(r16)
   60964:	80000515 	stw	zero,20(r16)
   60968:	80000615 	stw	zero,24(r16)
   6096c:	01800204 	movi	r6,8
   60970:	000b883a 	mov	r5,zero
   60974:	81001704 	addi	r4,r16,92
   60978:	0061c1c0 	call	61c1c <memset>
   6097c:	8005883a 	mov	r2,r16
   60980:	80000c15 	stw	zero,48(r16)
   60984:	80000d15 	stw	zero,52(r16)
   60988:	80001115 	stw	zero,68(r16)
   6098c:	80001215 	stw	zero,72(r16)
   60990:	dfc00417 	ldw	ra,16(sp)
   60994:	dcc00317 	ldw	r19,12(sp)
   60998:	dc800217 	ldw	r18,8(sp)
   6099c:	dc400117 	ldw	r17,4(sp)
   609a0:	dc000017 	ldw	r16,0(sp)
   609a4:	dec00504 	addi	sp,sp,20
   609a8:	f800283a 	ret
   609ac:	01400104 	movi	r5,4
   609b0:	9809883a 	mov	r4,r19
   609b4:	00608400 	call	60840 <__sfmoreglue>
   609b8:	90800015 	stw	r2,0(r18)
   609bc:	103fde1e 	bne	r2,zero,60938 <__sfp+0x80>
   609c0:	00800304 	movi	r2,12
   609c4:	98800015 	stw	r2,0(r19)
   609c8:	0005883a 	mov	r2,zero
   609cc:	003ff006 	br	60990 <__sfp+0xd8>

000609d0 <_cleanup>:
   609d0:	00800134 	movhi	r2,4
   609d4:	1086a204 	addi	r2,r2,6792
   609d8:	11000017 	ldw	r4,0(r2)
   609dc:	014001b4 	movhi	r5,6
   609e0:	29499004 	addi	r5,r5,9792
   609e4:	0060fc41 	jmpi	60fc4 <_fwalk_reent>

000609e8 <__sinit>:
   609e8:	20800e17 	ldw	r2,56(r4)
   609ec:	10000126 	beq	r2,zero,609f4 <__sinit+0xc>
   609f0:	f800283a 	ret
   609f4:	006069c1 	jmpi	6069c <__sinit.part.1>

000609f8 <__sfp_lock_acquire>:
   609f8:	f800283a 	ret

000609fc <__sfp_lock_release>:
   609fc:	f800283a 	ret

00060a00 <__sinit_lock_acquire>:
   60a00:	f800283a 	ret

00060a04 <__sinit_lock_release>:
   60a04:	f800283a 	ret

00060a08 <__fp_lock_all>:
   60a08:	00800134 	movhi	r2,4
   60a0c:	1086a304 	addi	r2,r2,6796
   60a10:	11000017 	ldw	r4,0(r2)
   60a14:	014001b4 	movhi	r5,6
   60a18:	29420e04 	addi	r5,r5,2104
   60a1c:	0060f001 	jmpi	60f00 <_fwalk>

00060a20 <__fp_unlock_all>:
   60a20:	00800134 	movhi	r2,4
   60a24:	1086a304 	addi	r2,r2,6796
   60a28:	11000017 	ldw	r4,0(r2)
   60a2c:	014001b4 	movhi	r5,6
   60a30:	2941a204 	addi	r5,r5,1672
   60a34:	0060f001 	jmpi	60f00 <_fwalk>

00060a38 <__sfvwrite_r>:
   60a38:	30800217 	ldw	r2,8(r6)
   60a3c:	10006726 	beq	r2,zero,60bdc <__sfvwrite_r+0x1a4>
   60a40:	28c0030b 	ldhu	r3,12(r5)
   60a44:	defff404 	addi	sp,sp,-48
   60a48:	dd400715 	stw	r21,28(sp)
   60a4c:	dd000615 	stw	r20,24(sp)
   60a50:	dc000215 	stw	r16,8(sp)
   60a54:	dfc00b15 	stw	ra,44(sp)
   60a58:	df000a15 	stw	fp,40(sp)
   60a5c:	ddc00915 	stw	r23,36(sp)
   60a60:	dd800815 	stw	r22,32(sp)
   60a64:	dcc00515 	stw	r19,20(sp)
   60a68:	dc800415 	stw	r18,16(sp)
   60a6c:	dc400315 	stw	r17,12(sp)
   60a70:	1880020c 	andi	r2,r3,8
   60a74:	2821883a 	mov	r16,r5
   60a78:	202b883a 	mov	r21,r4
   60a7c:	3029883a 	mov	r20,r6
   60a80:	10002726 	beq	r2,zero,60b20 <__sfvwrite_r+0xe8>
   60a84:	28800417 	ldw	r2,16(r5)
   60a88:	10002526 	beq	r2,zero,60b20 <__sfvwrite_r+0xe8>
   60a8c:	1880008c 	andi	r2,r3,2
   60a90:	a4400017 	ldw	r17,0(r20)
   60a94:	10002a26 	beq	r2,zero,60b40 <__sfvwrite_r+0x108>
   60a98:	05a00034 	movhi	r22,32768
   60a9c:	0027883a 	mov	r19,zero
   60aa0:	0025883a 	mov	r18,zero
   60aa4:	b5bf0004 	addi	r22,r22,-1024
   60aa8:	980d883a 	mov	r6,r19
   60aac:	a809883a 	mov	r4,r21
   60ab0:	90004626 	beq	r18,zero,60bcc <__sfvwrite_r+0x194>
   60ab4:	900f883a 	mov	r7,r18
   60ab8:	b480022e 	bgeu	r22,r18,60ac4 <__sfvwrite_r+0x8c>
   60abc:	01e00034 	movhi	r7,32768
   60ac0:	39ff0004 	addi	r7,r7,-1024
   60ac4:	80800917 	ldw	r2,36(r16)
   60ac8:	81400717 	ldw	r5,28(r16)
   60acc:	103ee83a 	callr	r2
   60ad0:	00805a0e 	bge	zero,r2,60c3c <__sfvwrite_r+0x204>
   60ad4:	a0c00217 	ldw	r3,8(r20)
   60ad8:	98a7883a 	add	r19,r19,r2
   60adc:	90a5c83a 	sub	r18,r18,r2
   60ae0:	1885c83a 	sub	r2,r3,r2
   60ae4:	a0800215 	stw	r2,8(r20)
   60ae8:	103fef1e 	bne	r2,zero,60aa8 <__sfvwrite_r+0x70>
   60aec:	0005883a 	mov	r2,zero
   60af0:	dfc00b17 	ldw	ra,44(sp)
   60af4:	df000a17 	ldw	fp,40(sp)
   60af8:	ddc00917 	ldw	r23,36(sp)
   60afc:	dd800817 	ldw	r22,32(sp)
   60b00:	dd400717 	ldw	r21,28(sp)
   60b04:	dd000617 	ldw	r20,24(sp)
   60b08:	dcc00517 	ldw	r19,20(sp)
   60b0c:	dc800417 	ldw	r18,16(sp)
   60b10:	dc400317 	ldw	r17,12(sp)
   60b14:	dc000217 	ldw	r16,8(sp)
   60b18:	dec00c04 	addi	sp,sp,48
   60b1c:	f800283a 	ret
   60b20:	800b883a 	mov	r5,r16
   60b24:	a809883a 	mov	r4,r21
   60b28:	00624980 	call	62498 <__swsetup_r>
   60b2c:	1000ee1e 	bne	r2,zero,60ee8 <__sfvwrite_r+0x4b0>
   60b30:	80c0030b 	ldhu	r3,12(r16)
   60b34:	a4400017 	ldw	r17,0(r20)
   60b38:	1880008c 	andi	r2,r3,2
   60b3c:	103fd61e 	bne	r2,zero,60a98 <__sfvwrite_r+0x60>
   60b40:	1880004c 	andi	r2,r3,1
   60b44:	1000421e 	bne	r2,zero,60c50 <__sfvwrite_r+0x218>
   60b48:	0039883a 	mov	fp,zero
   60b4c:	0025883a 	mov	r18,zero
   60b50:	90001a26 	beq	r18,zero,60bbc <__sfvwrite_r+0x184>
   60b54:	1880800c 	andi	r2,r3,512
   60b58:	84c00217 	ldw	r19,8(r16)
   60b5c:	10002126 	beq	r2,zero,60be4 <__sfvwrite_r+0x1ac>
   60b60:	982f883a 	mov	r23,r19
   60b64:	94c09636 	bltu	r18,r19,60dc0 <__sfvwrite_r+0x388>
   60b68:	1881200c 	andi	r2,r3,1152
   60b6c:	1000a11e 	bne	r2,zero,60df4 <__sfvwrite_r+0x3bc>
   60b70:	81000017 	ldw	r4,0(r16)
   60b74:	b80d883a 	mov	r6,r23
   60b78:	e00b883a 	mov	r5,fp
   60b7c:	0061ac00 	call	61ac0 <memmove>
   60b80:	80c00217 	ldw	r3,8(r16)
   60b84:	81000017 	ldw	r4,0(r16)
   60b88:	9005883a 	mov	r2,r18
   60b8c:	1ce7c83a 	sub	r19,r3,r19
   60b90:	25cf883a 	add	r7,r4,r23
   60b94:	84c00215 	stw	r19,8(r16)
   60b98:	81c00015 	stw	r7,0(r16)
   60b9c:	a0c00217 	ldw	r3,8(r20)
   60ba0:	e0b9883a 	add	fp,fp,r2
   60ba4:	90a5c83a 	sub	r18,r18,r2
   60ba8:	18a7c83a 	sub	r19,r3,r2
   60bac:	a4c00215 	stw	r19,8(r20)
   60bb0:	983fce26 	beq	r19,zero,60aec <__sfvwrite_r+0xb4>
   60bb4:	80c0030b 	ldhu	r3,12(r16)
   60bb8:	903fe61e 	bne	r18,zero,60b54 <__sfvwrite_r+0x11c>
   60bbc:	8f000017 	ldw	fp,0(r17)
   60bc0:	8c800117 	ldw	r18,4(r17)
   60bc4:	8c400204 	addi	r17,r17,8
   60bc8:	003fe106 	br	60b50 <__sfvwrite_r+0x118>
   60bcc:	8cc00017 	ldw	r19,0(r17)
   60bd0:	8c800117 	ldw	r18,4(r17)
   60bd4:	8c400204 	addi	r17,r17,8
   60bd8:	003fb306 	br	60aa8 <__sfvwrite_r+0x70>
   60bdc:	0005883a 	mov	r2,zero
   60be0:	f800283a 	ret
   60be4:	81000017 	ldw	r4,0(r16)
   60be8:	80800417 	ldw	r2,16(r16)
   60bec:	11005a36 	bltu	r2,r4,60d58 <__sfvwrite_r+0x320>
   60bf0:	85c00517 	ldw	r23,20(r16)
   60bf4:	95c05836 	bltu	r18,r23,60d58 <__sfvwrite_r+0x320>
   60bf8:	00a00034 	movhi	r2,32768
   60bfc:	10bfffc4 	addi	r2,r2,-1
   60c00:	9009883a 	mov	r4,r18
   60c04:	1480012e 	bgeu	r2,r18,60c0c <__sfvwrite_r+0x1d4>
   60c08:	1009883a 	mov	r4,r2
   60c0c:	b80b883a 	mov	r5,r23
   60c10:	00603680 	call	60368 <__divsi3>
   60c14:	b80b883a 	mov	r5,r23
   60c18:	1009883a 	mov	r4,r2
   60c1c:	006314c0 	call	6314c <__mulsi3>
   60c20:	81400717 	ldw	r5,28(r16)
   60c24:	80c00917 	ldw	r3,36(r16)
   60c28:	100f883a 	mov	r7,r2
   60c2c:	e00d883a 	mov	r6,fp
   60c30:	a809883a 	mov	r4,r21
   60c34:	183ee83a 	callr	r3
   60c38:	00bfd816 	blt	zero,r2,60b9c <__sfvwrite_r+0x164>
   60c3c:	8080030b 	ldhu	r2,12(r16)
   60c40:	10801014 	ori	r2,r2,64
   60c44:	8080030d 	sth	r2,12(r16)
   60c48:	00bfffc4 	movi	r2,-1
   60c4c:	003fa806 	br	60af0 <__sfvwrite_r+0xb8>
   60c50:	0027883a 	mov	r19,zero
   60c54:	0011883a 	mov	r8,zero
   60c58:	0039883a 	mov	fp,zero
   60c5c:	0025883a 	mov	r18,zero
   60c60:	90001f26 	beq	r18,zero,60ce0 <__sfvwrite_r+0x2a8>
   60c64:	40005a26 	beq	r8,zero,60dd0 <__sfvwrite_r+0x398>
   60c68:	982d883a 	mov	r22,r19
   60c6c:	94c0012e 	bgeu	r18,r19,60c74 <__sfvwrite_r+0x23c>
   60c70:	902d883a 	mov	r22,r18
   60c74:	81000017 	ldw	r4,0(r16)
   60c78:	80800417 	ldw	r2,16(r16)
   60c7c:	b02f883a 	mov	r23,r22
   60c80:	81c00517 	ldw	r7,20(r16)
   60c84:	1100032e 	bgeu	r2,r4,60c94 <__sfvwrite_r+0x25c>
   60c88:	80c00217 	ldw	r3,8(r16)
   60c8c:	38c7883a 	add	r3,r7,r3
   60c90:	1d801816 	blt	r3,r22,60cf4 <__sfvwrite_r+0x2bc>
   60c94:	b1c03e16 	blt	r22,r7,60d90 <__sfvwrite_r+0x358>
   60c98:	80800917 	ldw	r2,36(r16)
   60c9c:	81400717 	ldw	r5,28(r16)
   60ca0:	e00d883a 	mov	r6,fp
   60ca4:	da000115 	stw	r8,4(sp)
   60ca8:	a809883a 	mov	r4,r21
   60cac:	103ee83a 	callr	r2
   60cb0:	102f883a 	mov	r23,r2
   60cb4:	da000117 	ldw	r8,4(sp)
   60cb8:	00bfe00e 	bge	zero,r2,60c3c <__sfvwrite_r+0x204>
   60cbc:	9de7c83a 	sub	r19,r19,r23
   60cc0:	98001f26 	beq	r19,zero,60d40 <__sfvwrite_r+0x308>
   60cc4:	a0800217 	ldw	r2,8(r20)
   60cc8:	e5f9883a 	add	fp,fp,r23
   60ccc:	95e5c83a 	sub	r18,r18,r23
   60cd0:	15efc83a 	sub	r23,r2,r23
   60cd4:	a5c00215 	stw	r23,8(r20)
   60cd8:	b83f8426 	beq	r23,zero,60aec <__sfvwrite_r+0xb4>
   60cdc:	903fe11e 	bne	r18,zero,60c64 <__sfvwrite_r+0x22c>
   60ce0:	8f000017 	ldw	fp,0(r17)
   60ce4:	8c800117 	ldw	r18,4(r17)
   60ce8:	0011883a 	mov	r8,zero
   60cec:	8c400204 	addi	r17,r17,8
   60cf0:	003fdb06 	br	60c60 <__sfvwrite_r+0x228>
   60cf4:	180d883a 	mov	r6,r3
   60cf8:	e00b883a 	mov	r5,fp
   60cfc:	da000115 	stw	r8,4(sp)
   60d00:	d8c00015 	stw	r3,0(sp)
   60d04:	0061ac00 	call	61ac0 <memmove>
   60d08:	d8c00017 	ldw	r3,0(sp)
   60d0c:	80800017 	ldw	r2,0(r16)
   60d10:	800b883a 	mov	r5,r16
   60d14:	a809883a 	mov	r4,r21
   60d18:	10c5883a 	add	r2,r2,r3
   60d1c:	80800015 	stw	r2,0(r16)
   60d20:	d8c00015 	stw	r3,0(sp)
   60d24:	00629600 	call	62960 <_fflush_r>
   60d28:	d8c00017 	ldw	r3,0(sp)
   60d2c:	da000117 	ldw	r8,4(sp)
   60d30:	103fc21e 	bne	r2,zero,60c3c <__sfvwrite_r+0x204>
   60d34:	182f883a 	mov	r23,r3
   60d38:	9de7c83a 	sub	r19,r19,r23
   60d3c:	983fe11e 	bne	r19,zero,60cc4 <__sfvwrite_r+0x28c>
   60d40:	800b883a 	mov	r5,r16
   60d44:	a809883a 	mov	r4,r21
   60d48:	00629600 	call	62960 <_fflush_r>
   60d4c:	103fbb1e 	bne	r2,zero,60c3c <__sfvwrite_r+0x204>
   60d50:	0011883a 	mov	r8,zero
   60d54:	003fdb06 	br	60cc4 <__sfvwrite_r+0x28c>
   60d58:	94c0012e 	bgeu	r18,r19,60d60 <__sfvwrite_r+0x328>
   60d5c:	9027883a 	mov	r19,r18
   60d60:	980d883a 	mov	r6,r19
   60d64:	e00b883a 	mov	r5,fp
   60d68:	0061ac00 	call	61ac0 <memmove>
   60d6c:	80800217 	ldw	r2,8(r16)
   60d70:	80c00017 	ldw	r3,0(r16)
   60d74:	14c5c83a 	sub	r2,r2,r19
   60d78:	1cc7883a 	add	r3,r3,r19
   60d7c:	80800215 	stw	r2,8(r16)
   60d80:	80c00015 	stw	r3,0(r16)
   60d84:	10004326 	beq	r2,zero,60e94 <__sfvwrite_r+0x45c>
   60d88:	9805883a 	mov	r2,r19
   60d8c:	003f8306 	br	60b9c <__sfvwrite_r+0x164>
   60d90:	b00d883a 	mov	r6,r22
   60d94:	e00b883a 	mov	r5,fp
   60d98:	da000115 	stw	r8,4(sp)
   60d9c:	0061ac00 	call	61ac0 <memmove>
   60da0:	80800217 	ldw	r2,8(r16)
   60da4:	80c00017 	ldw	r3,0(r16)
   60da8:	da000117 	ldw	r8,4(sp)
   60dac:	1585c83a 	sub	r2,r2,r22
   60db0:	1dad883a 	add	r22,r3,r22
   60db4:	80800215 	stw	r2,8(r16)
   60db8:	85800015 	stw	r22,0(r16)
   60dbc:	003fbf06 	br	60cbc <__sfvwrite_r+0x284>
   60dc0:	81000017 	ldw	r4,0(r16)
   60dc4:	9027883a 	mov	r19,r18
   60dc8:	902f883a 	mov	r23,r18
   60dcc:	003f6906 	br	60b74 <__sfvwrite_r+0x13c>
   60dd0:	900d883a 	mov	r6,r18
   60dd4:	01400284 	movi	r5,10
   60dd8:	e009883a 	mov	r4,fp
   60ddc:	00618940 	call	61894 <memchr>
   60de0:	10003e26 	beq	r2,zero,60edc <__sfvwrite_r+0x4a4>
   60de4:	10800044 	addi	r2,r2,1
   60de8:	1727c83a 	sub	r19,r2,fp
   60dec:	02000044 	movi	r8,1
   60df0:	003f9d06 	br	60c68 <__sfvwrite_r+0x230>
   60df4:	80800517 	ldw	r2,20(r16)
   60df8:	81400417 	ldw	r5,16(r16)
   60dfc:	81c00017 	ldw	r7,0(r16)
   60e00:	10a7883a 	add	r19,r2,r2
   60e04:	9885883a 	add	r2,r19,r2
   60e08:	1026d7fa 	srli	r19,r2,31
   60e0c:	396dc83a 	sub	r22,r7,r5
   60e10:	b1000044 	addi	r4,r22,1
   60e14:	9885883a 	add	r2,r19,r2
   60e18:	1027d07a 	srai	r19,r2,1
   60e1c:	2485883a 	add	r2,r4,r18
   60e20:	980d883a 	mov	r6,r19
   60e24:	9880022e 	bgeu	r19,r2,60e30 <__sfvwrite_r+0x3f8>
   60e28:	1027883a 	mov	r19,r2
   60e2c:	100d883a 	mov	r6,r2
   60e30:	18c1000c 	andi	r3,r3,1024
   60e34:	18001c26 	beq	r3,zero,60ea8 <__sfvwrite_r+0x470>
   60e38:	300b883a 	mov	r5,r6
   60e3c:	a809883a 	mov	r4,r21
   60e40:	00610880 	call	61088 <_malloc_r>
   60e44:	102f883a 	mov	r23,r2
   60e48:	10002926 	beq	r2,zero,60ef0 <__sfvwrite_r+0x4b8>
   60e4c:	81400417 	ldw	r5,16(r16)
   60e50:	b00d883a 	mov	r6,r22
   60e54:	1009883a 	mov	r4,r2
   60e58:	00619780 	call	61978 <memcpy>
   60e5c:	8080030b 	ldhu	r2,12(r16)
   60e60:	00fedfc4 	movi	r3,-1153
   60e64:	10c4703a 	and	r2,r2,r3
   60e68:	10802014 	ori	r2,r2,128
   60e6c:	8080030d 	sth	r2,12(r16)
   60e70:	bd89883a 	add	r4,r23,r22
   60e74:	9d8fc83a 	sub	r7,r19,r22
   60e78:	85c00415 	stw	r23,16(r16)
   60e7c:	84c00515 	stw	r19,20(r16)
   60e80:	81000015 	stw	r4,0(r16)
   60e84:	9027883a 	mov	r19,r18
   60e88:	81c00215 	stw	r7,8(r16)
   60e8c:	902f883a 	mov	r23,r18
   60e90:	003f3806 	br	60b74 <__sfvwrite_r+0x13c>
   60e94:	800b883a 	mov	r5,r16
   60e98:	a809883a 	mov	r4,r21
   60e9c:	00629600 	call	62960 <_fflush_r>
   60ea0:	103fb926 	beq	r2,zero,60d88 <__sfvwrite_r+0x350>
   60ea4:	003f6506 	br	60c3c <__sfvwrite_r+0x204>
   60ea8:	a809883a 	mov	r4,r21
   60eac:	0061d440 	call	61d44 <_realloc_r>
   60eb0:	102f883a 	mov	r23,r2
   60eb4:	103fee1e 	bne	r2,zero,60e70 <__sfvwrite_r+0x438>
   60eb8:	81400417 	ldw	r5,16(r16)
   60ebc:	a809883a 	mov	r4,r21
   60ec0:	0062b100 	call	62b10 <_free_r>
   60ec4:	8080030b 	ldhu	r2,12(r16)
   60ec8:	00ffdfc4 	movi	r3,-129
   60ecc:	1884703a 	and	r2,r3,r2
   60ed0:	00c00304 	movi	r3,12
   60ed4:	a8c00015 	stw	r3,0(r21)
   60ed8:	003f5906 	br	60c40 <__sfvwrite_r+0x208>
   60edc:	94c00044 	addi	r19,r18,1
   60ee0:	02000044 	movi	r8,1
   60ee4:	003f6006 	br	60c68 <__sfvwrite_r+0x230>
   60ee8:	00bfffc4 	movi	r2,-1
   60eec:	003f0006 	br	60af0 <__sfvwrite_r+0xb8>
   60ef0:	00800304 	movi	r2,12
   60ef4:	a8800015 	stw	r2,0(r21)
   60ef8:	8080030b 	ldhu	r2,12(r16)
   60efc:	003f5006 	br	60c40 <__sfvwrite_r+0x208>

00060f00 <_fwalk>:
   60f00:	defff704 	addi	sp,sp,-36
   60f04:	dd000415 	stw	r20,16(sp)
   60f08:	dfc00815 	stw	ra,32(sp)
   60f0c:	ddc00715 	stw	r23,28(sp)
   60f10:	dd800615 	stw	r22,24(sp)
   60f14:	dd400515 	stw	r21,20(sp)
   60f18:	dcc00315 	stw	r19,12(sp)
   60f1c:	dc800215 	stw	r18,8(sp)
   60f20:	dc400115 	stw	r17,4(sp)
   60f24:	dc000015 	stw	r16,0(sp)
   60f28:	2500b804 	addi	r20,r4,736
   60f2c:	a0002326 	beq	r20,zero,60fbc <_fwalk+0xbc>
   60f30:	282b883a 	mov	r21,r5
   60f34:	002f883a 	mov	r23,zero
   60f38:	05800044 	movi	r22,1
   60f3c:	04ffffc4 	movi	r19,-1
   60f40:	a4400117 	ldw	r17,4(r20)
   60f44:	a4800217 	ldw	r18,8(r20)
   60f48:	8c7fffc4 	addi	r17,r17,-1
   60f4c:	88000d16 	blt	r17,zero,60f84 <_fwalk+0x84>
   60f50:	94000304 	addi	r16,r18,12
   60f54:	94800384 	addi	r18,r18,14
   60f58:	8080000b 	ldhu	r2,0(r16)
   60f5c:	8c7fffc4 	addi	r17,r17,-1
   60f60:	813ffd04 	addi	r4,r16,-12
   60f64:	b080042e 	bgeu	r22,r2,60f78 <_fwalk+0x78>
   60f68:	9080000f 	ldh	r2,0(r18)
   60f6c:	14c00226 	beq	r2,r19,60f78 <_fwalk+0x78>
   60f70:	a83ee83a 	callr	r21
   60f74:	b8aeb03a 	or	r23,r23,r2
   60f78:	84001a04 	addi	r16,r16,104
   60f7c:	94801a04 	addi	r18,r18,104
   60f80:	8cfff51e 	bne	r17,r19,60f58 <_fwalk+0x58>
   60f84:	a5000017 	ldw	r20,0(r20)
   60f88:	a03fed1e 	bne	r20,zero,60f40 <_fwalk+0x40>
   60f8c:	b805883a 	mov	r2,r23
   60f90:	dfc00817 	ldw	ra,32(sp)
   60f94:	ddc00717 	ldw	r23,28(sp)
   60f98:	dd800617 	ldw	r22,24(sp)
   60f9c:	dd400517 	ldw	r21,20(sp)
   60fa0:	dd000417 	ldw	r20,16(sp)
   60fa4:	dcc00317 	ldw	r19,12(sp)
   60fa8:	dc800217 	ldw	r18,8(sp)
   60fac:	dc400117 	ldw	r17,4(sp)
   60fb0:	dc000017 	ldw	r16,0(sp)
   60fb4:	dec00904 	addi	sp,sp,36
   60fb8:	f800283a 	ret
   60fbc:	002f883a 	mov	r23,zero
   60fc0:	003ff206 	br	60f8c <_fwalk+0x8c>

00060fc4 <_fwalk_reent>:
   60fc4:	defff704 	addi	sp,sp,-36
   60fc8:	dd000415 	stw	r20,16(sp)
   60fcc:	dfc00815 	stw	ra,32(sp)
   60fd0:	ddc00715 	stw	r23,28(sp)
   60fd4:	dd800615 	stw	r22,24(sp)
   60fd8:	dd400515 	stw	r21,20(sp)
   60fdc:	dcc00315 	stw	r19,12(sp)
   60fe0:	dc800215 	stw	r18,8(sp)
   60fe4:	dc400115 	stw	r17,4(sp)
   60fe8:	dc000015 	stw	r16,0(sp)
   60fec:	2500b804 	addi	r20,r4,736
   60ff0:	a0002326 	beq	r20,zero,61080 <_fwalk_reent+0xbc>
   60ff4:	282b883a 	mov	r21,r5
   60ff8:	2027883a 	mov	r19,r4
   60ffc:	002f883a 	mov	r23,zero
   61000:	05800044 	movi	r22,1
   61004:	04bfffc4 	movi	r18,-1
   61008:	a4400117 	ldw	r17,4(r20)
   6100c:	a4000217 	ldw	r16,8(r20)
   61010:	8c7fffc4 	addi	r17,r17,-1
   61014:	88000c16 	blt	r17,zero,61048 <_fwalk_reent+0x84>
   61018:	84000304 	addi	r16,r16,12
   6101c:	8080000b 	ldhu	r2,0(r16)
   61020:	8c7fffc4 	addi	r17,r17,-1
   61024:	817ffd04 	addi	r5,r16,-12
   61028:	b080052e 	bgeu	r22,r2,61040 <_fwalk_reent+0x7c>
   6102c:	8080008f 	ldh	r2,2(r16)
   61030:	9809883a 	mov	r4,r19
   61034:	14800226 	beq	r2,r18,61040 <_fwalk_reent+0x7c>
   61038:	a83ee83a 	callr	r21
   6103c:	b8aeb03a 	or	r23,r23,r2
   61040:	84001a04 	addi	r16,r16,104
   61044:	8cbff51e 	bne	r17,r18,6101c <_fwalk_reent+0x58>
   61048:	a5000017 	ldw	r20,0(r20)
   6104c:	a03fee1e 	bne	r20,zero,61008 <_fwalk_reent+0x44>
   61050:	b805883a 	mov	r2,r23
   61054:	dfc00817 	ldw	ra,32(sp)
   61058:	ddc00717 	ldw	r23,28(sp)
   6105c:	dd800617 	ldw	r22,24(sp)
   61060:	dd400517 	ldw	r21,20(sp)
   61064:	dd000417 	ldw	r20,16(sp)
   61068:	dcc00317 	ldw	r19,12(sp)
   6106c:	dc800217 	ldw	r18,8(sp)
   61070:	dc400117 	ldw	r17,4(sp)
   61074:	dc000017 	ldw	r16,0(sp)
   61078:	dec00904 	addi	sp,sp,36
   6107c:	f800283a 	ret
   61080:	002f883a 	mov	r23,zero
   61084:	003ff206 	br	61050 <_fwalk_reent+0x8c>

00061088 <_malloc_r>:
   61088:	defff504 	addi	sp,sp,-44
   6108c:	dc800315 	stw	r18,12(sp)
   61090:	dfc00a15 	stw	ra,40(sp)
   61094:	df000915 	stw	fp,36(sp)
   61098:	ddc00815 	stw	r23,32(sp)
   6109c:	dd800715 	stw	r22,28(sp)
   610a0:	dd400615 	stw	r21,24(sp)
   610a4:	dd000515 	stw	r20,20(sp)
   610a8:	dcc00415 	stw	r19,16(sp)
   610ac:	dc400215 	stw	r17,8(sp)
   610b0:	dc000115 	stw	r16,4(sp)
   610b4:	288002c4 	addi	r2,r5,11
   610b8:	00c00584 	movi	r3,22
   610bc:	2025883a 	mov	r18,r4
   610c0:	18807f2e 	bgeu	r3,r2,612c0 <_malloc_r+0x238>
   610c4:	047ffe04 	movi	r17,-8
   610c8:	1462703a 	and	r17,r2,r17
   610cc:	8800a316 	blt	r17,zero,6135c <_malloc_r+0x2d4>
   610d0:	8940a236 	bltu	r17,r5,6135c <_malloc_r+0x2d4>
   610d4:	00638900 	call	63890 <__malloc_lock>
   610d8:	00807dc4 	movi	r2,503
   610dc:	1441e92e 	bgeu	r2,r17,61884 <_malloc_r+0x7fc>
   610e0:	8804d27a 	srli	r2,r17,9
   610e4:	1000a126 	beq	r2,zero,6136c <_malloc_r+0x2e4>
   610e8:	00c00104 	movi	r3,4
   610ec:	18811e36 	bltu	r3,r2,61568 <_malloc_r+0x4e0>
   610f0:	8804d1ba 	srli	r2,r17,6
   610f4:	12000e44 	addi	r8,r2,57
   610f8:	11c00e04 	addi	r7,r2,56
   610fc:	4209883a 	add	r4,r8,r8
   61100:	04c00134 	movhi	r19,4
   61104:	2109883a 	add	r4,r4,r4
   61108:	9cc11c04 	addi	r19,r19,1136
   6110c:	2109883a 	add	r4,r4,r4
   61110:	9909883a 	add	r4,r19,r4
   61114:	24000117 	ldw	r16,4(r4)
   61118:	213ffe04 	addi	r4,r4,-8
   6111c:	24009726 	beq	r4,r16,6137c <_malloc_r+0x2f4>
   61120:	80800117 	ldw	r2,4(r16)
   61124:	01bfff04 	movi	r6,-4
   61128:	014003c4 	movi	r5,15
   6112c:	1184703a 	and	r2,r2,r6
   61130:	1447c83a 	sub	r3,r2,r17
   61134:	28c00716 	blt	r5,r3,61154 <_malloc_r+0xcc>
   61138:	1800920e 	bge	r3,zero,61384 <_malloc_r+0x2fc>
   6113c:	84000317 	ldw	r16,12(r16)
   61140:	24008e26 	beq	r4,r16,6137c <_malloc_r+0x2f4>
   61144:	80800117 	ldw	r2,4(r16)
   61148:	1184703a 	and	r2,r2,r6
   6114c:	1447c83a 	sub	r3,r2,r17
   61150:	28fff90e 	bge	r5,r3,61138 <_malloc_r+0xb0>
   61154:	3809883a 	mov	r4,r7
   61158:	01800134 	movhi	r6,4
   6115c:	9c000417 	ldw	r16,16(r19)
   61160:	31811c04 	addi	r6,r6,1136
   61164:	32000204 	addi	r8,r6,8
   61168:	82013426 	beq	r16,r8,6163c <_malloc_r+0x5b4>
   6116c:	80c00117 	ldw	r3,4(r16)
   61170:	00bfff04 	movi	r2,-4
   61174:	188e703a 	and	r7,r3,r2
   61178:	3c45c83a 	sub	r2,r7,r17
   6117c:	00c003c4 	movi	r3,15
   61180:	18811f16 	blt	r3,r2,61600 <_malloc_r+0x578>
   61184:	32000515 	stw	r8,20(r6)
   61188:	32000415 	stw	r8,16(r6)
   6118c:	10007f0e 	bge	r2,zero,6138c <_malloc_r+0x304>
   61190:	00807fc4 	movi	r2,511
   61194:	11c0fd36 	bltu	r2,r7,6158c <_malloc_r+0x504>
   61198:	3806d0fa 	srli	r3,r7,3
   6119c:	01c00044 	movi	r7,1
   611a0:	30800117 	ldw	r2,4(r6)
   611a4:	19400044 	addi	r5,r3,1
   611a8:	294b883a 	add	r5,r5,r5
   611ac:	1807d0ba 	srai	r3,r3,2
   611b0:	294b883a 	add	r5,r5,r5
   611b4:	294b883a 	add	r5,r5,r5
   611b8:	298b883a 	add	r5,r5,r6
   611bc:	38c6983a 	sll	r3,r7,r3
   611c0:	29c00017 	ldw	r7,0(r5)
   611c4:	2a7ffe04 	addi	r9,r5,-8
   611c8:	1886b03a 	or	r3,r3,r2
   611cc:	82400315 	stw	r9,12(r16)
   611d0:	81c00215 	stw	r7,8(r16)
   611d4:	30c00115 	stw	r3,4(r6)
   611d8:	2c000015 	stw	r16,0(r5)
   611dc:	3c000315 	stw	r16,12(r7)
   611e0:	2005d0ba 	srai	r2,r4,2
   611e4:	01400044 	movi	r5,1
   611e8:	288a983a 	sll	r5,r5,r2
   611ec:	19406f36 	bltu	r3,r5,613ac <_malloc_r+0x324>
   611f0:	28c4703a 	and	r2,r5,r3
   611f4:	10000a1e 	bne	r2,zero,61220 <_malloc_r+0x198>
   611f8:	00bfff04 	movi	r2,-4
   611fc:	294b883a 	add	r5,r5,r5
   61200:	2088703a 	and	r4,r4,r2
   61204:	28c4703a 	and	r2,r5,r3
   61208:	21000104 	addi	r4,r4,4
   6120c:	1000041e 	bne	r2,zero,61220 <_malloc_r+0x198>
   61210:	294b883a 	add	r5,r5,r5
   61214:	28c4703a 	and	r2,r5,r3
   61218:	21000104 	addi	r4,r4,4
   6121c:	103ffc26 	beq	r2,zero,61210 <_malloc_r+0x188>
   61220:	02bfff04 	movi	r10,-4
   61224:	024003c4 	movi	r9,15
   61228:	21800044 	addi	r6,r4,1
   6122c:	318d883a 	add	r6,r6,r6
   61230:	318d883a 	add	r6,r6,r6
   61234:	318d883a 	add	r6,r6,r6
   61238:	998d883a 	add	r6,r19,r6
   6123c:	333ffe04 	addi	r12,r6,-8
   61240:	2017883a 	mov	r11,r4
   61244:	31800104 	addi	r6,r6,4
   61248:	34000017 	ldw	r16,0(r6)
   6124c:	31fffd04 	addi	r7,r6,-12
   61250:	81c0041e 	bne	r16,r7,61264 <_malloc_r+0x1dc>
   61254:	0000fb06 	br	61644 <_malloc_r+0x5bc>
   61258:	1801030e 	bge	r3,zero,61668 <_malloc_r+0x5e0>
   6125c:	84000317 	ldw	r16,12(r16)
   61260:	81c0f826 	beq	r16,r7,61644 <_malloc_r+0x5bc>
   61264:	80800117 	ldw	r2,4(r16)
   61268:	1284703a 	and	r2,r2,r10
   6126c:	1447c83a 	sub	r3,r2,r17
   61270:	48fff90e 	bge	r9,r3,61258 <_malloc_r+0x1d0>
   61274:	80800317 	ldw	r2,12(r16)
   61278:	81000217 	ldw	r4,8(r16)
   6127c:	89400054 	ori	r5,r17,1
   61280:	81400115 	stw	r5,4(r16)
   61284:	20800315 	stw	r2,12(r4)
   61288:	11000215 	stw	r4,8(r2)
   6128c:	8463883a 	add	r17,r16,r17
   61290:	9c400515 	stw	r17,20(r19)
   61294:	9c400415 	stw	r17,16(r19)
   61298:	18800054 	ori	r2,r3,1
   6129c:	88800115 	stw	r2,4(r17)
   612a0:	8a000315 	stw	r8,12(r17)
   612a4:	8a000215 	stw	r8,8(r17)
   612a8:	88e3883a 	add	r17,r17,r3
   612ac:	88c00015 	stw	r3,0(r17)
   612b0:	9009883a 	mov	r4,r18
   612b4:	00638b40 	call	638b4 <__malloc_unlock>
   612b8:	80800204 	addi	r2,r16,8
   612bc:	00001b06 	br	6132c <_malloc_r+0x2a4>
   612c0:	04400404 	movi	r17,16
   612c4:	89402536 	bltu	r17,r5,6135c <_malloc_r+0x2d4>
   612c8:	00638900 	call	63890 <__malloc_lock>
   612cc:	00800184 	movi	r2,6
   612d0:	01000084 	movi	r4,2
   612d4:	04c00134 	movhi	r19,4
   612d8:	1085883a 	add	r2,r2,r2
   612dc:	9cc11c04 	addi	r19,r19,1136
   612e0:	1085883a 	add	r2,r2,r2
   612e4:	9885883a 	add	r2,r19,r2
   612e8:	14000117 	ldw	r16,4(r2)
   612ec:	10fffe04 	addi	r3,r2,-8
   612f0:	80c0d926 	beq	r16,r3,61658 <_malloc_r+0x5d0>
   612f4:	80c00117 	ldw	r3,4(r16)
   612f8:	81000317 	ldw	r4,12(r16)
   612fc:	00bfff04 	movi	r2,-4
   61300:	1884703a 	and	r2,r3,r2
   61304:	81400217 	ldw	r5,8(r16)
   61308:	8085883a 	add	r2,r16,r2
   6130c:	10c00117 	ldw	r3,4(r2)
   61310:	29000315 	stw	r4,12(r5)
   61314:	21400215 	stw	r5,8(r4)
   61318:	18c00054 	ori	r3,r3,1
   6131c:	10c00115 	stw	r3,4(r2)
   61320:	9009883a 	mov	r4,r18
   61324:	00638b40 	call	638b4 <__malloc_unlock>
   61328:	80800204 	addi	r2,r16,8
   6132c:	dfc00a17 	ldw	ra,40(sp)
   61330:	df000917 	ldw	fp,36(sp)
   61334:	ddc00817 	ldw	r23,32(sp)
   61338:	dd800717 	ldw	r22,28(sp)
   6133c:	dd400617 	ldw	r21,24(sp)
   61340:	dd000517 	ldw	r20,20(sp)
   61344:	dcc00417 	ldw	r19,16(sp)
   61348:	dc800317 	ldw	r18,12(sp)
   6134c:	dc400217 	ldw	r17,8(sp)
   61350:	dc000117 	ldw	r16,4(sp)
   61354:	dec00b04 	addi	sp,sp,44
   61358:	f800283a 	ret
   6135c:	00800304 	movi	r2,12
   61360:	90800015 	stw	r2,0(r18)
   61364:	0005883a 	mov	r2,zero
   61368:	003ff006 	br	6132c <_malloc_r+0x2a4>
   6136c:	01002004 	movi	r4,128
   61370:	02001004 	movi	r8,64
   61374:	01c00fc4 	movi	r7,63
   61378:	003f6106 	br	61100 <_malloc_r+0x78>
   6137c:	4009883a 	mov	r4,r8
   61380:	003f7506 	br	61158 <_malloc_r+0xd0>
   61384:	81000317 	ldw	r4,12(r16)
   61388:	003fde06 	br	61304 <_malloc_r+0x27c>
   6138c:	81c5883a 	add	r2,r16,r7
   61390:	11400117 	ldw	r5,4(r2)
   61394:	9009883a 	mov	r4,r18
   61398:	29400054 	ori	r5,r5,1
   6139c:	11400115 	stw	r5,4(r2)
   613a0:	00638b40 	call	638b4 <__malloc_unlock>
   613a4:	80800204 	addi	r2,r16,8
   613a8:	003fe006 	br	6132c <_malloc_r+0x2a4>
   613ac:	9c000217 	ldw	r16,8(r19)
   613b0:	00bfff04 	movi	r2,-4
   613b4:	85800117 	ldw	r22,4(r16)
   613b8:	b0ac703a 	and	r22,r22,r2
   613bc:	b4400336 	bltu	r22,r17,613cc <_malloc_r+0x344>
   613c0:	b445c83a 	sub	r2,r22,r17
   613c4:	00c003c4 	movi	r3,15
   613c8:	18805d16 	blt	r3,r2,61540 <_malloc_r+0x4b8>
   613cc:	05c00134 	movhi	r23,4
   613d0:	00800134 	movhi	r2,4
   613d4:	1086b504 	addi	r2,r2,6868
   613d8:	bdc6a404 	addi	r23,r23,6800
   613dc:	15400017 	ldw	r21,0(r2)
   613e0:	b8c00017 	ldw	r3,0(r23)
   613e4:	00bfffc4 	movi	r2,-1
   613e8:	858d883a 	add	r6,r16,r22
   613ec:	8d6b883a 	add	r21,r17,r21
   613f0:	1880ea26 	beq	r3,r2,6179c <_malloc_r+0x714>
   613f4:	ad4403c4 	addi	r21,r21,4111
   613f8:	00bc0004 	movi	r2,-4096
   613fc:	a8aa703a 	and	r21,r21,r2
   61400:	a80b883a 	mov	r5,r21
   61404:	9009883a 	mov	r4,r18
   61408:	d9800015 	stw	r6,0(sp)
   6140c:	00622a80 	call	622a8 <_sbrk_r>
   61410:	1029883a 	mov	r20,r2
   61414:	00bfffc4 	movi	r2,-1
   61418:	d9800017 	ldw	r6,0(sp)
   6141c:	a080e826 	beq	r20,r2,617c0 <_malloc_r+0x738>
   61420:	a180a636 	bltu	r20,r6,616bc <_malloc_r+0x634>
   61424:	07000134 	movhi	fp,4
   61428:	e706be04 	addi	fp,fp,6904
   6142c:	e0800017 	ldw	r2,0(fp)
   61430:	a887883a 	add	r3,r21,r2
   61434:	e0c00015 	stw	r3,0(fp)
   61438:	3500e626 	beq	r6,r20,617d4 <_malloc_r+0x74c>
   6143c:	b9000017 	ldw	r4,0(r23)
   61440:	00bfffc4 	movi	r2,-1
   61444:	2080ee26 	beq	r4,r2,61800 <_malloc_r+0x778>
   61448:	a185c83a 	sub	r2,r20,r6
   6144c:	10c5883a 	add	r2,r2,r3
   61450:	e0800015 	stw	r2,0(fp)
   61454:	a0c001cc 	andi	r3,r20,7
   61458:	1800bc26 	beq	r3,zero,6174c <_malloc_r+0x6c4>
   6145c:	a0e9c83a 	sub	r20,r20,r3
   61460:	00840204 	movi	r2,4104
   61464:	a5000204 	addi	r20,r20,8
   61468:	10c7c83a 	sub	r3,r2,r3
   6146c:	a545883a 	add	r2,r20,r21
   61470:	1083ffcc 	andi	r2,r2,4095
   61474:	18abc83a 	sub	r21,r3,r2
   61478:	a80b883a 	mov	r5,r21
   6147c:	9009883a 	mov	r4,r18
   61480:	00622a80 	call	622a8 <_sbrk_r>
   61484:	00ffffc4 	movi	r3,-1
   61488:	10c0e126 	beq	r2,r3,61810 <_malloc_r+0x788>
   6148c:	1505c83a 	sub	r2,r2,r20
   61490:	1545883a 	add	r2,r2,r21
   61494:	10800054 	ori	r2,r2,1
   61498:	e0c00017 	ldw	r3,0(fp)
   6149c:	9d000215 	stw	r20,8(r19)
   614a0:	a0800115 	stw	r2,4(r20)
   614a4:	a8c7883a 	add	r3,r21,r3
   614a8:	e0c00015 	stw	r3,0(fp)
   614ac:	84c00e26 	beq	r16,r19,614e8 <_malloc_r+0x460>
   614b0:	018003c4 	movi	r6,15
   614b4:	3580a72e 	bgeu	r6,r22,61754 <_malloc_r+0x6cc>
   614b8:	81400117 	ldw	r5,4(r16)
   614bc:	013ffe04 	movi	r4,-8
   614c0:	b0bffd04 	addi	r2,r22,-12
   614c4:	1104703a 	and	r2,r2,r4
   614c8:	2900004c 	andi	r4,r5,1
   614cc:	2088b03a 	or	r4,r4,r2
   614d0:	81000115 	stw	r4,4(r16)
   614d4:	01400144 	movi	r5,5
   614d8:	8089883a 	add	r4,r16,r2
   614dc:	21400115 	stw	r5,4(r4)
   614e0:	21400215 	stw	r5,8(r4)
   614e4:	3080cd36 	bltu	r6,r2,6181c <_malloc_r+0x794>
   614e8:	00800134 	movhi	r2,4
   614ec:	1086b404 	addi	r2,r2,6864
   614f0:	11000017 	ldw	r4,0(r2)
   614f4:	20c0012e 	bgeu	r4,r3,614fc <_malloc_r+0x474>
   614f8:	10c00015 	stw	r3,0(r2)
   614fc:	00800134 	movhi	r2,4
   61500:	1086b304 	addi	r2,r2,6860
   61504:	11000017 	ldw	r4,0(r2)
   61508:	9c000217 	ldw	r16,8(r19)
   6150c:	20c0012e 	bgeu	r4,r3,61514 <_malloc_r+0x48c>
   61510:	10c00015 	stw	r3,0(r2)
   61514:	80c00117 	ldw	r3,4(r16)
   61518:	00bfff04 	movi	r2,-4
   6151c:	1886703a 	and	r3,r3,r2
   61520:	1c45c83a 	sub	r2,r3,r17
   61524:	1c400236 	bltu	r3,r17,61530 <_malloc_r+0x4a8>
   61528:	00c003c4 	movi	r3,15
   6152c:	18800416 	blt	r3,r2,61540 <_malloc_r+0x4b8>
   61530:	9009883a 	mov	r4,r18
   61534:	00638b40 	call	638b4 <__malloc_unlock>
   61538:	0005883a 	mov	r2,zero
   6153c:	003f7b06 	br	6132c <_malloc_r+0x2a4>
   61540:	88c00054 	ori	r3,r17,1
   61544:	80c00115 	stw	r3,4(r16)
   61548:	8463883a 	add	r17,r16,r17
   6154c:	10800054 	ori	r2,r2,1
   61550:	9c400215 	stw	r17,8(r19)
   61554:	88800115 	stw	r2,4(r17)
   61558:	9009883a 	mov	r4,r18
   6155c:	00638b40 	call	638b4 <__malloc_unlock>
   61560:	80800204 	addi	r2,r16,8
   61564:	003f7106 	br	6132c <_malloc_r+0x2a4>
   61568:	00c00504 	movi	r3,20
   6156c:	18804a2e 	bgeu	r3,r2,61698 <_malloc_r+0x610>
   61570:	00c01504 	movi	r3,84
   61574:	18806e36 	bltu	r3,r2,61730 <_malloc_r+0x6a8>
   61578:	8804d33a 	srli	r2,r17,12
   6157c:	12001bc4 	addi	r8,r2,111
   61580:	11c01b84 	addi	r7,r2,110
   61584:	4209883a 	add	r4,r8,r8
   61588:	003edd06 	br	61100 <_malloc_r+0x78>
   6158c:	3804d27a 	srli	r2,r7,9
   61590:	00c00104 	movi	r3,4
   61594:	1880442e 	bgeu	r3,r2,616a8 <_malloc_r+0x620>
   61598:	00c00504 	movi	r3,20
   6159c:	18808136 	bltu	r3,r2,617a4 <_malloc_r+0x71c>
   615a0:	11401704 	addi	r5,r2,92
   615a4:	10c016c4 	addi	r3,r2,91
   615a8:	294b883a 	add	r5,r5,r5
   615ac:	294b883a 	add	r5,r5,r5
   615b0:	294b883a 	add	r5,r5,r5
   615b4:	994b883a 	add	r5,r19,r5
   615b8:	28800017 	ldw	r2,0(r5)
   615bc:	01800134 	movhi	r6,4
   615c0:	297ffe04 	addi	r5,r5,-8
   615c4:	31811c04 	addi	r6,r6,1136
   615c8:	28806526 	beq	r5,r2,61760 <_malloc_r+0x6d8>
   615cc:	01bfff04 	movi	r6,-4
   615d0:	10c00117 	ldw	r3,4(r2)
   615d4:	1986703a 	and	r3,r3,r6
   615d8:	38c0022e 	bgeu	r7,r3,615e4 <_malloc_r+0x55c>
   615dc:	10800217 	ldw	r2,8(r2)
   615e0:	28bffb1e 	bne	r5,r2,615d0 <_malloc_r+0x548>
   615e4:	11400317 	ldw	r5,12(r2)
   615e8:	98c00117 	ldw	r3,4(r19)
   615ec:	81400315 	stw	r5,12(r16)
   615f0:	80800215 	stw	r2,8(r16)
   615f4:	2c000215 	stw	r16,8(r5)
   615f8:	14000315 	stw	r16,12(r2)
   615fc:	003ef806 	br	611e0 <_malloc_r+0x158>
   61600:	88c00054 	ori	r3,r17,1
   61604:	80c00115 	stw	r3,4(r16)
   61608:	8463883a 	add	r17,r16,r17
   6160c:	34400515 	stw	r17,20(r6)
   61610:	34400415 	stw	r17,16(r6)
   61614:	10c00054 	ori	r3,r2,1
   61618:	8a000315 	stw	r8,12(r17)
   6161c:	8a000215 	stw	r8,8(r17)
   61620:	88c00115 	stw	r3,4(r17)
   61624:	88a3883a 	add	r17,r17,r2
   61628:	88800015 	stw	r2,0(r17)
   6162c:	9009883a 	mov	r4,r18
   61630:	00638b40 	call	638b4 <__malloc_unlock>
   61634:	80800204 	addi	r2,r16,8
   61638:	003f3c06 	br	6132c <_malloc_r+0x2a4>
   6163c:	30c00117 	ldw	r3,4(r6)
   61640:	003ee706 	br	611e0 <_malloc_r+0x158>
   61644:	5ac00044 	addi	r11,r11,1
   61648:	588000cc 	andi	r2,r11,3
   6164c:	31800204 	addi	r6,r6,8
   61650:	103efd1e 	bne	r2,zero,61248 <_malloc_r+0x1c0>
   61654:	00002406 	br	616e8 <_malloc_r+0x660>
   61658:	14000317 	ldw	r16,12(r2)
   6165c:	143f251e 	bne	r2,r16,612f4 <_malloc_r+0x26c>
   61660:	21000084 	addi	r4,r4,2
   61664:	003ebc06 	br	61158 <_malloc_r+0xd0>
   61668:	8085883a 	add	r2,r16,r2
   6166c:	10c00117 	ldw	r3,4(r2)
   61670:	81000317 	ldw	r4,12(r16)
   61674:	81400217 	ldw	r5,8(r16)
   61678:	18c00054 	ori	r3,r3,1
   6167c:	10c00115 	stw	r3,4(r2)
   61680:	29000315 	stw	r4,12(r5)
   61684:	21400215 	stw	r5,8(r4)
   61688:	9009883a 	mov	r4,r18
   6168c:	00638b40 	call	638b4 <__malloc_unlock>
   61690:	80800204 	addi	r2,r16,8
   61694:	003f2506 	br	6132c <_malloc_r+0x2a4>
   61698:	12001704 	addi	r8,r2,92
   6169c:	11c016c4 	addi	r7,r2,91
   616a0:	4209883a 	add	r4,r8,r8
   616a4:	003e9606 	br	61100 <_malloc_r+0x78>
   616a8:	3804d1ba 	srli	r2,r7,6
   616ac:	11400e44 	addi	r5,r2,57
   616b0:	10c00e04 	addi	r3,r2,56
   616b4:	294b883a 	add	r5,r5,r5
   616b8:	003fbc06 	br	615ac <_malloc_r+0x524>
   616bc:	84ff5926 	beq	r16,r19,61424 <_malloc_r+0x39c>
   616c0:	00800134 	movhi	r2,4
   616c4:	10811c04 	addi	r2,r2,1136
   616c8:	14000217 	ldw	r16,8(r2)
   616cc:	00bfff04 	movi	r2,-4
   616d0:	80c00117 	ldw	r3,4(r16)
   616d4:	1886703a 	and	r3,r3,r2
   616d8:	003f9106 	br	61520 <_malloc_r+0x498>
   616dc:	60800217 	ldw	r2,8(r12)
   616e0:	213fffc4 	addi	r4,r4,-1
   616e4:	1300651e 	bne	r2,r12,6187c <_malloc_r+0x7f4>
   616e8:	208000cc 	andi	r2,r4,3
   616ec:	633ffe04 	addi	r12,r12,-8
   616f0:	103ffa1e 	bne	r2,zero,616dc <_malloc_r+0x654>
   616f4:	98800117 	ldw	r2,4(r19)
   616f8:	0146303a 	nor	r3,zero,r5
   616fc:	1884703a 	and	r2,r3,r2
   61700:	98800115 	stw	r2,4(r19)
   61704:	294b883a 	add	r5,r5,r5
   61708:	117f2836 	bltu	r2,r5,613ac <_malloc_r+0x324>
   6170c:	283f2726 	beq	r5,zero,613ac <_malloc_r+0x324>
   61710:	2886703a 	and	r3,r5,r2
   61714:	5809883a 	mov	r4,r11
   61718:	183ec31e 	bne	r3,zero,61228 <_malloc_r+0x1a0>
   6171c:	294b883a 	add	r5,r5,r5
   61720:	2886703a 	and	r3,r5,r2
   61724:	21000104 	addi	r4,r4,4
   61728:	183ffc26 	beq	r3,zero,6171c <_malloc_r+0x694>
   6172c:	003ebe06 	br	61228 <_malloc_r+0x1a0>
   61730:	00c05504 	movi	r3,340
   61734:	18801236 	bltu	r3,r2,61780 <_malloc_r+0x6f8>
   61738:	8804d3fa 	srli	r2,r17,15
   6173c:	12001e04 	addi	r8,r2,120
   61740:	11c01dc4 	addi	r7,r2,119
   61744:	4209883a 	add	r4,r8,r8
   61748:	003e6d06 	br	61100 <_malloc_r+0x78>
   6174c:	00c40004 	movi	r3,4096
   61750:	003f4606 	br	6146c <_malloc_r+0x3e4>
   61754:	00800044 	movi	r2,1
   61758:	a0800115 	stw	r2,4(r20)
   6175c:	003f7406 	br	61530 <_malloc_r+0x4a8>
   61760:	1805d0ba 	srai	r2,r3,2
   61764:	01c00044 	movi	r7,1
   61768:	30c00117 	ldw	r3,4(r6)
   6176c:	388e983a 	sll	r7,r7,r2
   61770:	2805883a 	mov	r2,r5
   61774:	38c6b03a 	or	r3,r7,r3
   61778:	30c00115 	stw	r3,4(r6)
   6177c:	003f9b06 	br	615ec <_malloc_r+0x564>
   61780:	00c15504 	movi	r3,1364
   61784:	18801a36 	bltu	r3,r2,617f0 <_malloc_r+0x768>
   61788:	8804d4ba 	srli	r2,r17,18
   6178c:	12001f44 	addi	r8,r2,125
   61790:	11c01f04 	addi	r7,r2,124
   61794:	4209883a 	add	r4,r8,r8
   61798:	003e5906 	br	61100 <_malloc_r+0x78>
   6179c:	ad400404 	addi	r21,r21,16
   617a0:	003f1706 	br	61400 <_malloc_r+0x378>
   617a4:	00c01504 	movi	r3,84
   617a8:	18802336 	bltu	r3,r2,61838 <_malloc_r+0x7b0>
   617ac:	3804d33a 	srli	r2,r7,12
   617b0:	11401bc4 	addi	r5,r2,111
   617b4:	10c01b84 	addi	r3,r2,110
   617b8:	294b883a 	add	r5,r5,r5
   617bc:	003f7b06 	br	615ac <_malloc_r+0x524>
   617c0:	9c000217 	ldw	r16,8(r19)
   617c4:	00bfff04 	movi	r2,-4
   617c8:	80c00117 	ldw	r3,4(r16)
   617cc:	1886703a 	and	r3,r3,r2
   617d0:	003f5306 	br	61520 <_malloc_r+0x498>
   617d4:	3083ffcc 	andi	r2,r6,4095
   617d8:	103f181e 	bne	r2,zero,6143c <_malloc_r+0x3b4>
   617dc:	99000217 	ldw	r4,8(r19)
   617e0:	b545883a 	add	r2,r22,r21
   617e4:	10800054 	ori	r2,r2,1
   617e8:	20800115 	stw	r2,4(r4)
   617ec:	003f3e06 	br	614e8 <_malloc_r+0x460>
   617f0:	01003f84 	movi	r4,254
   617f4:	02001fc4 	movi	r8,127
   617f8:	01c01f84 	movi	r7,126
   617fc:	003e4006 	br	61100 <_malloc_r+0x78>
   61800:	00800134 	movhi	r2,4
   61804:	1086a404 	addi	r2,r2,6800
   61808:	15000015 	stw	r20,0(r2)
   6180c:	003f1106 	br	61454 <_malloc_r+0x3cc>
   61810:	00800044 	movi	r2,1
   61814:	002b883a 	mov	r21,zero
   61818:	003f1f06 	br	61498 <_malloc_r+0x410>
   6181c:	81400204 	addi	r5,r16,8
   61820:	9009883a 	mov	r4,r18
   61824:	0062b100 	call	62b10 <_free_r>
   61828:	00800134 	movhi	r2,4
   6182c:	1086be04 	addi	r2,r2,6904
   61830:	10c00017 	ldw	r3,0(r2)
   61834:	003f2c06 	br	614e8 <_malloc_r+0x460>
   61838:	00c05504 	movi	r3,340
   6183c:	18800536 	bltu	r3,r2,61854 <_malloc_r+0x7cc>
   61840:	3804d3fa 	srli	r2,r7,15
   61844:	11401e04 	addi	r5,r2,120
   61848:	10c01dc4 	addi	r3,r2,119
   6184c:	294b883a 	add	r5,r5,r5
   61850:	003f5606 	br	615ac <_malloc_r+0x524>
   61854:	00c15504 	movi	r3,1364
   61858:	18800536 	bltu	r3,r2,61870 <_malloc_r+0x7e8>
   6185c:	3804d4ba 	srli	r2,r7,18
   61860:	11401f44 	addi	r5,r2,125
   61864:	10c01f04 	addi	r3,r2,124
   61868:	294b883a 	add	r5,r5,r5
   6186c:	003f4f06 	br	615ac <_malloc_r+0x524>
   61870:	01403f84 	movi	r5,254
   61874:	00c01f84 	movi	r3,126
   61878:	003f4c06 	br	615ac <_malloc_r+0x524>
   6187c:	98800117 	ldw	r2,4(r19)
   61880:	003fa006 	br	61704 <_malloc_r+0x67c>
   61884:	8808d0fa 	srli	r4,r17,3
   61888:	20800044 	addi	r2,r4,1
   6188c:	1085883a 	add	r2,r2,r2
   61890:	003e9006 	br	612d4 <_malloc_r+0x24c>

00061894 <memchr>:
   61894:	208000cc 	andi	r2,r4,3
   61898:	280f883a 	mov	r7,r5
   6189c:	10003426 	beq	r2,zero,61970 <memchr+0xdc>
   618a0:	30bfffc4 	addi	r2,r6,-1
   618a4:	30001a26 	beq	r6,zero,61910 <memchr+0x7c>
   618a8:	20c00003 	ldbu	r3,0(r4)
   618ac:	29803fcc 	andi	r6,r5,255
   618b0:	30c0051e 	bne	r6,r3,618c8 <memchr+0x34>
   618b4:	00001806 	br	61918 <memchr+0x84>
   618b8:	10001526 	beq	r2,zero,61910 <memchr+0x7c>
   618bc:	20c00003 	ldbu	r3,0(r4)
   618c0:	10bfffc4 	addi	r2,r2,-1
   618c4:	30c01426 	beq	r6,r3,61918 <memchr+0x84>
   618c8:	21000044 	addi	r4,r4,1
   618cc:	20c000cc 	andi	r3,r4,3
   618d0:	183ff91e 	bne	r3,zero,618b8 <memchr+0x24>
   618d4:	020000c4 	movi	r8,3
   618d8:	40801136 	bltu	r8,r2,61920 <memchr+0x8c>
   618dc:	10000c26 	beq	r2,zero,61910 <memchr+0x7c>
   618e0:	20c00003 	ldbu	r3,0(r4)
   618e4:	29403fcc 	andi	r5,r5,255
   618e8:	28c00b26 	beq	r5,r3,61918 <memchr+0x84>
   618ec:	20c00044 	addi	r3,r4,1
   618f0:	39803fcc 	andi	r6,r7,255
   618f4:	2089883a 	add	r4,r4,r2
   618f8:	00000306 	br	61908 <memchr+0x74>
   618fc:	18c00044 	addi	r3,r3,1
   61900:	197fffc3 	ldbu	r5,-1(r3)
   61904:	31400526 	beq	r6,r5,6191c <memchr+0x88>
   61908:	1805883a 	mov	r2,r3
   6190c:	20fffb1e 	bne	r4,r3,618fc <memchr+0x68>
   61910:	0005883a 	mov	r2,zero
   61914:	f800283a 	ret
   61918:	2005883a 	mov	r2,r4
   6191c:	f800283a 	ret
   61920:	28c03fcc 	andi	r3,r5,255
   61924:	1812923a 	slli	r9,r3,8
   61928:	02ffbff4 	movhi	r11,65279
   6192c:	02a02074 	movhi	r10,32897
   61930:	48d2b03a 	or	r9,r9,r3
   61934:	4806943a 	slli	r3,r9,16
   61938:	5affbfc4 	addi	r11,r11,-257
   6193c:	52a02004 	addi	r10,r10,-32640
   61940:	48d2b03a 	or	r9,r9,r3
   61944:	20c00017 	ldw	r3,0(r4)
   61948:	48c6f03a 	xor	r3,r9,r3
   6194c:	1acd883a 	add	r6,r3,r11
   61950:	00c6303a 	nor	r3,zero,r3
   61954:	30c6703a 	and	r3,r6,r3
   61958:	1a86703a 	and	r3,r3,r10
   6195c:	183fe01e 	bne	r3,zero,618e0 <memchr+0x4c>
   61960:	10bfff04 	addi	r2,r2,-4
   61964:	21000104 	addi	r4,r4,4
   61968:	40bff636 	bltu	r8,r2,61944 <memchr+0xb0>
   6196c:	003fdb06 	br	618dc <memchr+0x48>
   61970:	3005883a 	mov	r2,r6
   61974:	003fd706 	br	618d4 <memchr+0x40>

00061978 <memcpy>:
   61978:	defffd04 	addi	sp,sp,-12
   6197c:	dfc00215 	stw	ra,8(sp)
   61980:	dc400115 	stw	r17,4(sp)
   61984:	dc000015 	stw	r16,0(sp)
   61988:	00c003c4 	movi	r3,15
   6198c:	2005883a 	mov	r2,r4
   61990:	1980452e 	bgeu	r3,r6,61aa8 <memcpy+0x130>
   61994:	2906b03a 	or	r3,r5,r4
   61998:	18c000cc 	andi	r3,r3,3
   6199c:	1800441e 	bne	r3,zero,61ab0 <memcpy+0x138>
   619a0:	347ffc04 	addi	r17,r6,-16
   619a4:	8822d13a 	srli	r17,r17,4
   619a8:	28c00104 	addi	r3,r5,4
   619ac:	23400104 	addi	r13,r4,4
   619b0:	8820913a 	slli	r16,r17,4
   619b4:	2b000204 	addi	r12,r5,8
   619b8:	22c00204 	addi	r11,r4,8
   619bc:	84000504 	addi	r16,r16,20
   619c0:	2a800304 	addi	r10,r5,12
   619c4:	22400304 	addi	r9,r4,12
   619c8:	2c21883a 	add	r16,r5,r16
   619cc:	2811883a 	mov	r8,r5
   619d0:	200f883a 	mov	r7,r4
   619d4:	41000017 	ldw	r4,0(r8)
   619d8:	1fc00017 	ldw	ra,0(r3)
   619dc:	63c00017 	ldw	r15,0(r12)
   619e0:	39000015 	stw	r4,0(r7)
   619e4:	53800017 	ldw	r14,0(r10)
   619e8:	6fc00015 	stw	ra,0(r13)
   619ec:	5bc00015 	stw	r15,0(r11)
   619f0:	4b800015 	stw	r14,0(r9)
   619f4:	18c00404 	addi	r3,r3,16
   619f8:	39c00404 	addi	r7,r7,16
   619fc:	42000404 	addi	r8,r8,16
   61a00:	6b400404 	addi	r13,r13,16
   61a04:	63000404 	addi	r12,r12,16
   61a08:	5ac00404 	addi	r11,r11,16
   61a0c:	52800404 	addi	r10,r10,16
   61a10:	4a400404 	addi	r9,r9,16
   61a14:	1c3fef1e 	bne	r3,r16,619d4 <memcpy+0x5c>
   61a18:	89c00044 	addi	r7,r17,1
   61a1c:	380e913a 	slli	r7,r7,4
   61a20:	310003cc 	andi	r4,r6,15
   61a24:	02c000c4 	movi	r11,3
   61a28:	11c7883a 	add	r3,r2,r7
   61a2c:	29cb883a 	add	r5,r5,r7
   61a30:	5900212e 	bgeu	r11,r4,61ab8 <memcpy+0x140>
   61a34:	1813883a 	mov	r9,r3
   61a38:	2811883a 	mov	r8,r5
   61a3c:	200f883a 	mov	r7,r4
   61a40:	42800017 	ldw	r10,0(r8)
   61a44:	4a400104 	addi	r9,r9,4
   61a48:	39ffff04 	addi	r7,r7,-4
   61a4c:	4abfff15 	stw	r10,-4(r9)
   61a50:	42000104 	addi	r8,r8,4
   61a54:	59fffa36 	bltu	r11,r7,61a40 <memcpy+0xc8>
   61a58:	213fff04 	addi	r4,r4,-4
   61a5c:	2008d0ba 	srli	r4,r4,2
   61a60:	318000cc 	andi	r6,r6,3
   61a64:	21000044 	addi	r4,r4,1
   61a68:	2109883a 	add	r4,r4,r4
   61a6c:	2109883a 	add	r4,r4,r4
   61a70:	1907883a 	add	r3,r3,r4
   61a74:	290b883a 	add	r5,r5,r4
   61a78:	30000626 	beq	r6,zero,61a94 <memcpy+0x11c>
   61a7c:	198d883a 	add	r6,r3,r6
   61a80:	29c00003 	ldbu	r7,0(r5)
   61a84:	18c00044 	addi	r3,r3,1
   61a88:	29400044 	addi	r5,r5,1
   61a8c:	19ffffc5 	stb	r7,-1(r3)
   61a90:	19bffb1e 	bne	r3,r6,61a80 <memcpy+0x108>
   61a94:	dfc00217 	ldw	ra,8(sp)
   61a98:	dc400117 	ldw	r17,4(sp)
   61a9c:	dc000017 	ldw	r16,0(sp)
   61aa0:	dec00304 	addi	sp,sp,12
   61aa4:	f800283a 	ret
   61aa8:	2007883a 	mov	r3,r4
   61aac:	003ff206 	br	61a78 <memcpy+0x100>
   61ab0:	2007883a 	mov	r3,r4
   61ab4:	003ff106 	br	61a7c <memcpy+0x104>
   61ab8:	200d883a 	mov	r6,r4
   61abc:	003fee06 	br	61a78 <memcpy+0x100>

00061ac0 <memmove>:
   61ac0:	2005883a 	mov	r2,r4
   61ac4:	29000b2e 	bgeu	r5,r4,61af4 <memmove+0x34>
   61ac8:	298f883a 	add	r7,r5,r6
   61acc:	21c0092e 	bgeu	r4,r7,61af4 <memmove+0x34>
   61ad0:	2187883a 	add	r3,r4,r6
   61ad4:	198bc83a 	sub	r5,r3,r6
   61ad8:	30004826 	beq	r6,zero,61bfc <memmove+0x13c>
   61adc:	39ffffc4 	addi	r7,r7,-1
   61ae0:	39000003 	ldbu	r4,0(r7)
   61ae4:	18ffffc4 	addi	r3,r3,-1
   61ae8:	19000005 	stb	r4,0(r3)
   61aec:	28fffb1e 	bne	r5,r3,61adc <memmove+0x1c>
   61af0:	f800283a 	ret
   61af4:	00c003c4 	movi	r3,15
   61af8:	1980412e 	bgeu	r3,r6,61c00 <memmove+0x140>
   61afc:	2886b03a 	or	r3,r5,r2
   61b00:	18c000cc 	andi	r3,r3,3
   61b04:	1800401e 	bne	r3,zero,61c08 <memmove+0x148>
   61b08:	33fffc04 	addi	r15,r6,-16
   61b0c:	781ed13a 	srli	r15,r15,4
   61b10:	28c00104 	addi	r3,r5,4
   61b14:	13400104 	addi	r13,r2,4
   61b18:	781c913a 	slli	r14,r15,4
   61b1c:	2b000204 	addi	r12,r5,8
   61b20:	12c00204 	addi	r11,r2,8
   61b24:	73800504 	addi	r14,r14,20
   61b28:	2a800304 	addi	r10,r5,12
   61b2c:	12400304 	addi	r9,r2,12
   61b30:	2b9d883a 	add	r14,r5,r14
   61b34:	2811883a 	mov	r8,r5
   61b38:	100f883a 	mov	r7,r2
   61b3c:	41000017 	ldw	r4,0(r8)
   61b40:	39c00404 	addi	r7,r7,16
   61b44:	18c00404 	addi	r3,r3,16
   61b48:	393ffc15 	stw	r4,-16(r7)
   61b4c:	193ffc17 	ldw	r4,-16(r3)
   61b50:	6b400404 	addi	r13,r13,16
   61b54:	5ac00404 	addi	r11,r11,16
   61b58:	693ffc15 	stw	r4,-16(r13)
   61b5c:	61000017 	ldw	r4,0(r12)
   61b60:	4a400404 	addi	r9,r9,16
   61b64:	42000404 	addi	r8,r8,16
   61b68:	593ffc15 	stw	r4,-16(r11)
   61b6c:	51000017 	ldw	r4,0(r10)
   61b70:	63000404 	addi	r12,r12,16
   61b74:	52800404 	addi	r10,r10,16
   61b78:	493ffc15 	stw	r4,-16(r9)
   61b7c:	1bbfef1e 	bne	r3,r14,61b3c <memmove+0x7c>
   61b80:	79000044 	addi	r4,r15,1
   61b84:	2008913a 	slli	r4,r4,4
   61b88:	328003cc 	andi	r10,r6,15
   61b8c:	02c000c4 	movi	r11,3
   61b90:	1107883a 	add	r3,r2,r4
   61b94:	290b883a 	add	r5,r5,r4
   61b98:	5a801e2e 	bgeu	r11,r10,61c14 <memmove+0x154>
   61b9c:	1813883a 	mov	r9,r3
   61ba0:	2811883a 	mov	r8,r5
   61ba4:	500f883a 	mov	r7,r10
   61ba8:	41000017 	ldw	r4,0(r8)
   61bac:	4a400104 	addi	r9,r9,4
   61bb0:	39ffff04 	addi	r7,r7,-4
   61bb4:	493fff15 	stw	r4,-4(r9)
   61bb8:	42000104 	addi	r8,r8,4
   61bbc:	59fffa36 	bltu	r11,r7,61ba8 <memmove+0xe8>
   61bc0:	513fff04 	addi	r4,r10,-4
   61bc4:	2008d0ba 	srli	r4,r4,2
   61bc8:	318000cc 	andi	r6,r6,3
   61bcc:	21000044 	addi	r4,r4,1
   61bd0:	2109883a 	add	r4,r4,r4
   61bd4:	2109883a 	add	r4,r4,r4
   61bd8:	1907883a 	add	r3,r3,r4
   61bdc:	290b883a 	add	r5,r5,r4
   61be0:	30000b26 	beq	r6,zero,61c10 <memmove+0x150>
   61be4:	198d883a 	add	r6,r3,r6
   61be8:	29c00003 	ldbu	r7,0(r5)
   61bec:	18c00044 	addi	r3,r3,1
   61bf0:	29400044 	addi	r5,r5,1
   61bf4:	19ffffc5 	stb	r7,-1(r3)
   61bf8:	19bffb1e 	bne	r3,r6,61be8 <memmove+0x128>
   61bfc:	f800283a 	ret
   61c00:	1007883a 	mov	r3,r2
   61c04:	003ff606 	br	61be0 <memmove+0x120>
   61c08:	1007883a 	mov	r3,r2
   61c0c:	003ff506 	br	61be4 <memmove+0x124>
   61c10:	f800283a 	ret
   61c14:	500d883a 	mov	r6,r10
   61c18:	003ff106 	br	61be0 <memmove+0x120>

00061c1c <memset>:
   61c1c:	20c000cc 	andi	r3,r4,3
   61c20:	2005883a 	mov	r2,r4
   61c24:	18004426 	beq	r3,zero,61d38 <memset+0x11c>
   61c28:	31ffffc4 	addi	r7,r6,-1
   61c2c:	30004026 	beq	r6,zero,61d30 <memset+0x114>
   61c30:	2813883a 	mov	r9,r5
   61c34:	200d883a 	mov	r6,r4
   61c38:	2007883a 	mov	r3,r4
   61c3c:	00000406 	br	61c50 <memset+0x34>
   61c40:	3a3fffc4 	addi	r8,r7,-1
   61c44:	31800044 	addi	r6,r6,1
   61c48:	38003926 	beq	r7,zero,61d30 <memset+0x114>
   61c4c:	400f883a 	mov	r7,r8
   61c50:	18c00044 	addi	r3,r3,1
   61c54:	32400005 	stb	r9,0(r6)
   61c58:	1a0000cc 	andi	r8,r3,3
   61c5c:	403ff81e 	bne	r8,zero,61c40 <memset+0x24>
   61c60:	010000c4 	movi	r4,3
   61c64:	21c02d2e 	bgeu	r4,r7,61d1c <memset+0x100>
   61c68:	29003fcc 	andi	r4,r5,255
   61c6c:	200c923a 	slli	r6,r4,8
   61c70:	3108b03a 	or	r4,r6,r4
   61c74:	200c943a 	slli	r6,r4,16
   61c78:	218cb03a 	or	r6,r4,r6
   61c7c:	010003c4 	movi	r4,15
   61c80:	21c0182e 	bgeu	r4,r7,61ce4 <memset+0xc8>
   61c84:	3b3ffc04 	addi	r12,r7,-16
   61c88:	6018d13a 	srli	r12,r12,4
   61c8c:	1a000104 	addi	r8,r3,4
   61c90:	1ac00204 	addi	r11,r3,8
   61c94:	6008913a 	slli	r4,r12,4
   61c98:	1a800304 	addi	r10,r3,12
   61c9c:	1813883a 	mov	r9,r3
   61ca0:	21000504 	addi	r4,r4,20
   61ca4:	1909883a 	add	r4,r3,r4
   61ca8:	49800015 	stw	r6,0(r9)
   61cac:	41800015 	stw	r6,0(r8)
   61cb0:	59800015 	stw	r6,0(r11)
   61cb4:	51800015 	stw	r6,0(r10)
   61cb8:	42000404 	addi	r8,r8,16
   61cbc:	4a400404 	addi	r9,r9,16
   61cc0:	5ac00404 	addi	r11,r11,16
   61cc4:	52800404 	addi	r10,r10,16
   61cc8:	413ff71e 	bne	r8,r4,61ca8 <memset+0x8c>
   61ccc:	63000044 	addi	r12,r12,1
   61cd0:	6018913a 	slli	r12,r12,4
   61cd4:	39c003cc 	andi	r7,r7,15
   61cd8:	010000c4 	movi	r4,3
   61cdc:	1b07883a 	add	r3,r3,r12
   61ce0:	21c00e2e 	bgeu	r4,r7,61d1c <memset+0x100>
   61ce4:	1813883a 	mov	r9,r3
   61ce8:	3811883a 	mov	r8,r7
   61cec:	010000c4 	movi	r4,3
   61cf0:	49800015 	stw	r6,0(r9)
   61cf4:	423fff04 	addi	r8,r8,-4
   61cf8:	4a400104 	addi	r9,r9,4
   61cfc:	223ffc36 	bltu	r4,r8,61cf0 <memset+0xd4>
   61d00:	393fff04 	addi	r4,r7,-4
   61d04:	2008d0ba 	srli	r4,r4,2
   61d08:	39c000cc 	andi	r7,r7,3
   61d0c:	21000044 	addi	r4,r4,1
   61d10:	2109883a 	add	r4,r4,r4
   61d14:	2109883a 	add	r4,r4,r4
   61d18:	1907883a 	add	r3,r3,r4
   61d1c:	38000526 	beq	r7,zero,61d34 <memset+0x118>
   61d20:	19cf883a 	add	r7,r3,r7
   61d24:	19400005 	stb	r5,0(r3)
   61d28:	18c00044 	addi	r3,r3,1
   61d2c:	38fffd1e 	bne	r7,r3,61d24 <memset+0x108>
   61d30:	f800283a 	ret
   61d34:	f800283a 	ret
   61d38:	2007883a 	mov	r3,r4
   61d3c:	300f883a 	mov	r7,r6
   61d40:	003fc706 	br	61c60 <memset+0x44>

00061d44 <_realloc_r>:
   61d44:	defff604 	addi	sp,sp,-40
   61d48:	dc800215 	stw	r18,8(sp)
   61d4c:	dfc00915 	stw	ra,36(sp)
   61d50:	df000815 	stw	fp,32(sp)
   61d54:	ddc00715 	stw	r23,28(sp)
   61d58:	dd800615 	stw	r22,24(sp)
   61d5c:	dd400515 	stw	r21,20(sp)
   61d60:	dd000415 	stw	r20,16(sp)
   61d64:	dcc00315 	stw	r19,12(sp)
   61d68:	dc400115 	stw	r17,4(sp)
   61d6c:	dc000015 	stw	r16,0(sp)
   61d70:	3025883a 	mov	r18,r6
   61d74:	2800b726 	beq	r5,zero,62054 <_realloc_r+0x310>
   61d78:	282b883a 	mov	r21,r5
   61d7c:	2029883a 	mov	r20,r4
   61d80:	00638900 	call	63890 <__malloc_lock>
   61d84:	a8bfff17 	ldw	r2,-4(r21)
   61d88:	043fff04 	movi	r16,-4
   61d8c:	90c002c4 	addi	r3,r18,11
   61d90:	01000584 	movi	r4,22
   61d94:	acfffe04 	addi	r19,r21,-8
   61d98:	1420703a 	and	r16,r2,r16
   61d9c:	20c0332e 	bgeu	r4,r3,61e6c <_realloc_r+0x128>
   61da0:	047ffe04 	movi	r17,-8
   61da4:	1c62703a 	and	r17,r3,r17
   61da8:	8807883a 	mov	r3,r17
   61dac:	88005816 	blt	r17,zero,61f10 <_realloc_r+0x1cc>
   61db0:	8c805736 	bltu	r17,r18,61f10 <_realloc_r+0x1cc>
   61db4:	80c0300e 	bge	r16,r3,61e78 <_realloc_r+0x134>
   61db8:	07000134 	movhi	fp,4
   61dbc:	e7011c04 	addi	fp,fp,1136
   61dc0:	e1c00217 	ldw	r7,8(fp)
   61dc4:	9c09883a 	add	r4,r19,r16
   61dc8:	22000117 	ldw	r8,4(r4)
   61dcc:	21c06326 	beq	r4,r7,61f5c <_realloc_r+0x218>
   61dd0:	017fff84 	movi	r5,-2
   61dd4:	414a703a 	and	r5,r8,r5
   61dd8:	214b883a 	add	r5,r4,r5
   61ddc:	29800117 	ldw	r6,4(r5)
   61de0:	3180004c 	andi	r6,r6,1
   61de4:	30003f26 	beq	r6,zero,61ee4 <_realloc_r+0x1a0>
   61de8:	1080004c 	andi	r2,r2,1
   61dec:	10008326 	beq	r2,zero,61ffc <_realloc_r+0x2b8>
   61df0:	900b883a 	mov	r5,r18
   61df4:	a009883a 	mov	r4,r20
   61df8:	00610880 	call	61088 <_malloc_r>
   61dfc:	1025883a 	mov	r18,r2
   61e00:	10011e26 	beq	r2,zero,6227c <_realloc_r+0x538>
   61e04:	a93fff17 	ldw	r4,-4(r21)
   61e08:	10fffe04 	addi	r3,r2,-8
   61e0c:	00bfff84 	movi	r2,-2
   61e10:	2084703a 	and	r2,r4,r2
   61e14:	9885883a 	add	r2,r19,r2
   61e18:	1880ee26 	beq	r3,r2,621d4 <_realloc_r+0x490>
   61e1c:	81bfff04 	addi	r6,r16,-4
   61e20:	00800904 	movi	r2,36
   61e24:	1180b836 	bltu	r2,r6,62108 <_realloc_r+0x3c4>
   61e28:	00c004c4 	movi	r3,19
   61e2c:	19809636 	bltu	r3,r6,62088 <_realloc_r+0x344>
   61e30:	9005883a 	mov	r2,r18
   61e34:	a807883a 	mov	r3,r21
   61e38:	19000017 	ldw	r4,0(r3)
   61e3c:	11000015 	stw	r4,0(r2)
   61e40:	19000117 	ldw	r4,4(r3)
   61e44:	11000115 	stw	r4,4(r2)
   61e48:	18c00217 	ldw	r3,8(r3)
   61e4c:	10c00215 	stw	r3,8(r2)
   61e50:	a80b883a 	mov	r5,r21
   61e54:	a009883a 	mov	r4,r20
   61e58:	0062b100 	call	62b10 <_free_r>
   61e5c:	a009883a 	mov	r4,r20
   61e60:	00638b40 	call	638b4 <__malloc_unlock>
   61e64:	9005883a 	mov	r2,r18
   61e68:	00001206 	br	61eb4 <_realloc_r+0x170>
   61e6c:	00c00404 	movi	r3,16
   61e70:	1823883a 	mov	r17,r3
   61e74:	003fce06 	br	61db0 <_realloc_r+0x6c>
   61e78:	a825883a 	mov	r18,r21
   61e7c:	8445c83a 	sub	r2,r16,r17
   61e80:	00c003c4 	movi	r3,15
   61e84:	18802636 	bltu	r3,r2,61f20 <_realloc_r+0x1dc>
   61e88:	99800117 	ldw	r6,4(r19)
   61e8c:	9c07883a 	add	r3,r19,r16
   61e90:	3180004c 	andi	r6,r6,1
   61e94:	3420b03a 	or	r16,r6,r16
   61e98:	9c000115 	stw	r16,4(r19)
   61e9c:	18800117 	ldw	r2,4(r3)
   61ea0:	10800054 	ori	r2,r2,1
   61ea4:	18800115 	stw	r2,4(r3)
   61ea8:	a009883a 	mov	r4,r20
   61eac:	00638b40 	call	638b4 <__malloc_unlock>
   61eb0:	9005883a 	mov	r2,r18
   61eb4:	dfc00917 	ldw	ra,36(sp)
   61eb8:	df000817 	ldw	fp,32(sp)
   61ebc:	ddc00717 	ldw	r23,28(sp)
   61ec0:	dd800617 	ldw	r22,24(sp)
   61ec4:	dd400517 	ldw	r21,20(sp)
   61ec8:	dd000417 	ldw	r20,16(sp)
   61ecc:	dcc00317 	ldw	r19,12(sp)
   61ed0:	dc800217 	ldw	r18,8(sp)
   61ed4:	dc400117 	ldw	r17,4(sp)
   61ed8:	dc000017 	ldw	r16,0(sp)
   61edc:	dec00a04 	addi	sp,sp,40
   61ee0:	f800283a 	ret
   61ee4:	017fff04 	movi	r5,-4
   61ee8:	414a703a 	and	r5,r8,r5
   61eec:	814d883a 	add	r6,r16,r5
   61ef0:	30c01f16 	blt	r6,r3,61f70 <_realloc_r+0x22c>
   61ef4:	20800317 	ldw	r2,12(r4)
   61ef8:	20c00217 	ldw	r3,8(r4)
   61efc:	a825883a 	mov	r18,r21
   61f00:	3021883a 	mov	r16,r6
   61f04:	18800315 	stw	r2,12(r3)
   61f08:	10c00215 	stw	r3,8(r2)
   61f0c:	003fdb06 	br	61e7c <_realloc_r+0x138>
   61f10:	00800304 	movi	r2,12
   61f14:	a0800015 	stw	r2,0(r20)
   61f18:	0005883a 	mov	r2,zero
   61f1c:	003fe506 	br	61eb4 <_realloc_r+0x170>
   61f20:	98c00117 	ldw	r3,4(r19)
   61f24:	9c4b883a 	add	r5,r19,r17
   61f28:	11000054 	ori	r4,r2,1
   61f2c:	18c0004c 	andi	r3,r3,1
   61f30:	1c62b03a 	or	r17,r3,r17
   61f34:	9c400115 	stw	r17,4(r19)
   61f38:	29000115 	stw	r4,4(r5)
   61f3c:	2885883a 	add	r2,r5,r2
   61f40:	10c00117 	ldw	r3,4(r2)
   61f44:	29400204 	addi	r5,r5,8
   61f48:	a009883a 	mov	r4,r20
   61f4c:	18c00054 	ori	r3,r3,1
   61f50:	10c00115 	stw	r3,4(r2)
   61f54:	0062b100 	call	62b10 <_free_r>
   61f58:	003fd306 	br	61ea8 <_realloc_r+0x164>
   61f5c:	017fff04 	movi	r5,-4
   61f60:	414a703a 	and	r5,r8,r5
   61f64:	89800404 	addi	r6,r17,16
   61f68:	8151883a 	add	r8,r16,r5
   61f6c:	4180590e 	bge	r8,r6,620d4 <_realloc_r+0x390>
   61f70:	1080004c 	andi	r2,r2,1
   61f74:	103f9e1e 	bne	r2,zero,61df0 <_realloc_r+0xac>
   61f78:	adbffe17 	ldw	r22,-8(r21)
   61f7c:	00bfff04 	movi	r2,-4
   61f80:	9dadc83a 	sub	r22,r19,r22
   61f84:	b1800117 	ldw	r6,4(r22)
   61f88:	3084703a 	and	r2,r6,r2
   61f8c:	20002026 	beq	r4,zero,62010 <_realloc_r+0x2cc>
   61f90:	80af883a 	add	r23,r16,r2
   61f94:	b96f883a 	add	r23,r23,r5
   61f98:	21c05f26 	beq	r4,r7,62118 <_realloc_r+0x3d4>
   61f9c:	b8c01c16 	blt	r23,r3,62010 <_realloc_r+0x2cc>
   61fa0:	20800317 	ldw	r2,12(r4)
   61fa4:	20c00217 	ldw	r3,8(r4)
   61fa8:	81bfff04 	addi	r6,r16,-4
   61fac:	01000904 	movi	r4,36
   61fb0:	18800315 	stw	r2,12(r3)
   61fb4:	10c00215 	stw	r3,8(r2)
   61fb8:	b0c00217 	ldw	r3,8(r22)
   61fbc:	b0800317 	ldw	r2,12(r22)
   61fc0:	b4800204 	addi	r18,r22,8
   61fc4:	18800315 	stw	r2,12(r3)
   61fc8:	10c00215 	stw	r3,8(r2)
   61fcc:	21801b36 	bltu	r4,r6,6203c <_realloc_r+0x2f8>
   61fd0:	008004c4 	movi	r2,19
   61fd4:	1180352e 	bgeu	r2,r6,620ac <_realloc_r+0x368>
   61fd8:	a8800017 	ldw	r2,0(r21)
   61fdc:	b0800215 	stw	r2,8(r22)
   61fe0:	a8800117 	ldw	r2,4(r21)
   61fe4:	b0800315 	stw	r2,12(r22)
   61fe8:	008006c4 	movi	r2,27
   61fec:	11807f36 	bltu	r2,r6,621ec <_realloc_r+0x4a8>
   61ff0:	b0800404 	addi	r2,r22,16
   61ff4:	ad400204 	addi	r21,r21,8
   61ff8:	00002d06 	br	620b0 <_realloc_r+0x36c>
   61ffc:	adbffe17 	ldw	r22,-8(r21)
   62000:	00bfff04 	movi	r2,-4
   62004:	9dadc83a 	sub	r22,r19,r22
   62008:	b1000117 	ldw	r4,4(r22)
   6200c:	2084703a 	and	r2,r4,r2
   62010:	b03f7726 	beq	r22,zero,61df0 <_realloc_r+0xac>
   62014:	80af883a 	add	r23,r16,r2
   62018:	b8ff7516 	blt	r23,r3,61df0 <_realloc_r+0xac>
   6201c:	b0800317 	ldw	r2,12(r22)
   62020:	b0c00217 	ldw	r3,8(r22)
   62024:	81bfff04 	addi	r6,r16,-4
   62028:	01000904 	movi	r4,36
   6202c:	18800315 	stw	r2,12(r3)
   62030:	10c00215 	stw	r3,8(r2)
   62034:	b4800204 	addi	r18,r22,8
   62038:	21bfe52e 	bgeu	r4,r6,61fd0 <_realloc_r+0x28c>
   6203c:	a80b883a 	mov	r5,r21
   62040:	9009883a 	mov	r4,r18
   62044:	0061ac00 	call	61ac0 <memmove>
   62048:	b821883a 	mov	r16,r23
   6204c:	b027883a 	mov	r19,r22
   62050:	003f8a06 	br	61e7c <_realloc_r+0x138>
   62054:	300b883a 	mov	r5,r6
   62058:	dfc00917 	ldw	ra,36(sp)
   6205c:	df000817 	ldw	fp,32(sp)
   62060:	ddc00717 	ldw	r23,28(sp)
   62064:	dd800617 	ldw	r22,24(sp)
   62068:	dd400517 	ldw	r21,20(sp)
   6206c:	dd000417 	ldw	r20,16(sp)
   62070:	dcc00317 	ldw	r19,12(sp)
   62074:	dc800217 	ldw	r18,8(sp)
   62078:	dc400117 	ldw	r17,4(sp)
   6207c:	dc000017 	ldw	r16,0(sp)
   62080:	dec00a04 	addi	sp,sp,40
   62084:	00610881 	jmpi	61088 <_malloc_r>
   62088:	a8c00017 	ldw	r3,0(r21)
   6208c:	90c00015 	stw	r3,0(r18)
   62090:	a8c00117 	ldw	r3,4(r21)
   62094:	90c00115 	stw	r3,4(r18)
   62098:	00c006c4 	movi	r3,27
   6209c:	19804536 	bltu	r3,r6,621b4 <_realloc_r+0x470>
   620a0:	90800204 	addi	r2,r18,8
   620a4:	a8c00204 	addi	r3,r21,8
   620a8:	003f6306 	br	61e38 <_realloc_r+0xf4>
   620ac:	9005883a 	mov	r2,r18
   620b0:	a8c00017 	ldw	r3,0(r21)
   620b4:	b821883a 	mov	r16,r23
   620b8:	b027883a 	mov	r19,r22
   620bc:	10c00015 	stw	r3,0(r2)
   620c0:	a8c00117 	ldw	r3,4(r21)
   620c4:	10c00115 	stw	r3,4(r2)
   620c8:	a8c00217 	ldw	r3,8(r21)
   620cc:	10c00215 	stw	r3,8(r2)
   620d0:	003f6a06 	br	61e7c <_realloc_r+0x138>
   620d4:	9c67883a 	add	r19,r19,r17
   620d8:	4445c83a 	sub	r2,r8,r17
   620dc:	e4c00215 	stw	r19,8(fp)
   620e0:	10800054 	ori	r2,r2,1
   620e4:	98800115 	stw	r2,4(r19)
   620e8:	a8bfff17 	ldw	r2,-4(r21)
   620ec:	a009883a 	mov	r4,r20
   620f0:	1080004c 	andi	r2,r2,1
   620f4:	1462b03a 	or	r17,r2,r17
   620f8:	ac7fff15 	stw	r17,-4(r21)
   620fc:	00638b40 	call	638b4 <__malloc_unlock>
   62100:	a805883a 	mov	r2,r21
   62104:	003f6b06 	br	61eb4 <_realloc_r+0x170>
   62108:	a80b883a 	mov	r5,r21
   6210c:	9009883a 	mov	r4,r18
   62110:	0061ac00 	call	61ac0 <memmove>
   62114:	003f4e06 	br	61e50 <_realloc_r+0x10c>
   62118:	89000404 	addi	r4,r17,16
   6211c:	b93fbc16 	blt	r23,r4,62010 <_realloc_r+0x2cc>
   62120:	b0800317 	ldw	r2,12(r22)
   62124:	b0c00217 	ldw	r3,8(r22)
   62128:	81bfff04 	addi	r6,r16,-4
   6212c:	01000904 	movi	r4,36
   62130:	18800315 	stw	r2,12(r3)
   62134:	10c00215 	stw	r3,8(r2)
   62138:	b4800204 	addi	r18,r22,8
   6213c:	21804336 	bltu	r4,r6,6224c <_realloc_r+0x508>
   62140:	008004c4 	movi	r2,19
   62144:	11803f2e 	bgeu	r2,r6,62244 <_realloc_r+0x500>
   62148:	a8800017 	ldw	r2,0(r21)
   6214c:	b0800215 	stw	r2,8(r22)
   62150:	a8800117 	ldw	r2,4(r21)
   62154:	b0800315 	stw	r2,12(r22)
   62158:	008006c4 	movi	r2,27
   6215c:	11803f36 	bltu	r2,r6,6225c <_realloc_r+0x518>
   62160:	b0800404 	addi	r2,r22,16
   62164:	ad400204 	addi	r21,r21,8
   62168:	a8c00017 	ldw	r3,0(r21)
   6216c:	10c00015 	stw	r3,0(r2)
   62170:	a8c00117 	ldw	r3,4(r21)
   62174:	10c00115 	stw	r3,4(r2)
   62178:	a8c00217 	ldw	r3,8(r21)
   6217c:	10c00215 	stw	r3,8(r2)
   62180:	b447883a 	add	r3,r22,r17
   62184:	bc45c83a 	sub	r2,r23,r17
   62188:	e0c00215 	stw	r3,8(fp)
   6218c:	10800054 	ori	r2,r2,1
   62190:	18800115 	stw	r2,4(r3)
   62194:	b0800117 	ldw	r2,4(r22)
   62198:	a009883a 	mov	r4,r20
   6219c:	1080004c 	andi	r2,r2,1
   621a0:	1462b03a 	or	r17,r2,r17
   621a4:	b4400115 	stw	r17,4(r22)
   621a8:	00638b40 	call	638b4 <__malloc_unlock>
   621ac:	9005883a 	mov	r2,r18
   621b0:	003f4006 	br	61eb4 <_realloc_r+0x170>
   621b4:	a8c00217 	ldw	r3,8(r21)
   621b8:	90c00215 	stw	r3,8(r18)
   621bc:	a8c00317 	ldw	r3,12(r21)
   621c0:	90c00315 	stw	r3,12(r18)
   621c4:	30801126 	beq	r6,r2,6220c <_realloc_r+0x4c8>
   621c8:	90800404 	addi	r2,r18,16
   621cc:	a8c00404 	addi	r3,r21,16
   621d0:	003f1906 	br	61e38 <_realloc_r+0xf4>
   621d4:	90ffff17 	ldw	r3,-4(r18)
   621d8:	00bfff04 	movi	r2,-4
   621dc:	a825883a 	mov	r18,r21
   621e0:	1884703a 	and	r2,r3,r2
   621e4:	80a1883a 	add	r16,r16,r2
   621e8:	003f2406 	br	61e7c <_realloc_r+0x138>
   621ec:	a8800217 	ldw	r2,8(r21)
   621f0:	b0800415 	stw	r2,16(r22)
   621f4:	a8800317 	ldw	r2,12(r21)
   621f8:	b0800515 	stw	r2,20(r22)
   621fc:	31000a26 	beq	r6,r4,62228 <_realloc_r+0x4e4>
   62200:	b0800604 	addi	r2,r22,24
   62204:	ad400404 	addi	r21,r21,16
   62208:	003fa906 	br	620b0 <_realloc_r+0x36c>
   6220c:	a9000417 	ldw	r4,16(r21)
   62210:	90800604 	addi	r2,r18,24
   62214:	a8c00604 	addi	r3,r21,24
   62218:	91000415 	stw	r4,16(r18)
   6221c:	a9000517 	ldw	r4,20(r21)
   62220:	91000515 	stw	r4,20(r18)
   62224:	003f0406 	br	61e38 <_realloc_r+0xf4>
   62228:	a8c00417 	ldw	r3,16(r21)
   6222c:	ad400604 	addi	r21,r21,24
   62230:	b0800804 	addi	r2,r22,32
   62234:	b0c00615 	stw	r3,24(r22)
   62238:	a8ffff17 	ldw	r3,-4(r21)
   6223c:	b0c00715 	stw	r3,28(r22)
   62240:	003f9b06 	br	620b0 <_realloc_r+0x36c>
   62244:	9005883a 	mov	r2,r18
   62248:	003fc706 	br	62168 <_realloc_r+0x424>
   6224c:	a80b883a 	mov	r5,r21
   62250:	9009883a 	mov	r4,r18
   62254:	0061ac00 	call	61ac0 <memmove>
   62258:	003fc906 	br	62180 <_realloc_r+0x43c>
   6225c:	a8800217 	ldw	r2,8(r21)
   62260:	b0800415 	stw	r2,16(r22)
   62264:	a8800317 	ldw	r2,12(r21)
   62268:	b0800515 	stw	r2,20(r22)
   6226c:	31000726 	beq	r6,r4,6228c <_realloc_r+0x548>
   62270:	b0800604 	addi	r2,r22,24
   62274:	ad400404 	addi	r21,r21,16
   62278:	003fbb06 	br	62168 <_realloc_r+0x424>
   6227c:	a009883a 	mov	r4,r20
   62280:	00638b40 	call	638b4 <__malloc_unlock>
   62284:	0005883a 	mov	r2,zero
   62288:	003f0a06 	br	61eb4 <_realloc_r+0x170>
   6228c:	a8c00417 	ldw	r3,16(r21)
   62290:	ad400604 	addi	r21,r21,24
   62294:	b0800804 	addi	r2,r22,32
   62298:	b0c00615 	stw	r3,24(r22)
   6229c:	a8ffff17 	ldw	r3,-4(r21)
   622a0:	b0c00715 	stw	r3,28(r22)
   622a4:	003fb006 	br	62168 <_realloc_r+0x424>

000622a8 <_sbrk_r>:
   622a8:	defffd04 	addi	sp,sp,-12
   622ac:	dc000015 	stw	r16,0(sp)
   622b0:	04000134 	movhi	r16,4
   622b4:	dc400115 	stw	r17,4(sp)
   622b8:	8406b604 	addi	r16,r16,6872
   622bc:	2023883a 	mov	r17,r4
   622c0:	2809883a 	mov	r4,r5
   622c4:	dfc00215 	stw	ra,8(sp)
   622c8:	80000015 	stw	zero,0(r16)
   622cc:	0063a9c0 	call	63a9c <sbrk>
   622d0:	00ffffc4 	movi	r3,-1
   622d4:	10c00526 	beq	r2,r3,622ec <_sbrk_r+0x44>
   622d8:	dfc00217 	ldw	ra,8(sp)
   622dc:	dc400117 	ldw	r17,4(sp)
   622e0:	dc000017 	ldw	r16,0(sp)
   622e4:	dec00304 	addi	sp,sp,12
   622e8:	f800283a 	ret
   622ec:	80c00017 	ldw	r3,0(r16)
   622f0:	183ff926 	beq	r3,zero,622d8 <_sbrk_r+0x30>
   622f4:	88c00015 	stw	r3,0(r17)
   622f8:	003ff706 	br	622d8 <_sbrk_r+0x30>

000622fc <__sread>:
   622fc:	defffe04 	addi	sp,sp,-8
   62300:	dc000015 	stw	r16,0(sp)
   62304:	2821883a 	mov	r16,r5
   62308:	2940038f 	ldh	r5,14(r5)
   6230c:	dfc00115 	stw	ra,4(sp)
   62310:	006303c0 	call	6303c <_read_r>
   62314:	10000716 	blt	r2,zero,62334 <__sread+0x38>
   62318:	80c01417 	ldw	r3,80(r16)
   6231c:	1887883a 	add	r3,r3,r2
   62320:	80c01415 	stw	r3,80(r16)
   62324:	dfc00117 	ldw	ra,4(sp)
   62328:	dc000017 	ldw	r16,0(sp)
   6232c:	dec00204 	addi	sp,sp,8
   62330:	f800283a 	ret
   62334:	80c0030b 	ldhu	r3,12(r16)
   62338:	18fbffcc 	andi	r3,r3,61439
   6233c:	80c0030d 	sth	r3,12(r16)
   62340:	dfc00117 	ldw	ra,4(sp)
   62344:	dc000017 	ldw	r16,0(sp)
   62348:	dec00204 	addi	sp,sp,8
   6234c:	f800283a 	ret

00062350 <__seofread>:
   62350:	0005883a 	mov	r2,zero
   62354:	f800283a 	ret

00062358 <__swrite>:
   62358:	2880030b 	ldhu	r2,12(r5)
   6235c:	defffb04 	addi	sp,sp,-20
   62360:	dcc00315 	stw	r19,12(sp)
   62364:	dc800215 	stw	r18,8(sp)
   62368:	dc400115 	stw	r17,4(sp)
   6236c:	dc000015 	stw	r16,0(sp)
   62370:	dfc00415 	stw	ra,16(sp)
   62374:	10c0400c 	andi	r3,r2,256
   62378:	2821883a 	mov	r16,r5
   6237c:	2023883a 	mov	r17,r4
   62380:	3025883a 	mov	r18,r6
   62384:	3827883a 	mov	r19,r7
   62388:	18000526 	beq	r3,zero,623a0 <__swrite+0x48>
   6238c:	2940038f 	ldh	r5,14(r5)
   62390:	01c00084 	movi	r7,2
   62394:	000d883a 	mov	r6,zero
   62398:	0062e200 	call	62e20 <_lseek_r>
   6239c:	8080030b 	ldhu	r2,12(r16)
   623a0:	8140038f 	ldh	r5,14(r16)
   623a4:	10bbffcc 	andi	r2,r2,61439
   623a8:	980f883a 	mov	r7,r19
   623ac:	900d883a 	mov	r6,r18
   623b0:	8809883a 	mov	r4,r17
   623b4:	8080030d 	sth	r2,12(r16)
   623b8:	dfc00417 	ldw	ra,16(sp)
   623bc:	dcc00317 	ldw	r19,12(sp)
   623c0:	dc800217 	ldw	r18,8(sp)
   623c4:	dc400117 	ldw	r17,4(sp)
   623c8:	dc000017 	ldw	r16,0(sp)
   623cc:	dec00504 	addi	sp,sp,20
   623d0:	00624381 	jmpi	62438 <_write_r>

000623d4 <__sseek>:
   623d4:	defffe04 	addi	sp,sp,-8
   623d8:	dc000015 	stw	r16,0(sp)
   623dc:	2821883a 	mov	r16,r5
   623e0:	2940038f 	ldh	r5,14(r5)
   623e4:	dfc00115 	stw	ra,4(sp)
   623e8:	0062e200 	call	62e20 <_lseek_r>
   623ec:	00ffffc4 	movi	r3,-1
   623f0:	10c00826 	beq	r2,r3,62414 <__sseek+0x40>
   623f4:	80c0030b 	ldhu	r3,12(r16)
   623f8:	80801415 	stw	r2,80(r16)
   623fc:	18c40014 	ori	r3,r3,4096
   62400:	80c0030d 	sth	r3,12(r16)
   62404:	dfc00117 	ldw	ra,4(sp)
   62408:	dc000017 	ldw	r16,0(sp)
   6240c:	dec00204 	addi	sp,sp,8
   62410:	f800283a 	ret
   62414:	80c0030b 	ldhu	r3,12(r16)
   62418:	18fbffcc 	andi	r3,r3,61439
   6241c:	80c0030d 	sth	r3,12(r16)
   62420:	dfc00117 	ldw	ra,4(sp)
   62424:	dc000017 	ldw	r16,0(sp)
   62428:	dec00204 	addi	sp,sp,8
   6242c:	f800283a 	ret

00062430 <__sclose>:
   62430:	2940038f 	ldh	r5,14(r5)
   62434:	00625ec1 	jmpi	625ec <_close_r>

00062438 <_write_r>:
   62438:	defffd04 	addi	sp,sp,-12
   6243c:	2805883a 	mov	r2,r5
   62440:	dc000015 	stw	r16,0(sp)
   62444:	04000134 	movhi	r16,4
   62448:	dc400115 	stw	r17,4(sp)
   6244c:	300b883a 	mov	r5,r6
   62450:	8406b604 	addi	r16,r16,6872
   62454:	2023883a 	mov	r17,r4
   62458:	380d883a 	mov	r6,r7
   6245c:	1009883a 	mov	r4,r2
   62460:	dfc00215 	stw	ra,8(sp)
   62464:	80000015 	stw	zero,0(r16)
   62468:	0063b880 	call	63b88 <write>
   6246c:	00ffffc4 	movi	r3,-1
   62470:	10c00526 	beq	r2,r3,62488 <_write_r+0x50>
   62474:	dfc00217 	ldw	ra,8(sp)
   62478:	dc400117 	ldw	r17,4(sp)
   6247c:	dc000017 	ldw	r16,0(sp)
   62480:	dec00304 	addi	sp,sp,12
   62484:	f800283a 	ret
   62488:	80c00017 	ldw	r3,0(r16)
   6248c:	183ff926 	beq	r3,zero,62474 <_write_r+0x3c>
   62490:	88c00015 	stw	r3,0(r17)
   62494:	003ff706 	br	62474 <_write_r+0x3c>

00062498 <__swsetup_r>:
   62498:	00800134 	movhi	r2,4
   6249c:	defffd04 	addi	sp,sp,-12
   624a0:	1086a304 	addi	r2,r2,6796
   624a4:	dc400115 	stw	r17,4(sp)
   624a8:	2023883a 	mov	r17,r4
   624ac:	11000017 	ldw	r4,0(r2)
   624b0:	dc000015 	stw	r16,0(sp)
   624b4:	dfc00215 	stw	ra,8(sp)
   624b8:	2821883a 	mov	r16,r5
   624bc:	20000226 	beq	r4,zero,624c8 <__swsetup_r+0x30>
   624c0:	20800e17 	ldw	r2,56(r4)
   624c4:	10003126 	beq	r2,zero,6258c <__swsetup_r+0xf4>
   624c8:	8080030b 	ldhu	r2,12(r16)
   624cc:	10c0020c 	andi	r3,r2,8
   624d0:	1009883a 	mov	r4,r2
   624d4:	18000f26 	beq	r3,zero,62514 <__swsetup_r+0x7c>
   624d8:	80c00417 	ldw	r3,16(r16)
   624dc:	18001526 	beq	r3,zero,62534 <__swsetup_r+0x9c>
   624e0:	1100004c 	andi	r4,r2,1
   624e4:	20001c1e 	bne	r4,zero,62558 <__swsetup_r+0xc0>
   624e8:	1080008c 	andi	r2,r2,2
   624ec:	1000291e 	bne	r2,zero,62594 <__swsetup_r+0xfc>
   624f0:	80800517 	ldw	r2,20(r16)
   624f4:	80800215 	stw	r2,8(r16)
   624f8:	18001c26 	beq	r3,zero,6256c <__swsetup_r+0xd4>
   624fc:	0005883a 	mov	r2,zero
   62500:	dfc00217 	ldw	ra,8(sp)
   62504:	dc400117 	ldw	r17,4(sp)
   62508:	dc000017 	ldw	r16,0(sp)
   6250c:	dec00304 	addi	sp,sp,12
   62510:	f800283a 	ret
   62514:	2080040c 	andi	r2,r4,16
   62518:	10002e26 	beq	r2,zero,625d4 <__swsetup_r+0x13c>
   6251c:	2080010c 	andi	r2,r4,4
   62520:	10001e1e 	bne	r2,zero,6259c <__swsetup_r+0x104>
   62524:	80c00417 	ldw	r3,16(r16)
   62528:	20800214 	ori	r2,r4,8
   6252c:	8080030d 	sth	r2,12(r16)
   62530:	183feb1e 	bne	r3,zero,624e0 <__swsetup_r+0x48>
   62534:	1100a00c 	andi	r4,r2,640
   62538:	01408004 	movi	r5,512
   6253c:	217fe826 	beq	r4,r5,624e0 <__swsetup_r+0x48>
   62540:	800b883a 	mov	r5,r16
   62544:	8809883a 	mov	r4,r17
   62548:	0062e800 	call	62e80 <__smakebuf_r>
   6254c:	8080030b 	ldhu	r2,12(r16)
   62550:	80c00417 	ldw	r3,16(r16)
   62554:	003fe206 	br	624e0 <__swsetup_r+0x48>
   62558:	80800517 	ldw	r2,20(r16)
   6255c:	80000215 	stw	zero,8(r16)
   62560:	0085c83a 	sub	r2,zero,r2
   62564:	80800615 	stw	r2,24(r16)
   62568:	183fe41e 	bne	r3,zero,624fc <__swsetup_r+0x64>
   6256c:	80c0030b 	ldhu	r3,12(r16)
   62570:	0005883a 	mov	r2,zero
   62574:	1900200c 	andi	r4,r3,128
   62578:	203fe126 	beq	r4,zero,62500 <__swsetup_r+0x68>
   6257c:	18c01014 	ori	r3,r3,64
   62580:	80c0030d 	sth	r3,12(r16)
   62584:	00bfffc4 	movi	r2,-1
   62588:	003fdd06 	br	62500 <__swsetup_r+0x68>
   6258c:	00609e80 	call	609e8 <__sinit>
   62590:	003fcd06 	br	624c8 <__swsetup_r+0x30>
   62594:	0005883a 	mov	r2,zero
   62598:	003fd606 	br	624f4 <__swsetup_r+0x5c>
   6259c:	81400c17 	ldw	r5,48(r16)
   625a0:	28000626 	beq	r5,zero,625bc <__swsetup_r+0x124>
   625a4:	80801004 	addi	r2,r16,64
   625a8:	28800326 	beq	r5,r2,625b8 <__swsetup_r+0x120>
   625ac:	8809883a 	mov	r4,r17
   625b0:	0062b100 	call	62b10 <_free_r>
   625b4:	8100030b 	ldhu	r4,12(r16)
   625b8:	80000c15 	stw	zero,48(r16)
   625bc:	80c00417 	ldw	r3,16(r16)
   625c0:	00bff6c4 	movi	r2,-37
   625c4:	1108703a 	and	r4,r2,r4
   625c8:	80000115 	stw	zero,4(r16)
   625cc:	80c00015 	stw	r3,0(r16)
   625d0:	003fd506 	br	62528 <__swsetup_r+0x90>
   625d4:	00800244 	movi	r2,9
   625d8:	88800015 	stw	r2,0(r17)
   625dc:	20801014 	ori	r2,r4,64
   625e0:	8080030d 	sth	r2,12(r16)
   625e4:	00bfffc4 	movi	r2,-1
   625e8:	003fc506 	br	62500 <__swsetup_r+0x68>

000625ec <_close_r>:
   625ec:	defffd04 	addi	sp,sp,-12
   625f0:	dc000015 	stw	r16,0(sp)
   625f4:	04000134 	movhi	r16,4
   625f8:	dc400115 	stw	r17,4(sp)
   625fc:	8406b604 	addi	r16,r16,6872
   62600:	2023883a 	mov	r17,r4
   62604:	2809883a 	mov	r4,r5
   62608:	dfc00215 	stw	ra,8(sp)
   6260c:	80000015 	stw	zero,0(r16)
   62610:	00631b00 	call	631b0 <close>
   62614:	00ffffc4 	movi	r3,-1
   62618:	10c00526 	beq	r2,r3,62630 <_close_r+0x44>
   6261c:	dfc00217 	ldw	ra,8(sp)
   62620:	dc400117 	ldw	r17,4(sp)
   62624:	dc000017 	ldw	r16,0(sp)
   62628:	dec00304 	addi	sp,sp,12
   6262c:	f800283a 	ret
   62630:	80c00017 	ldw	r3,0(r16)
   62634:	183ff926 	beq	r3,zero,6261c <_close_r+0x30>
   62638:	88c00015 	stw	r3,0(r17)
   6263c:	003ff706 	br	6261c <_close_r+0x30>

00062640 <_fclose_r>:
   62640:	28003926 	beq	r5,zero,62728 <_fclose_r+0xe8>
   62644:	defffc04 	addi	sp,sp,-16
   62648:	dc400115 	stw	r17,4(sp)
   6264c:	dc000015 	stw	r16,0(sp)
   62650:	dfc00315 	stw	ra,12(sp)
   62654:	dc800215 	stw	r18,8(sp)
   62658:	2023883a 	mov	r17,r4
   6265c:	2821883a 	mov	r16,r5
   62660:	20000226 	beq	r4,zero,6266c <_fclose_r+0x2c>
   62664:	20800e17 	ldw	r2,56(r4)
   62668:	10002726 	beq	r2,zero,62708 <_fclose_r+0xc8>
   6266c:	8080030f 	ldh	r2,12(r16)
   62670:	1000071e 	bne	r2,zero,62690 <_fclose_r+0x50>
   62674:	0005883a 	mov	r2,zero
   62678:	dfc00317 	ldw	ra,12(sp)
   6267c:	dc800217 	ldw	r18,8(sp)
   62680:	dc400117 	ldw	r17,4(sp)
   62684:	dc000017 	ldw	r16,0(sp)
   62688:	dec00404 	addi	sp,sp,16
   6268c:	f800283a 	ret
   62690:	800b883a 	mov	r5,r16
   62694:	8809883a 	mov	r4,r17
   62698:	00627440 	call	62744 <__sflush_r>
   6269c:	1025883a 	mov	r18,r2
   626a0:	80800b17 	ldw	r2,44(r16)
   626a4:	10000426 	beq	r2,zero,626b8 <_fclose_r+0x78>
   626a8:	81400717 	ldw	r5,28(r16)
   626ac:	8809883a 	mov	r4,r17
   626b0:	103ee83a 	callr	r2
   626b4:	10001616 	blt	r2,zero,62710 <_fclose_r+0xd0>
   626b8:	8080030b 	ldhu	r2,12(r16)
   626bc:	1080200c 	andi	r2,r2,128
   626c0:	1000151e 	bne	r2,zero,62718 <_fclose_r+0xd8>
   626c4:	81400c17 	ldw	r5,48(r16)
   626c8:	28000526 	beq	r5,zero,626e0 <_fclose_r+0xa0>
   626cc:	80801004 	addi	r2,r16,64
   626d0:	28800226 	beq	r5,r2,626dc <_fclose_r+0x9c>
   626d4:	8809883a 	mov	r4,r17
   626d8:	0062b100 	call	62b10 <_free_r>
   626dc:	80000c15 	stw	zero,48(r16)
   626e0:	81401117 	ldw	r5,68(r16)
   626e4:	28000326 	beq	r5,zero,626f4 <_fclose_r+0xb4>
   626e8:	8809883a 	mov	r4,r17
   626ec:	0062b100 	call	62b10 <_free_r>
   626f0:	80001115 	stw	zero,68(r16)
   626f4:	00609f80 	call	609f8 <__sfp_lock_acquire>
   626f8:	8000030d 	sth	zero,12(r16)
   626fc:	00609fc0 	call	609fc <__sfp_lock_release>
   62700:	9005883a 	mov	r2,r18
   62704:	003fdc06 	br	62678 <_fclose_r+0x38>
   62708:	00609e80 	call	609e8 <__sinit>
   6270c:	003fd706 	br	6266c <_fclose_r+0x2c>
   62710:	04bfffc4 	movi	r18,-1
   62714:	003fe806 	br	626b8 <_fclose_r+0x78>
   62718:	81400417 	ldw	r5,16(r16)
   6271c:	8809883a 	mov	r4,r17
   62720:	0062b100 	call	62b10 <_free_r>
   62724:	003fe706 	br	626c4 <_fclose_r+0x84>
   62728:	0005883a 	mov	r2,zero
   6272c:	f800283a 	ret

00062730 <fclose>:
   62730:	00800134 	movhi	r2,4
   62734:	1086a304 	addi	r2,r2,6796
   62738:	200b883a 	mov	r5,r4
   6273c:	11000017 	ldw	r4,0(r2)
   62740:	00626401 	jmpi	62640 <_fclose_r>

00062744 <__sflush_r>:
   62744:	2880030b 	ldhu	r2,12(r5)
   62748:	defffb04 	addi	sp,sp,-20
   6274c:	dcc00315 	stw	r19,12(sp)
   62750:	dc400115 	stw	r17,4(sp)
   62754:	dfc00415 	stw	ra,16(sp)
   62758:	dc800215 	stw	r18,8(sp)
   6275c:	dc000015 	stw	r16,0(sp)
   62760:	10c0020c 	andi	r3,r2,8
   62764:	2823883a 	mov	r17,r5
   62768:	2027883a 	mov	r19,r4
   6276c:	1800311e 	bne	r3,zero,62834 <__sflush_r+0xf0>
   62770:	28c00117 	ldw	r3,4(r5)
   62774:	10820014 	ori	r2,r2,2048
   62778:	2880030d 	sth	r2,12(r5)
   6277c:	00c04b0e 	bge	zero,r3,628ac <__sflush_r+0x168>
   62780:	8a000a17 	ldw	r8,40(r17)
   62784:	40002326 	beq	r8,zero,62814 <__sflush_r+0xd0>
   62788:	9c000017 	ldw	r16,0(r19)
   6278c:	10c4000c 	andi	r3,r2,4096
   62790:	98000015 	stw	zero,0(r19)
   62794:	18004826 	beq	r3,zero,628b8 <__sflush_r+0x174>
   62798:	89801417 	ldw	r6,80(r17)
   6279c:	10c0010c 	andi	r3,r2,4
   627a0:	18000626 	beq	r3,zero,627bc <__sflush_r+0x78>
   627a4:	88c00117 	ldw	r3,4(r17)
   627a8:	88800c17 	ldw	r2,48(r17)
   627ac:	30cdc83a 	sub	r6,r6,r3
   627b0:	10000226 	beq	r2,zero,627bc <__sflush_r+0x78>
   627b4:	88800f17 	ldw	r2,60(r17)
   627b8:	308dc83a 	sub	r6,r6,r2
   627bc:	89400717 	ldw	r5,28(r17)
   627c0:	000f883a 	mov	r7,zero
   627c4:	9809883a 	mov	r4,r19
   627c8:	403ee83a 	callr	r8
   627cc:	00ffffc4 	movi	r3,-1
   627d0:	10c04426 	beq	r2,r3,628e4 <__sflush_r+0x1a0>
   627d4:	88c0030b 	ldhu	r3,12(r17)
   627d8:	89000417 	ldw	r4,16(r17)
   627dc:	88000115 	stw	zero,4(r17)
   627e0:	197dffcc 	andi	r5,r3,63487
   627e4:	8940030d 	sth	r5,12(r17)
   627e8:	89000015 	stw	r4,0(r17)
   627ec:	18c4000c 	andi	r3,r3,4096
   627f0:	18002c1e 	bne	r3,zero,628a4 <__sflush_r+0x160>
   627f4:	89400c17 	ldw	r5,48(r17)
   627f8:	9c000015 	stw	r16,0(r19)
   627fc:	28000526 	beq	r5,zero,62814 <__sflush_r+0xd0>
   62800:	88801004 	addi	r2,r17,64
   62804:	28800226 	beq	r5,r2,62810 <__sflush_r+0xcc>
   62808:	9809883a 	mov	r4,r19
   6280c:	0062b100 	call	62b10 <_free_r>
   62810:	88000c15 	stw	zero,48(r17)
   62814:	0005883a 	mov	r2,zero
   62818:	dfc00417 	ldw	ra,16(sp)
   6281c:	dcc00317 	ldw	r19,12(sp)
   62820:	dc800217 	ldw	r18,8(sp)
   62824:	dc400117 	ldw	r17,4(sp)
   62828:	dc000017 	ldw	r16,0(sp)
   6282c:	dec00504 	addi	sp,sp,20
   62830:	f800283a 	ret
   62834:	2c800417 	ldw	r18,16(r5)
   62838:	903ff626 	beq	r18,zero,62814 <__sflush_r+0xd0>
   6283c:	2c000017 	ldw	r16,0(r5)
   62840:	108000cc 	andi	r2,r2,3
   62844:	2c800015 	stw	r18,0(r5)
   62848:	84a1c83a 	sub	r16,r16,r18
   6284c:	1000131e 	bne	r2,zero,6289c <__sflush_r+0x158>
   62850:	28800517 	ldw	r2,20(r5)
   62854:	88800215 	stw	r2,8(r17)
   62858:	04000316 	blt	zero,r16,62868 <__sflush_r+0x124>
   6285c:	003fed06 	br	62814 <__sflush_r+0xd0>
   62860:	90a5883a 	add	r18,r18,r2
   62864:	043feb0e 	bge	zero,r16,62814 <__sflush_r+0xd0>
   62868:	88800917 	ldw	r2,36(r17)
   6286c:	89400717 	ldw	r5,28(r17)
   62870:	800f883a 	mov	r7,r16
   62874:	900d883a 	mov	r6,r18
   62878:	9809883a 	mov	r4,r19
   6287c:	103ee83a 	callr	r2
   62880:	80a1c83a 	sub	r16,r16,r2
   62884:	00bff616 	blt	zero,r2,62860 <__sflush_r+0x11c>
   62888:	88c0030b 	ldhu	r3,12(r17)
   6288c:	00bfffc4 	movi	r2,-1
   62890:	18c01014 	ori	r3,r3,64
   62894:	88c0030d 	sth	r3,12(r17)
   62898:	003fdf06 	br	62818 <__sflush_r+0xd4>
   6289c:	0005883a 	mov	r2,zero
   628a0:	003fec06 	br	62854 <__sflush_r+0x110>
   628a4:	88801415 	stw	r2,80(r17)
   628a8:	003fd206 	br	627f4 <__sflush_r+0xb0>
   628ac:	28c00f17 	ldw	r3,60(r5)
   628b0:	00ffb316 	blt	zero,r3,62780 <__sflush_r+0x3c>
   628b4:	003fd706 	br	62814 <__sflush_r+0xd0>
   628b8:	89400717 	ldw	r5,28(r17)
   628bc:	000d883a 	mov	r6,zero
   628c0:	01c00044 	movi	r7,1
   628c4:	9809883a 	mov	r4,r19
   628c8:	403ee83a 	callr	r8
   628cc:	100d883a 	mov	r6,r2
   628d0:	00bfffc4 	movi	r2,-1
   628d4:	30801426 	beq	r6,r2,62928 <__sflush_r+0x1e4>
   628d8:	8880030b 	ldhu	r2,12(r17)
   628dc:	8a000a17 	ldw	r8,40(r17)
   628e0:	003fae06 	br	6279c <__sflush_r+0x58>
   628e4:	98c00017 	ldw	r3,0(r19)
   628e8:	183fba26 	beq	r3,zero,627d4 <__sflush_r+0x90>
   628ec:	01000744 	movi	r4,29
   628f0:	19000626 	beq	r3,r4,6290c <__sflush_r+0x1c8>
   628f4:	01000584 	movi	r4,22
   628f8:	19000426 	beq	r3,r4,6290c <__sflush_r+0x1c8>
   628fc:	88c0030b 	ldhu	r3,12(r17)
   62900:	18c01014 	ori	r3,r3,64
   62904:	88c0030d 	sth	r3,12(r17)
   62908:	003fc306 	br	62818 <__sflush_r+0xd4>
   6290c:	8880030b 	ldhu	r2,12(r17)
   62910:	88c00417 	ldw	r3,16(r17)
   62914:	88000115 	stw	zero,4(r17)
   62918:	10bdffcc 	andi	r2,r2,63487
   6291c:	8880030d 	sth	r2,12(r17)
   62920:	88c00015 	stw	r3,0(r17)
   62924:	003fb306 	br	627f4 <__sflush_r+0xb0>
   62928:	98800017 	ldw	r2,0(r19)
   6292c:	103fea26 	beq	r2,zero,628d8 <__sflush_r+0x194>
   62930:	00c00744 	movi	r3,29
   62934:	10c00226 	beq	r2,r3,62940 <__sflush_r+0x1fc>
   62938:	00c00584 	movi	r3,22
   6293c:	10c0031e 	bne	r2,r3,6294c <__sflush_r+0x208>
   62940:	9c000015 	stw	r16,0(r19)
   62944:	0005883a 	mov	r2,zero
   62948:	003fb306 	br	62818 <__sflush_r+0xd4>
   6294c:	88c0030b 	ldhu	r3,12(r17)
   62950:	3005883a 	mov	r2,r6
   62954:	18c01014 	ori	r3,r3,64
   62958:	88c0030d 	sth	r3,12(r17)
   6295c:	003fae06 	br	62818 <__sflush_r+0xd4>

00062960 <_fflush_r>:
   62960:	defffd04 	addi	sp,sp,-12
   62964:	dc000115 	stw	r16,4(sp)
   62968:	dfc00215 	stw	ra,8(sp)
   6296c:	2021883a 	mov	r16,r4
   62970:	20000226 	beq	r4,zero,6297c <_fflush_r+0x1c>
   62974:	20800e17 	ldw	r2,56(r4)
   62978:	10000c26 	beq	r2,zero,629ac <_fflush_r+0x4c>
   6297c:	2880030f 	ldh	r2,12(r5)
   62980:	1000051e 	bne	r2,zero,62998 <_fflush_r+0x38>
   62984:	0005883a 	mov	r2,zero
   62988:	dfc00217 	ldw	ra,8(sp)
   6298c:	dc000117 	ldw	r16,4(sp)
   62990:	dec00304 	addi	sp,sp,12
   62994:	f800283a 	ret
   62998:	8009883a 	mov	r4,r16
   6299c:	dfc00217 	ldw	ra,8(sp)
   629a0:	dc000117 	ldw	r16,4(sp)
   629a4:	dec00304 	addi	sp,sp,12
   629a8:	00627441 	jmpi	62744 <__sflush_r>
   629ac:	d9400015 	stw	r5,0(sp)
   629b0:	00609e80 	call	609e8 <__sinit>
   629b4:	d9400017 	ldw	r5,0(sp)
   629b8:	003ff006 	br	6297c <_fflush_r+0x1c>

000629bc <fflush>:
   629bc:	20000526 	beq	r4,zero,629d4 <fflush+0x18>
   629c0:	00800134 	movhi	r2,4
   629c4:	1086a304 	addi	r2,r2,6796
   629c8:	200b883a 	mov	r5,r4
   629cc:	11000017 	ldw	r4,0(r2)
   629d0:	00629601 	jmpi	62960 <_fflush_r>
   629d4:	00800134 	movhi	r2,4
   629d8:	1086a204 	addi	r2,r2,6792
   629dc:	11000017 	ldw	r4,0(r2)
   629e0:	014001b4 	movhi	r5,6
   629e4:	294a5804 	addi	r5,r5,10592
   629e8:	0060fc41 	jmpi	60fc4 <_fwalk_reent>

000629ec <_malloc_trim_r>:
   629ec:	defffb04 	addi	sp,sp,-20
   629f0:	dcc00315 	stw	r19,12(sp)
   629f4:	04c00134 	movhi	r19,4
   629f8:	dc800215 	stw	r18,8(sp)
   629fc:	dc400115 	stw	r17,4(sp)
   62a00:	dc000015 	stw	r16,0(sp)
   62a04:	dfc00415 	stw	ra,16(sp)
   62a08:	2821883a 	mov	r16,r5
   62a0c:	9cc11c04 	addi	r19,r19,1136
   62a10:	2025883a 	mov	r18,r4
   62a14:	00638900 	call	63890 <__malloc_lock>
   62a18:	98800217 	ldw	r2,8(r19)
   62a1c:	14400117 	ldw	r17,4(r2)
   62a20:	00bfff04 	movi	r2,-4
   62a24:	88a2703a 	and	r17,r17,r2
   62a28:	8c21c83a 	sub	r16,r17,r16
   62a2c:	8403fbc4 	addi	r16,r16,4079
   62a30:	8020d33a 	srli	r16,r16,12
   62a34:	0083ffc4 	movi	r2,4095
   62a38:	843fffc4 	addi	r16,r16,-1
   62a3c:	8020933a 	slli	r16,r16,12
   62a40:	1400060e 	bge	r2,r16,62a5c <_malloc_trim_r+0x70>
   62a44:	000b883a 	mov	r5,zero
   62a48:	9009883a 	mov	r4,r18
   62a4c:	00622a80 	call	622a8 <_sbrk_r>
   62a50:	98c00217 	ldw	r3,8(r19)
   62a54:	1c47883a 	add	r3,r3,r17
   62a58:	10c00a26 	beq	r2,r3,62a84 <_malloc_trim_r+0x98>
   62a5c:	9009883a 	mov	r4,r18
   62a60:	00638b40 	call	638b4 <__malloc_unlock>
   62a64:	0005883a 	mov	r2,zero
   62a68:	dfc00417 	ldw	ra,16(sp)
   62a6c:	dcc00317 	ldw	r19,12(sp)
   62a70:	dc800217 	ldw	r18,8(sp)
   62a74:	dc400117 	ldw	r17,4(sp)
   62a78:	dc000017 	ldw	r16,0(sp)
   62a7c:	dec00504 	addi	sp,sp,20
   62a80:	f800283a 	ret
   62a84:	040bc83a 	sub	r5,zero,r16
   62a88:	9009883a 	mov	r4,r18
   62a8c:	00622a80 	call	622a8 <_sbrk_r>
   62a90:	00ffffc4 	movi	r3,-1
   62a94:	10c00d26 	beq	r2,r3,62acc <_malloc_trim_r+0xe0>
   62a98:	00c00134 	movhi	r3,4
   62a9c:	18c6be04 	addi	r3,r3,6904
   62aa0:	18800017 	ldw	r2,0(r3)
   62aa4:	99000217 	ldw	r4,8(r19)
   62aa8:	8c23c83a 	sub	r17,r17,r16
   62aac:	8c400054 	ori	r17,r17,1
   62ab0:	1421c83a 	sub	r16,r2,r16
   62ab4:	24400115 	stw	r17,4(r4)
   62ab8:	9009883a 	mov	r4,r18
   62abc:	1c000015 	stw	r16,0(r3)
   62ac0:	00638b40 	call	638b4 <__malloc_unlock>
   62ac4:	00800044 	movi	r2,1
   62ac8:	003fe706 	br	62a68 <_malloc_trim_r+0x7c>
   62acc:	000b883a 	mov	r5,zero
   62ad0:	9009883a 	mov	r4,r18
   62ad4:	00622a80 	call	622a8 <_sbrk_r>
   62ad8:	99000217 	ldw	r4,8(r19)
   62adc:	014003c4 	movi	r5,15
   62ae0:	1107c83a 	sub	r3,r2,r4
   62ae4:	28ffdd0e 	bge	r5,r3,62a5c <_malloc_trim_r+0x70>
   62ae8:	01400134 	movhi	r5,4
   62aec:	2946a404 	addi	r5,r5,6800
   62af0:	29400017 	ldw	r5,0(r5)
   62af4:	18c00054 	ori	r3,r3,1
   62af8:	20c00115 	stw	r3,4(r4)
   62afc:	00c00134 	movhi	r3,4
   62b00:	1145c83a 	sub	r2,r2,r5
   62b04:	18c6be04 	addi	r3,r3,6904
   62b08:	18800015 	stw	r2,0(r3)
   62b0c:	003fd306 	br	62a5c <_malloc_trim_r+0x70>

00062b10 <_free_r>:
   62b10:	28004126 	beq	r5,zero,62c18 <_free_r+0x108>
   62b14:	defffd04 	addi	sp,sp,-12
   62b18:	dc400115 	stw	r17,4(sp)
   62b1c:	dc000015 	stw	r16,0(sp)
   62b20:	2023883a 	mov	r17,r4
   62b24:	2821883a 	mov	r16,r5
   62b28:	dfc00215 	stw	ra,8(sp)
   62b2c:	00638900 	call	63890 <__malloc_lock>
   62b30:	81ffff17 	ldw	r7,-4(r16)
   62b34:	00bfff84 	movi	r2,-2
   62b38:	01000134 	movhi	r4,4
   62b3c:	81bffe04 	addi	r6,r16,-8
   62b40:	3884703a 	and	r2,r7,r2
   62b44:	21011c04 	addi	r4,r4,1136
   62b48:	308b883a 	add	r5,r6,r2
   62b4c:	2a400117 	ldw	r9,4(r5)
   62b50:	22000217 	ldw	r8,8(r4)
   62b54:	00ffff04 	movi	r3,-4
   62b58:	48c6703a 	and	r3,r9,r3
   62b5c:	2a005726 	beq	r5,r8,62cbc <_free_r+0x1ac>
   62b60:	28c00115 	stw	r3,4(r5)
   62b64:	39c0004c 	andi	r7,r7,1
   62b68:	3800091e 	bne	r7,zero,62b90 <_free_r+0x80>
   62b6c:	823ffe17 	ldw	r8,-8(r16)
   62b70:	22400204 	addi	r9,r4,8
   62b74:	320dc83a 	sub	r6,r6,r8
   62b78:	31c00217 	ldw	r7,8(r6)
   62b7c:	1205883a 	add	r2,r2,r8
   62b80:	3a406526 	beq	r7,r9,62d18 <_free_r+0x208>
   62b84:	32000317 	ldw	r8,12(r6)
   62b88:	3a000315 	stw	r8,12(r7)
   62b8c:	41c00215 	stw	r7,8(r8)
   62b90:	28cf883a 	add	r7,r5,r3
   62b94:	39c00117 	ldw	r7,4(r7)
   62b98:	39c0004c 	andi	r7,r7,1
   62b9c:	38003a26 	beq	r7,zero,62c88 <_free_r+0x178>
   62ba0:	10c00054 	ori	r3,r2,1
   62ba4:	30c00115 	stw	r3,4(r6)
   62ba8:	3087883a 	add	r3,r6,r2
   62bac:	18800015 	stw	r2,0(r3)
   62bb0:	00c07fc4 	movi	r3,511
   62bb4:	18801936 	bltu	r3,r2,62c1c <_free_r+0x10c>
   62bb8:	1004d0fa 	srli	r2,r2,3
   62bbc:	01c00044 	movi	r7,1
   62bc0:	21400117 	ldw	r5,4(r4)
   62bc4:	10c00044 	addi	r3,r2,1
   62bc8:	18c7883a 	add	r3,r3,r3
   62bcc:	1005d0ba 	srai	r2,r2,2
   62bd0:	18c7883a 	add	r3,r3,r3
   62bd4:	18c7883a 	add	r3,r3,r3
   62bd8:	1907883a 	add	r3,r3,r4
   62bdc:	3884983a 	sll	r2,r7,r2
   62be0:	19c00017 	ldw	r7,0(r3)
   62be4:	1a3ffe04 	addi	r8,r3,-8
   62be8:	1144b03a 	or	r2,r2,r5
   62bec:	32000315 	stw	r8,12(r6)
   62bf0:	31c00215 	stw	r7,8(r6)
   62bf4:	20800115 	stw	r2,4(r4)
   62bf8:	19800015 	stw	r6,0(r3)
   62bfc:	39800315 	stw	r6,12(r7)
   62c00:	8809883a 	mov	r4,r17
   62c04:	dfc00217 	ldw	ra,8(sp)
   62c08:	dc400117 	ldw	r17,4(sp)
   62c0c:	dc000017 	ldw	r16,0(sp)
   62c10:	dec00304 	addi	sp,sp,12
   62c14:	00638b41 	jmpi	638b4 <__malloc_unlock>
   62c18:	f800283a 	ret
   62c1c:	100ad27a 	srli	r5,r2,9
   62c20:	00c00104 	movi	r3,4
   62c24:	19404a36 	bltu	r3,r5,62d50 <_free_r+0x240>
   62c28:	100ad1ba 	srli	r5,r2,6
   62c2c:	28c00e44 	addi	r3,r5,57
   62c30:	18c7883a 	add	r3,r3,r3
   62c34:	29400e04 	addi	r5,r5,56
   62c38:	18c7883a 	add	r3,r3,r3
   62c3c:	18c7883a 	add	r3,r3,r3
   62c40:	1909883a 	add	r4,r3,r4
   62c44:	20c00017 	ldw	r3,0(r4)
   62c48:	01c00134 	movhi	r7,4
   62c4c:	213ffe04 	addi	r4,r4,-8
   62c50:	39c11c04 	addi	r7,r7,1136
   62c54:	20c04426 	beq	r4,r3,62d68 <_free_r+0x258>
   62c58:	01ffff04 	movi	r7,-4
   62c5c:	19400117 	ldw	r5,4(r3)
   62c60:	29ca703a 	and	r5,r5,r7
   62c64:	1140022e 	bgeu	r2,r5,62c70 <_free_r+0x160>
   62c68:	18c00217 	ldw	r3,8(r3)
   62c6c:	20fffb1e 	bne	r4,r3,62c5c <_free_r+0x14c>
   62c70:	19000317 	ldw	r4,12(r3)
   62c74:	31000315 	stw	r4,12(r6)
   62c78:	30c00215 	stw	r3,8(r6)
   62c7c:	21800215 	stw	r6,8(r4)
   62c80:	19800315 	stw	r6,12(r3)
   62c84:	003fde06 	br	62c00 <_free_r+0xf0>
   62c88:	29c00217 	ldw	r7,8(r5)
   62c8c:	10c5883a 	add	r2,r2,r3
   62c90:	00c00134 	movhi	r3,4
   62c94:	18c11e04 	addi	r3,r3,1144
   62c98:	38c03b26 	beq	r7,r3,62d88 <_free_r+0x278>
   62c9c:	2a000317 	ldw	r8,12(r5)
   62ca0:	11400054 	ori	r5,r2,1
   62ca4:	3087883a 	add	r3,r6,r2
   62ca8:	3a000315 	stw	r8,12(r7)
   62cac:	41c00215 	stw	r7,8(r8)
   62cb0:	31400115 	stw	r5,4(r6)
   62cb4:	18800015 	stw	r2,0(r3)
   62cb8:	003fbd06 	br	62bb0 <_free_r+0xa0>
   62cbc:	39c0004c 	andi	r7,r7,1
   62cc0:	10c5883a 	add	r2,r2,r3
   62cc4:	3800071e 	bne	r7,zero,62ce4 <_free_r+0x1d4>
   62cc8:	81fffe17 	ldw	r7,-8(r16)
   62ccc:	31cdc83a 	sub	r6,r6,r7
   62cd0:	30c00317 	ldw	r3,12(r6)
   62cd4:	31400217 	ldw	r5,8(r6)
   62cd8:	11c5883a 	add	r2,r2,r7
   62cdc:	28c00315 	stw	r3,12(r5)
   62ce0:	19400215 	stw	r5,8(r3)
   62ce4:	10c00054 	ori	r3,r2,1
   62ce8:	30c00115 	stw	r3,4(r6)
   62cec:	00c00134 	movhi	r3,4
   62cf0:	18c6a504 	addi	r3,r3,6804
   62cf4:	18c00017 	ldw	r3,0(r3)
   62cf8:	21800215 	stw	r6,8(r4)
   62cfc:	10ffc036 	bltu	r2,r3,62c00 <_free_r+0xf0>
   62d00:	00800134 	movhi	r2,4
   62d04:	1086b504 	addi	r2,r2,6868
   62d08:	11400017 	ldw	r5,0(r2)
   62d0c:	8809883a 	mov	r4,r17
   62d10:	00629ec0 	call	629ec <_malloc_trim_r>
   62d14:	003fba06 	br	62c00 <_free_r+0xf0>
   62d18:	28c9883a 	add	r4,r5,r3
   62d1c:	21000117 	ldw	r4,4(r4)
   62d20:	2100004c 	andi	r4,r4,1
   62d24:	2000391e 	bne	r4,zero,62e0c <_free_r+0x2fc>
   62d28:	29c00217 	ldw	r7,8(r5)
   62d2c:	29000317 	ldw	r4,12(r5)
   62d30:	1885883a 	add	r2,r3,r2
   62d34:	10c00054 	ori	r3,r2,1
   62d38:	39000315 	stw	r4,12(r7)
   62d3c:	21c00215 	stw	r7,8(r4)
   62d40:	30c00115 	stw	r3,4(r6)
   62d44:	308d883a 	add	r6,r6,r2
   62d48:	30800015 	stw	r2,0(r6)
   62d4c:	003fac06 	br	62c00 <_free_r+0xf0>
   62d50:	00c00504 	movi	r3,20
   62d54:	19401536 	bltu	r3,r5,62dac <_free_r+0x29c>
   62d58:	28c01704 	addi	r3,r5,92
   62d5c:	18c7883a 	add	r3,r3,r3
   62d60:	294016c4 	addi	r5,r5,91
   62d64:	003fb406 	br	62c38 <_free_r+0x128>
   62d68:	280bd0ba 	srai	r5,r5,2
   62d6c:	00c00044 	movi	r3,1
   62d70:	38800117 	ldw	r2,4(r7)
   62d74:	194a983a 	sll	r5,r3,r5
   62d78:	2007883a 	mov	r3,r4
   62d7c:	2884b03a 	or	r2,r5,r2
   62d80:	38800115 	stw	r2,4(r7)
   62d84:	003fbb06 	br	62c74 <_free_r+0x164>
   62d88:	21800515 	stw	r6,20(r4)
   62d8c:	21800415 	stw	r6,16(r4)
   62d90:	10c00054 	ori	r3,r2,1
   62d94:	31c00315 	stw	r7,12(r6)
   62d98:	31c00215 	stw	r7,8(r6)
   62d9c:	30c00115 	stw	r3,4(r6)
   62da0:	308d883a 	add	r6,r6,r2
   62da4:	30800015 	stw	r2,0(r6)
   62da8:	003f9506 	br	62c00 <_free_r+0xf0>
   62dac:	00c01504 	movi	r3,84
   62db0:	19400536 	bltu	r3,r5,62dc8 <_free_r+0x2b8>
   62db4:	100ad33a 	srli	r5,r2,12
   62db8:	28c01bc4 	addi	r3,r5,111
   62dbc:	18c7883a 	add	r3,r3,r3
   62dc0:	29401b84 	addi	r5,r5,110
   62dc4:	003f9c06 	br	62c38 <_free_r+0x128>
   62dc8:	00c05504 	movi	r3,340
   62dcc:	19400536 	bltu	r3,r5,62de4 <_free_r+0x2d4>
   62dd0:	100ad3fa 	srli	r5,r2,15
   62dd4:	28c01e04 	addi	r3,r5,120
   62dd8:	18c7883a 	add	r3,r3,r3
   62ddc:	29401dc4 	addi	r5,r5,119
   62de0:	003f9506 	br	62c38 <_free_r+0x128>
   62de4:	00c15504 	movi	r3,1364
   62de8:	19400536 	bltu	r3,r5,62e00 <_free_r+0x2f0>
   62dec:	100ad4ba 	srli	r5,r2,18
   62df0:	28c01f44 	addi	r3,r5,125
   62df4:	18c7883a 	add	r3,r3,r3
   62df8:	29401f04 	addi	r5,r5,124
   62dfc:	003f8e06 	br	62c38 <_free_r+0x128>
   62e00:	00c03f84 	movi	r3,254
   62e04:	01401f84 	movi	r5,126
   62e08:	003f8b06 	br	62c38 <_free_r+0x128>
   62e0c:	10c00054 	ori	r3,r2,1
   62e10:	30c00115 	stw	r3,4(r6)
   62e14:	308d883a 	add	r6,r6,r2
   62e18:	30800015 	stw	r2,0(r6)
   62e1c:	003f7806 	br	62c00 <_free_r+0xf0>

00062e20 <_lseek_r>:
   62e20:	defffd04 	addi	sp,sp,-12
   62e24:	2805883a 	mov	r2,r5
   62e28:	dc000015 	stw	r16,0(sp)
   62e2c:	04000134 	movhi	r16,4
   62e30:	dc400115 	stw	r17,4(sp)
   62e34:	300b883a 	mov	r5,r6
   62e38:	8406b604 	addi	r16,r16,6872
   62e3c:	2023883a 	mov	r17,r4
   62e40:	380d883a 	mov	r6,r7
   62e44:	1009883a 	mov	r4,r2
   62e48:	dfc00215 	stw	ra,8(sp)
   62e4c:	80000015 	stw	zero,0(r16)
   62e50:	00637380 	call	63738 <lseek>
   62e54:	00ffffc4 	movi	r3,-1
   62e58:	10c00526 	beq	r2,r3,62e70 <_lseek_r+0x50>
   62e5c:	dfc00217 	ldw	ra,8(sp)
   62e60:	dc400117 	ldw	r17,4(sp)
   62e64:	dc000017 	ldw	r16,0(sp)
   62e68:	dec00304 	addi	sp,sp,12
   62e6c:	f800283a 	ret
   62e70:	80c00017 	ldw	r3,0(r16)
   62e74:	183ff926 	beq	r3,zero,62e5c <_lseek_r+0x3c>
   62e78:	88c00015 	stw	r3,0(r17)
   62e7c:	003ff706 	br	62e5c <_lseek_r+0x3c>

00062e80 <__smakebuf_r>:
   62e80:	2880030b 	ldhu	r2,12(r5)
   62e84:	10c0008c 	andi	r3,r2,2
   62e88:	1800411e 	bne	r3,zero,62f90 <__smakebuf_r+0x110>
   62e8c:	deffec04 	addi	sp,sp,-80
   62e90:	dc000f15 	stw	r16,60(sp)
   62e94:	2821883a 	mov	r16,r5
   62e98:	2940038f 	ldh	r5,14(r5)
   62e9c:	dc401015 	stw	r17,64(sp)
   62ea0:	dfc01315 	stw	ra,76(sp)
   62ea4:	dcc01215 	stw	r19,72(sp)
   62ea8:	dc801115 	stw	r18,68(sp)
   62eac:	2023883a 	mov	r17,r4
   62eb0:	28001c16 	blt	r5,zero,62f24 <__smakebuf_r+0xa4>
   62eb4:	d80d883a 	mov	r6,sp
   62eb8:	006309c0 	call	6309c <_fstat_r>
   62ebc:	10001816 	blt	r2,zero,62f20 <__smakebuf_r+0xa0>
   62ec0:	d8800117 	ldw	r2,4(sp)
   62ec4:	00e00014 	movui	r3,32768
   62ec8:	10bc000c 	andi	r2,r2,61440
   62ecc:	14c80020 	cmpeqi	r19,r2,8192
   62ed0:	10c03726 	beq	r2,r3,62fb0 <__smakebuf_r+0x130>
   62ed4:	80c0030b 	ldhu	r3,12(r16)
   62ed8:	18c20014 	ori	r3,r3,2048
   62edc:	80c0030d 	sth	r3,12(r16)
   62ee0:	00c80004 	movi	r3,8192
   62ee4:	10c0521e 	bne	r2,r3,63030 <__smakebuf_r+0x1b0>
   62ee8:	8140038f 	ldh	r5,14(r16)
   62eec:	8809883a 	mov	r4,r17
   62ef0:	00630f80 	call	630f8 <_isatty_r>
   62ef4:	10004c26 	beq	r2,zero,63028 <__smakebuf_r+0x1a8>
   62ef8:	8080030b 	ldhu	r2,12(r16)
   62efc:	80c010c4 	addi	r3,r16,67
   62f00:	80c00015 	stw	r3,0(r16)
   62f04:	10800054 	ori	r2,r2,1
   62f08:	8080030d 	sth	r2,12(r16)
   62f0c:	00800044 	movi	r2,1
   62f10:	80c00415 	stw	r3,16(r16)
   62f14:	80800515 	stw	r2,20(r16)
   62f18:	04810004 	movi	r18,1024
   62f1c:	00000706 	br	62f3c <__smakebuf_r+0xbc>
   62f20:	8080030b 	ldhu	r2,12(r16)
   62f24:	10c0200c 	andi	r3,r2,128
   62f28:	18001f1e 	bne	r3,zero,62fa8 <__smakebuf_r+0x128>
   62f2c:	04810004 	movi	r18,1024
   62f30:	10820014 	ori	r2,r2,2048
   62f34:	8080030d 	sth	r2,12(r16)
   62f38:	0027883a 	mov	r19,zero
   62f3c:	900b883a 	mov	r5,r18
   62f40:	8809883a 	mov	r4,r17
   62f44:	00610880 	call	61088 <_malloc_r>
   62f48:	10002c26 	beq	r2,zero,62ffc <__smakebuf_r+0x17c>
   62f4c:	80c0030b 	ldhu	r3,12(r16)
   62f50:	010001b4 	movhi	r4,6
   62f54:	2101a404 	addi	r4,r4,1680
   62f58:	89000f15 	stw	r4,60(r17)
   62f5c:	18c02014 	ori	r3,r3,128
   62f60:	80c0030d 	sth	r3,12(r16)
   62f64:	80800015 	stw	r2,0(r16)
   62f68:	80800415 	stw	r2,16(r16)
   62f6c:	84800515 	stw	r18,20(r16)
   62f70:	98001a1e 	bne	r19,zero,62fdc <__smakebuf_r+0x15c>
   62f74:	dfc01317 	ldw	ra,76(sp)
   62f78:	dcc01217 	ldw	r19,72(sp)
   62f7c:	dc801117 	ldw	r18,68(sp)
   62f80:	dc401017 	ldw	r17,64(sp)
   62f84:	dc000f17 	ldw	r16,60(sp)
   62f88:	dec01404 	addi	sp,sp,80
   62f8c:	f800283a 	ret
   62f90:	288010c4 	addi	r2,r5,67
   62f94:	28800015 	stw	r2,0(r5)
   62f98:	28800415 	stw	r2,16(r5)
   62f9c:	00800044 	movi	r2,1
   62fa0:	28800515 	stw	r2,20(r5)
   62fa4:	f800283a 	ret
   62fa8:	04801004 	movi	r18,64
   62fac:	003fe006 	br	62f30 <__smakebuf_r+0xb0>
   62fb0:	81000a17 	ldw	r4,40(r16)
   62fb4:	00c001b4 	movhi	r3,6
   62fb8:	18c8f504 	addi	r3,r3,9172
   62fbc:	20ffc51e 	bne	r4,r3,62ed4 <__smakebuf_r+0x54>
   62fc0:	8080030b 	ldhu	r2,12(r16)
   62fc4:	04810004 	movi	r18,1024
   62fc8:	84801315 	stw	r18,76(r16)
   62fcc:	1484b03a 	or	r2,r2,r18
   62fd0:	8080030d 	sth	r2,12(r16)
   62fd4:	0027883a 	mov	r19,zero
   62fd8:	003fd806 	br	62f3c <__smakebuf_r+0xbc>
   62fdc:	8140038f 	ldh	r5,14(r16)
   62fe0:	8809883a 	mov	r4,r17
   62fe4:	00630f80 	call	630f8 <_isatty_r>
   62fe8:	103fe226 	beq	r2,zero,62f74 <__smakebuf_r+0xf4>
   62fec:	8080030b 	ldhu	r2,12(r16)
   62ff0:	10800054 	ori	r2,r2,1
   62ff4:	8080030d 	sth	r2,12(r16)
   62ff8:	003fde06 	br	62f74 <__smakebuf_r+0xf4>
   62ffc:	8080030b 	ldhu	r2,12(r16)
   63000:	10c0800c 	andi	r3,r2,512
   63004:	183fdb1e 	bne	r3,zero,62f74 <__smakebuf_r+0xf4>
   63008:	10800094 	ori	r2,r2,2
   6300c:	80c010c4 	addi	r3,r16,67
   63010:	8080030d 	sth	r2,12(r16)
   63014:	00800044 	movi	r2,1
   63018:	80c00015 	stw	r3,0(r16)
   6301c:	80c00415 	stw	r3,16(r16)
   63020:	80800515 	stw	r2,20(r16)
   63024:	003fd306 	br	62f74 <__smakebuf_r+0xf4>
   63028:	04810004 	movi	r18,1024
   6302c:	003fc306 	br	62f3c <__smakebuf_r+0xbc>
   63030:	0027883a 	mov	r19,zero
   63034:	04810004 	movi	r18,1024
   63038:	003fc006 	br	62f3c <__smakebuf_r+0xbc>

0006303c <_read_r>:
   6303c:	defffd04 	addi	sp,sp,-12
   63040:	2805883a 	mov	r2,r5
   63044:	dc000015 	stw	r16,0(sp)
   63048:	04000134 	movhi	r16,4
   6304c:	dc400115 	stw	r17,4(sp)
   63050:	300b883a 	mov	r5,r6
   63054:	8406b604 	addi	r16,r16,6872
   63058:	2023883a 	mov	r17,r4
   6305c:	380d883a 	mov	r6,r7
   63060:	1009883a 	mov	r4,r2
   63064:	dfc00215 	stw	ra,8(sp)
   63068:	80000015 	stw	zero,0(r16)
   6306c:	00639140 	call	63914 <read>
   63070:	00ffffc4 	movi	r3,-1
   63074:	10c00526 	beq	r2,r3,6308c <_read_r+0x50>
   63078:	dfc00217 	ldw	ra,8(sp)
   6307c:	dc400117 	ldw	r17,4(sp)
   63080:	dc000017 	ldw	r16,0(sp)
   63084:	dec00304 	addi	sp,sp,12
   63088:	f800283a 	ret
   6308c:	80c00017 	ldw	r3,0(r16)
   63090:	183ff926 	beq	r3,zero,63078 <_read_r+0x3c>
   63094:	88c00015 	stw	r3,0(r17)
   63098:	003ff706 	br	63078 <_read_r+0x3c>

0006309c <_fstat_r>:
   6309c:	defffd04 	addi	sp,sp,-12
   630a0:	2805883a 	mov	r2,r5
   630a4:	dc000015 	stw	r16,0(sp)
   630a8:	04000134 	movhi	r16,4
   630ac:	dc400115 	stw	r17,4(sp)
   630b0:	8406b604 	addi	r16,r16,6872
   630b4:	2023883a 	mov	r17,r4
   630b8:	300b883a 	mov	r5,r6
   630bc:	1009883a 	mov	r4,r2
   630c0:	dfc00215 	stw	ra,8(sp)
   630c4:	80000015 	stw	zero,0(r16)
   630c8:	00632f00 	call	632f0 <fstat>
   630cc:	00ffffc4 	movi	r3,-1
   630d0:	10c00526 	beq	r2,r3,630e8 <_fstat_r+0x4c>
   630d4:	dfc00217 	ldw	ra,8(sp)
   630d8:	dc400117 	ldw	r17,4(sp)
   630dc:	dc000017 	ldw	r16,0(sp)
   630e0:	dec00304 	addi	sp,sp,12
   630e4:	f800283a 	ret
   630e8:	80c00017 	ldw	r3,0(r16)
   630ec:	183ff926 	beq	r3,zero,630d4 <_fstat_r+0x38>
   630f0:	88c00015 	stw	r3,0(r17)
   630f4:	003ff706 	br	630d4 <_fstat_r+0x38>

000630f8 <_isatty_r>:
   630f8:	defffd04 	addi	sp,sp,-12
   630fc:	dc000015 	stw	r16,0(sp)
   63100:	04000134 	movhi	r16,4
   63104:	dc400115 	stw	r17,4(sp)
   63108:	8406b604 	addi	r16,r16,6872
   6310c:	2023883a 	mov	r17,r4
   63110:	2809883a 	mov	r4,r5
   63114:	dfc00215 	stw	ra,8(sp)
   63118:	80000015 	stw	zero,0(r16)
   6311c:	00635640 	call	63564 <isatty>
   63120:	00ffffc4 	movi	r3,-1
   63124:	10c00526 	beq	r2,r3,6313c <_isatty_r+0x44>
   63128:	dfc00217 	ldw	ra,8(sp)
   6312c:	dc400117 	ldw	r17,4(sp)
   63130:	dc000017 	ldw	r16,0(sp)
   63134:	dec00304 	addi	sp,sp,12
   63138:	f800283a 	ret
   6313c:	80c00017 	ldw	r3,0(r16)
   63140:	183ff926 	beq	r3,zero,63128 <_isatty_r+0x30>
   63144:	88c00015 	stw	r3,0(r17)
   63148:	003ff706 	br	63128 <_isatty_r+0x30>

0006314c <__mulsi3>:
   6314c:	0005883a 	mov	r2,zero
   63150:	20000726 	beq	r4,zero,63170 <__mulsi3+0x24>
   63154:	20c0004c 	andi	r3,r4,1
   63158:	2008d07a 	srli	r4,r4,1
   6315c:	18000126 	beq	r3,zero,63164 <__mulsi3+0x18>
   63160:	1145883a 	add	r2,r2,r5
   63164:	294b883a 	add	r5,r5,r5
   63168:	203ffa1e 	bne	r4,zero,63154 <__mulsi3+0x8>
   6316c:	f800283a 	ret
   63170:	f800283a 	ret

00063174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   63174:	defffe04 	addi	sp,sp,-8
   63178:	dfc00115 	stw	ra,4(sp)
   6317c:	df000015 	stw	fp,0(sp)
   63180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   63184:	d0a00b17 	ldw	r2,-32724(gp)
   63188:	10000326 	beq	r2,zero,63198 <alt_get_errno+0x24>
   6318c:	d0a00b17 	ldw	r2,-32724(gp)
   63190:	103ee83a 	callr	r2
   63194:	00000106 	br	6319c <alt_get_errno+0x28>
   63198:	d0a01604 	addi	r2,gp,-32680
}
   6319c:	e037883a 	mov	sp,fp
   631a0:	dfc00117 	ldw	ra,4(sp)
   631a4:	df000017 	ldw	fp,0(sp)
   631a8:	dec00204 	addi	sp,sp,8
   631ac:	f800283a 	ret

000631b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   631b0:	defffb04 	addi	sp,sp,-20
   631b4:	dfc00415 	stw	ra,16(sp)
   631b8:	df000315 	stw	fp,12(sp)
   631bc:	df000304 	addi	fp,sp,12
   631c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   631c4:	e0bfff17 	ldw	r2,-4(fp)
   631c8:	10000816 	blt	r2,zero,631ec <close+0x3c>
   631cc:	01400304 	movi	r5,12
   631d0:	e13fff17 	ldw	r4,-4(fp)
   631d4:	006314c0 	call	6314c <__mulsi3>
   631d8:	1007883a 	mov	r3,r2
   631dc:	00800134 	movhi	r2,4
   631e0:	10822804 	addi	r2,r2,2208
   631e4:	1885883a 	add	r2,r3,r2
   631e8:	00000106 	br	631f0 <close+0x40>
   631ec:	0005883a 	mov	r2,zero
   631f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   631f4:	e0bffd17 	ldw	r2,-12(fp)
   631f8:	10001926 	beq	r2,zero,63260 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   631fc:	e0bffd17 	ldw	r2,-12(fp)
   63200:	10800017 	ldw	r2,0(r2)
   63204:	10800417 	ldw	r2,16(r2)
   63208:	10000626 	beq	r2,zero,63224 <close+0x74>
   6320c:	e0bffd17 	ldw	r2,-12(fp)
   63210:	10800017 	ldw	r2,0(r2)
   63214:	10800417 	ldw	r2,16(r2)
   63218:	e13ffd17 	ldw	r4,-12(fp)
   6321c:	103ee83a 	callr	r2
   63220:	00000106 	br	63228 <close+0x78>
   63224:	0005883a 	mov	r2,zero
   63228:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   6322c:	e13fff17 	ldw	r4,-4(fp)
   63230:	0063a180 	call	63a18 <alt_release_fd>
    if (rval < 0)
   63234:	e0bffe17 	ldw	r2,-8(fp)
   63238:	1000070e 	bge	r2,zero,63258 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   6323c:	00631740 	call	63174 <alt_get_errno>
   63240:	1007883a 	mov	r3,r2
   63244:	e0bffe17 	ldw	r2,-8(fp)
   63248:	0085c83a 	sub	r2,zero,r2
   6324c:	18800015 	stw	r2,0(r3)
      return -1;
   63250:	00bfffc4 	movi	r2,-1
   63254:	00000706 	br	63274 <close+0xc4>
    }
    return 0;
   63258:	0005883a 	mov	r2,zero
   6325c:	00000506 	br	63274 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   63260:	00631740 	call	63174 <alt_get_errno>
   63264:	1007883a 	mov	r3,r2
   63268:	00801444 	movi	r2,81
   6326c:	18800015 	stw	r2,0(r3)
    return -1;
   63270:	00bfffc4 	movi	r2,-1
  }
}
   63274:	e037883a 	mov	sp,fp
   63278:	dfc00117 	ldw	ra,4(sp)
   6327c:	df000017 	ldw	fp,0(sp)
   63280:	dec00204 	addi	sp,sp,8
   63284:	f800283a 	ret

00063288 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   63288:	defffc04 	addi	sp,sp,-16
   6328c:	df000315 	stw	fp,12(sp)
   63290:	df000304 	addi	fp,sp,12
   63294:	e13ffd15 	stw	r4,-12(fp)
   63298:	e17ffe15 	stw	r5,-8(fp)
   6329c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   632a0:	e0bfff17 	ldw	r2,-4(fp)
}
   632a4:	e037883a 	mov	sp,fp
   632a8:	df000017 	ldw	fp,0(sp)
   632ac:	dec00104 	addi	sp,sp,4
   632b0:	f800283a 	ret

000632b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   632b4:	defffe04 	addi	sp,sp,-8
   632b8:	dfc00115 	stw	ra,4(sp)
   632bc:	df000015 	stw	fp,0(sp)
   632c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   632c4:	d0a00b17 	ldw	r2,-32724(gp)
   632c8:	10000326 	beq	r2,zero,632d8 <alt_get_errno+0x24>
   632cc:	d0a00b17 	ldw	r2,-32724(gp)
   632d0:	103ee83a 	callr	r2
   632d4:	00000106 	br	632dc <alt_get_errno+0x28>
   632d8:	d0a01604 	addi	r2,gp,-32680
}
   632dc:	e037883a 	mov	sp,fp
   632e0:	dfc00117 	ldw	ra,4(sp)
   632e4:	df000017 	ldw	fp,0(sp)
   632e8:	dec00204 	addi	sp,sp,8
   632ec:	f800283a 	ret

000632f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   632f0:	defffb04 	addi	sp,sp,-20
   632f4:	dfc00415 	stw	ra,16(sp)
   632f8:	df000315 	stw	fp,12(sp)
   632fc:	df000304 	addi	fp,sp,12
   63300:	e13ffe15 	stw	r4,-8(fp)
   63304:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   63308:	e0bffe17 	ldw	r2,-8(fp)
   6330c:	10000816 	blt	r2,zero,63330 <fstat+0x40>
   63310:	01400304 	movi	r5,12
   63314:	e13ffe17 	ldw	r4,-8(fp)
   63318:	006314c0 	call	6314c <__mulsi3>
   6331c:	1007883a 	mov	r3,r2
   63320:	00800134 	movhi	r2,4
   63324:	10822804 	addi	r2,r2,2208
   63328:	1885883a 	add	r2,r3,r2
   6332c:	00000106 	br	63334 <fstat+0x44>
   63330:	0005883a 	mov	r2,zero
   63334:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   63338:	e0bffd17 	ldw	r2,-12(fp)
   6333c:	10001026 	beq	r2,zero,63380 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   63340:	e0bffd17 	ldw	r2,-12(fp)
   63344:	10800017 	ldw	r2,0(r2)
   63348:	10800817 	ldw	r2,32(r2)
   6334c:	10000726 	beq	r2,zero,6336c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   63350:	e0bffd17 	ldw	r2,-12(fp)
   63354:	10800017 	ldw	r2,0(r2)
   63358:	10800817 	ldw	r2,32(r2)
   6335c:	e17fff17 	ldw	r5,-4(fp)
   63360:	e13ffd17 	ldw	r4,-12(fp)
   63364:	103ee83a 	callr	r2
   63368:	00000a06 	br	63394 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   6336c:	e0bfff17 	ldw	r2,-4(fp)
   63370:	00c80004 	movi	r3,8192
   63374:	10c00115 	stw	r3,4(r2)
      return 0;
   63378:	0005883a 	mov	r2,zero
   6337c:	00000506 	br	63394 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   63380:	00632b40 	call	632b4 <alt_get_errno>
   63384:	1007883a 	mov	r3,r2
   63388:	00801444 	movi	r2,81
   6338c:	18800015 	stw	r2,0(r3)
    return -1;
   63390:	00bfffc4 	movi	r2,-1
  }
}
   63394:	e037883a 	mov	sp,fp
   63398:	dfc00117 	ldw	ra,4(sp)
   6339c:	df000017 	ldw	fp,0(sp)
   633a0:	dec00204 	addi	sp,sp,8
   633a4:	f800283a 	ret

000633a8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   633a8:	defff004 	addi	sp,sp,-64
   633ac:	df000f15 	stw	fp,60(sp)
   633b0:	df000f04 	addi	fp,sp,60
   633b4:	e13ffd15 	stw	r4,-12(fp)
   633b8:	e17ffe15 	stw	r5,-8(fp)
   633bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   633c0:	00bffa84 	movi	r2,-22
   633c4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   633c8:	e0bffd17 	ldw	r2,-12(fp)
   633cc:	10800828 	cmpgeui	r2,r2,32
   633d0:	1000501e 	bne	r2,zero,63514 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   633d4:	0005303a 	rdctl	r2,status
   633d8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   633dc:	e0fff617 	ldw	r3,-40(fp)
   633e0:	00bfff84 	movi	r2,-2
   633e4:	1884703a 	and	r2,r3,r2
   633e8:	1001703a 	wrctl	status,r2
  
  return context;
   633ec:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   633f0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   633f4:	00800134 	movhi	r2,4
   633f8:	1086c804 	addi	r2,r2,6944
   633fc:	e0fffd17 	ldw	r3,-12(fp)
   63400:	180690fa 	slli	r3,r3,3
   63404:	10c5883a 	add	r2,r2,r3
   63408:	e0ffff17 	ldw	r3,-4(fp)
   6340c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   63410:	00800134 	movhi	r2,4
   63414:	1086c804 	addi	r2,r2,6944
   63418:	e0fffd17 	ldw	r3,-12(fp)
   6341c:	180690fa 	slli	r3,r3,3
   63420:	10c5883a 	add	r2,r2,r3
   63424:	10800104 	addi	r2,r2,4
   63428:	e0fffe17 	ldw	r3,-8(fp)
   6342c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   63430:	e0bfff17 	ldw	r2,-4(fp)
   63434:	10001926 	beq	r2,zero,6349c <alt_irq_register+0xf4>
   63438:	e0bffd17 	ldw	r2,-12(fp)
   6343c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   63440:	0005303a 	rdctl	r2,status
   63444:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   63448:	e0fff717 	ldw	r3,-36(fp)
   6344c:	00bfff84 	movi	r2,-2
   63450:	1884703a 	and	r2,r3,r2
   63454:	1001703a 	wrctl	status,r2
  
  return context;
   63458:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   6345c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   63460:	00c00044 	movi	r3,1
   63464:	e0bff217 	ldw	r2,-56(fp)
   63468:	1884983a 	sll	r2,r3,r2
   6346c:	1007883a 	mov	r3,r2
   63470:	d0a01717 	ldw	r2,-32676(gp)
   63474:	1884b03a 	or	r2,r3,r2
   63478:	d0a01715 	stw	r2,-32676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   6347c:	d0a01717 	ldw	r2,-32676(gp)
   63480:	100170fa 	wrctl	ienable,r2
   63484:	e0bff817 	ldw	r2,-32(fp)
   63488:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   6348c:	e0bff917 	ldw	r2,-28(fp)
   63490:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   63494:	0005883a 	mov	r2,zero
   63498:	00001906 	br	63500 <alt_irq_register+0x158>
   6349c:	e0bffd17 	ldw	r2,-12(fp)
   634a0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   634a4:	0005303a 	rdctl	r2,status
   634a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   634ac:	e0fffa17 	ldw	r3,-24(fp)
   634b0:	00bfff84 	movi	r2,-2
   634b4:	1884703a 	and	r2,r3,r2
   634b8:	1001703a 	wrctl	status,r2
  
  return context;
   634bc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   634c0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   634c4:	00c00044 	movi	r3,1
   634c8:	e0bff417 	ldw	r2,-48(fp)
   634cc:	1884983a 	sll	r2,r3,r2
   634d0:	0084303a 	nor	r2,zero,r2
   634d4:	1007883a 	mov	r3,r2
   634d8:	d0a01717 	ldw	r2,-32676(gp)
   634dc:	1884703a 	and	r2,r3,r2
   634e0:	d0a01715 	stw	r2,-32676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   634e4:	d0a01717 	ldw	r2,-32676(gp)
   634e8:	100170fa 	wrctl	ienable,r2
   634ec:	e0bffb17 	ldw	r2,-20(fp)
   634f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   634f4:	e0bffc17 	ldw	r2,-16(fp)
   634f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   634fc:	0005883a 	mov	r2,zero
   63500:	e0bff115 	stw	r2,-60(fp)
   63504:	e0bff317 	ldw	r2,-52(fp)
   63508:	e0bff515 	stw	r2,-44(fp)
   6350c:	e0bff517 	ldw	r2,-44(fp)
   63510:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   63514:	e0bff117 	ldw	r2,-60(fp)
}
   63518:	e037883a 	mov	sp,fp
   6351c:	df000017 	ldw	fp,0(sp)
   63520:	dec00104 	addi	sp,sp,4
   63524:	f800283a 	ret

00063528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   63528:	defffe04 	addi	sp,sp,-8
   6352c:	dfc00115 	stw	ra,4(sp)
   63530:	df000015 	stw	fp,0(sp)
   63534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   63538:	d0a00b17 	ldw	r2,-32724(gp)
   6353c:	10000326 	beq	r2,zero,6354c <alt_get_errno+0x24>
   63540:	d0a00b17 	ldw	r2,-32724(gp)
   63544:	103ee83a 	callr	r2
   63548:	00000106 	br	63550 <alt_get_errno+0x28>
   6354c:	d0a01604 	addi	r2,gp,-32680
}
   63550:	e037883a 	mov	sp,fp
   63554:	dfc00117 	ldw	ra,4(sp)
   63558:	df000017 	ldw	fp,0(sp)
   6355c:	dec00204 	addi	sp,sp,8
   63560:	f800283a 	ret

00063564 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   63564:	deffed04 	addi	sp,sp,-76
   63568:	dfc01215 	stw	ra,72(sp)
   6356c:	df001115 	stw	fp,68(sp)
   63570:	df001104 	addi	fp,sp,68
   63574:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   63578:	e0bfff17 	ldw	r2,-4(fp)
   6357c:	10000816 	blt	r2,zero,635a0 <isatty+0x3c>
   63580:	01400304 	movi	r5,12
   63584:	e13fff17 	ldw	r4,-4(fp)
   63588:	006314c0 	call	6314c <__mulsi3>
   6358c:	1007883a 	mov	r3,r2
   63590:	00800134 	movhi	r2,4
   63594:	10822804 	addi	r2,r2,2208
   63598:	1885883a 	add	r2,r3,r2
   6359c:	00000106 	br	635a4 <isatty+0x40>
   635a0:	0005883a 	mov	r2,zero
   635a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   635a8:	e0bfef17 	ldw	r2,-68(fp)
   635ac:	10000e26 	beq	r2,zero,635e8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   635b0:	e0bfef17 	ldw	r2,-68(fp)
   635b4:	10800017 	ldw	r2,0(r2)
   635b8:	10800817 	ldw	r2,32(r2)
   635bc:	1000021e 	bne	r2,zero,635c8 <isatty+0x64>
    {
      return 1;
   635c0:	00800044 	movi	r2,1
   635c4:	00000d06 	br	635fc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   635c8:	e0bff004 	addi	r2,fp,-64
   635cc:	100b883a 	mov	r5,r2
   635d0:	e13fff17 	ldw	r4,-4(fp)
   635d4:	00632f00 	call	632f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   635d8:	e0bff117 	ldw	r2,-60(fp)
   635dc:	10880020 	cmpeqi	r2,r2,8192
   635e0:	10803fcc 	andi	r2,r2,255
   635e4:	00000506 	br	635fc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   635e8:	00635280 	call	63528 <alt_get_errno>
   635ec:	1007883a 	mov	r3,r2
   635f0:	00801444 	movi	r2,81
   635f4:	18800015 	stw	r2,0(r3)
    return 0;
   635f8:	0005883a 	mov	r2,zero
  }
}
   635fc:	e037883a 	mov	sp,fp
   63600:	dfc00117 	ldw	ra,4(sp)
   63604:	df000017 	ldw	fp,0(sp)
   63608:	dec00204 	addi	sp,sp,8
   6360c:	f800283a 	ret

00063610 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   63610:	defffc04 	addi	sp,sp,-16
   63614:	df000315 	stw	fp,12(sp)
   63618:	df000304 	addi	fp,sp,12
   6361c:	e13ffd15 	stw	r4,-12(fp)
   63620:	e17ffe15 	stw	r5,-8(fp)
   63624:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   63628:	e0fffe17 	ldw	r3,-8(fp)
   6362c:	e0bffd17 	ldw	r2,-12(fp)
   63630:	18800c26 	beq	r3,r2,63664 <alt_load_section+0x54>
  {
    while( to != end )
   63634:	00000806 	br	63658 <alt_load_section+0x48>
    {
      *to++ = *from++;
   63638:	e0bffe17 	ldw	r2,-8(fp)
   6363c:	10c00104 	addi	r3,r2,4
   63640:	e0fffe15 	stw	r3,-8(fp)
   63644:	e0fffd17 	ldw	r3,-12(fp)
   63648:	19000104 	addi	r4,r3,4
   6364c:	e13ffd15 	stw	r4,-12(fp)
   63650:	18c00017 	ldw	r3,0(r3)
   63654:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   63658:	e0fffe17 	ldw	r3,-8(fp)
   6365c:	e0bfff17 	ldw	r2,-4(fp)
   63660:	18bff51e 	bne	r3,r2,63638 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   63664:	0001883a 	nop
   63668:	e037883a 	mov	sp,fp
   6366c:	df000017 	ldw	fp,0(sp)
   63670:	dec00104 	addi	sp,sp,4
   63674:	f800283a 	ret

00063678 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   63678:	defffe04 	addi	sp,sp,-8
   6367c:	dfc00115 	stw	ra,4(sp)
   63680:	df000015 	stw	fp,0(sp)
   63684:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   63688:	01800134 	movhi	r6,4
   6368c:	3186b004 	addi	r6,r6,6848
   63690:	01400134 	movhi	r5,4
   63694:	29401304 	addi	r5,r5,76
   63698:	010001b4 	movhi	r4,6
   6369c:	21166204 	addi	r4,r4,22920
   636a0:	00636100 	call	63610 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   636a4:	018001b4 	movhi	r6,6
   636a8:	31808c04 	addi	r6,r6,560
   636ac:	014001b4 	movhi	r5,6
   636b0:	29400804 	addi	r5,r5,32
   636b4:	010001b4 	movhi	r4,6
   636b8:	21000804 	addi	r4,r4,32
   636bc:	00636100 	call	63610 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   636c0:	01800134 	movhi	r6,4
   636c4:	31801304 	addi	r6,r6,76
   636c8:	01400134 	movhi	r5,4
   636cc:	29400004 	addi	r5,r5,0
   636d0:	01000134 	movhi	r4,4
   636d4:	21000004 	addi	r4,r4,0
   636d8:	00636100 	call	63610 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   636dc:	00648d00 	call	648d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   636e0:	0064a900 	call	64a90 <alt_icache_flush_all>
}
   636e4:	0001883a 	nop
   636e8:	e037883a 	mov	sp,fp
   636ec:	dfc00117 	ldw	ra,4(sp)
   636f0:	df000017 	ldw	fp,0(sp)
   636f4:	dec00204 	addi	sp,sp,8
   636f8:	f800283a 	ret

000636fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   636fc:	defffe04 	addi	sp,sp,-8
   63700:	dfc00115 	stw	ra,4(sp)
   63704:	df000015 	stw	fp,0(sp)
   63708:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   6370c:	d0a00b17 	ldw	r2,-32724(gp)
   63710:	10000326 	beq	r2,zero,63720 <alt_get_errno+0x24>
   63714:	d0a00b17 	ldw	r2,-32724(gp)
   63718:	103ee83a 	callr	r2
   6371c:	00000106 	br	63724 <alt_get_errno+0x28>
   63720:	d0a01604 	addi	r2,gp,-32680
}
   63724:	e037883a 	mov	sp,fp
   63728:	dfc00117 	ldw	ra,4(sp)
   6372c:	df000017 	ldw	fp,0(sp)
   63730:	dec00204 	addi	sp,sp,8
   63734:	f800283a 	ret

00063738 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   63738:	defff904 	addi	sp,sp,-28
   6373c:	dfc00615 	stw	ra,24(sp)
   63740:	df000515 	stw	fp,20(sp)
   63744:	df000504 	addi	fp,sp,20
   63748:	e13ffd15 	stw	r4,-12(fp)
   6374c:	e17ffe15 	stw	r5,-8(fp)
   63750:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   63754:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   63758:	e0bffd17 	ldw	r2,-12(fp)
   6375c:	10000816 	blt	r2,zero,63780 <lseek+0x48>
   63760:	01400304 	movi	r5,12
   63764:	e13ffd17 	ldw	r4,-12(fp)
   63768:	006314c0 	call	6314c <__mulsi3>
   6376c:	1007883a 	mov	r3,r2
   63770:	00800134 	movhi	r2,4
   63774:	10822804 	addi	r2,r2,2208
   63778:	1885883a 	add	r2,r3,r2
   6377c:	00000106 	br	63784 <lseek+0x4c>
   63780:	0005883a 	mov	r2,zero
   63784:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   63788:	e0bffc17 	ldw	r2,-16(fp)
   6378c:	10001026 	beq	r2,zero,637d0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   63790:	e0bffc17 	ldw	r2,-16(fp)
   63794:	10800017 	ldw	r2,0(r2)
   63798:	10800717 	ldw	r2,28(r2)
   6379c:	10000926 	beq	r2,zero,637c4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   637a0:	e0bffc17 	ldw	r2,-16(fp)
   637a4:	10800017 	ldw	r2,0(r2)
   637a8:	10800717 	ldw	r2,28(r2)
   637ac:	e1bfff17 	ldw	r6,-4(fp)
   637b0:	e17ffe17 	ldw	r5,-8(fp)
   637b4:	e13ffc17 	ldw	r4,-16(fp)
   637b8:	103ee83a 	callr	r2
   637bc:	e0bffb15 	stw	r2,-20(fp)
   637c0:	00000506 	br	637d8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   637c4:	00bfde84 	movi	r2,-134
   637c8:	e0bffb15 	stw	r2,-20(fp)
   637cc:	00000206 	br	637d8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   637d0:	00bfebc4 	movi	r2,-81
   637d4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   637d8:	e0bffb17 	ldw	r2,-20(fp)
   637dc:	1000070e 	bge	r2,zero,637fc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   637e0:	00636fc0 	call	636fc <alt_get_errno>
   637e4:	1007883a 	mov	r3,r2
   637e8:	e0bffb17 	ldw	r2,-20(fp)
   637ec:	0085c83a 	sub	r2,zero,r2
   637f0:	18800015 	stw	r2,0(r3)
    rc = -1;
   637f4:	00bfffc4 	movi	r2,-1
   637f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   637fc:	e0bffb17 	ldw	r2,-20(fp)
}
   63800:	e037883a 	mov	sp,fp
   63804:	dfc00117 	ldw	ra,4(sp)
   63808:	df000017 	ldw	fp,0(sp)
   6380c:	dec00204 	addi	sp,sp,8
   63810:	f800283a 	ret

00063814 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   63814:	defffd04 	addi	sp,sp,-12
   63818:	dfc00215 	stw	ra,8(sp)
   6381c:	df000115 	stw	fp,4(sp)
   63820:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   63824:	0009883a 	mov	r4,zero
   63828:	0063cbc0 	call	63cbc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   6382c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   63830:	0063cf40 	call	63cf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   63834:	01800134 	movhi	r6,4
   63838:	31800904 	addi	r6,r6,36
   6383c:	01400134 	movhi	r5,4
   63840:	29400904 	addi	r5,r5,36
   63844:	01000134 	movhi	r4,4
   63848:	21000904 	addi	r4,r4,36
   6384c:	0064e340 	call	64e34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   63850:	00649d00 	call	649d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   63854:	010001b4 	movhi	r4,6
   63858:	21128c04 	addi	r4,r4,18992
   6385c:	00655f40 	call	655f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   63860:	d0a01817 	ldw	r2,-32672(gp)
   63864:	d0e01917 	ldw	r3,-32668(gp)
   63868:	d1201a17 	ldw	r4,-32664(gp)
   6386c:	200d883a 	mov	r6,r4
   63870:	180b883a 	mov	r5,r3
   63874:	1009883a 	mov	r4,r2
   63878:	00603340 	call	60334 <main>
   6387c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   63880:	01000044 	movi	r4,1
   63884:	00631b00 	call	631b0 <close>
  exit (result);
   63888:	e13fff17 	ldw	r4,-4(fp)
   6388c:	00656080 	call	65608 <exit>

00063890 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   63890:	defffe04 	addi	sp,sp,-8
   63894:	df000115 	stw	fp,4(sp)
   63898:	df000104 	addi	fp,sp,4
   6389c:	e13fff15 	stw	r4,-4(fp)
}
   638a0:	0001883a 	nop
   638a4:	e037883a 	mov	sp,fp
   638a8:	df000017 	ldw	fp,0(sp)
   638ac:	dec00104 	addi	sp,sp,4
   638b0:	f800283a 	ret

000638b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   638b4:	defffe04 	addi	sp,sp,-8
   638b8:	df000115 	stw	fp,4(sp)
   638bc:	df000104 	addi	fp,sp,4
   638c0:	e13fff15 	stw	r4,-4(fp)
}
   638c4:	0001883a 	nop
   638c8:	e037883a 	mov	sp,fp
   638cc:	df000017 	ldw	fp,0(sp)
   638d0:	dec00104 	addi	sp,sp,4
   638d4:	f800283a 	ret

000638d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   638d8:	defffe04 	addi	sp,sp,-8
   638dc:	dfc00115 	stw	ra,4(sp)
   638e0:	df000015 	stw	fp,0(sp)
   638e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   638e8:	d0a00b17 	ldw	r2,-32724(gp)
   638ec:	10000326 	beq	r2,zero,638fc <alt_get_errno+0x24>
   638f0:	d0a00b17 	ldw	r2,-32724(gp)
   638f4:	103ee83a 	callr	r2
   638f8:	00000106 	br	63900 <alt_get_errno+0x28>
   638fc:	d0a01604 	addi	r2,gp,-32680
}
   63900:	e037883a 	mov	sp,fp
   63904:	dfc00117 	ldw	ra,4(sp)
   63908:	df000017 	ldw	fp,0(sp)
   6390c:	dec00204 	addi	sp,sp,8
   63910:	f800283a 	ret

00063914 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   63914:	defff904 	addi	sp,sp,-28
   63918:	dfc00615 	stw	ra,24(sp)
   6391c:	df000515 	stw	fp,20(sp)
   63920:	df000504 	addi	fp,sp,20
   63924:	e13ffd15 	stw	r4,-12(fp)
   63928:	e17ffe15 	stw	r5,-8(fp)
   6392c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   63930:	e0bffd17 	ldw	r2,-12(fp)
   63934:	10000816 	blt	r2,zero,63958 <read+0x44>
   63938:	01400304 	movi	r5,12
   6393c:	e13ffd17 	ldw	r4,-12(fp)
   63940:	006314c0 	call	6314c <__mulsi3>
   63944:	1007883a 	mov	r3,r2
   63948:	00800134 	movhi	r2,4
   6394c:	10822804 	addi	r2,r2,2208
   63950:	1885883a 	add	r2,r3,r2
   63954:	00000106 	br	6395c <read+0x48>
   63958:	0005883a 	mov	r2,zero
   6395c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   63960:	e0bffb17 	ldw	r2,-20(fp)
   63964:	10002226 	beq	r2,zero,639f0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   63968:	e0bffb17 	ldw	r2,-20(fp)
   6396c:	10800217 	ldw	r2,8(r2)
   63970:	108000cc 	andi	r2,r2,3
   63974:	10800060 	cmpeqi	r2,r2,1
   63978:	1000181e 	bne	r2,zero,639dc <read+0xc8>
        (fd->dev->read))
   6397c:	e0bffb17 	ldw	r2,-20(fp)
   63980:	10800017 	ldw	r2,0(r2)
   63984:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   63988:	10001426 	beq	r2,zero,639dc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   6398c:	e0bffb17 	ldw	r2,-20(fp)
   63990:	10800017 	ldw	r2,0(r2)
   63994:	10800517 	ldw	r2,20(r2)
   63998:	e0ffff17 	ldw	r3,-4(fp)
   6399c:	180d883a 	mov	r6,r3
   639a0:	e17ffe17 	ldw	r5,-8(fp)
   639a4:	e13ffb17 	ldw	r4,-20(fp)
   639a8:	103ee83a 	callr	r2
   639ac:	e0bffc15 	stw	r2,-16(fp)
   639b0:	e0bffc17 	ldw	r2,-16(fp)
   639b4:	1000070e 	bge	r2,zero,639d4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   639b8:	00638d80 	call	638d8 <alt_get_errno>
   639bc:	1007883a 	mov	r3,r2
   639c0:	e0bffc17 	ldw	r2,-16(fp)
   639c4:	0085c83a 	sub	r2,zero,r2
   639c8:	18800015 	stw	r2,0(r3)
          return -1;
   639cc:	00bfffc4 	movi	r2,-1
   639d0:	00000c06 	br	63a04 <read+0xf0>
        }
        return rval;
   639d4:	e0bffc17 	ldw	r2,-16(fp)
   639d8:	00000a06 	br	63a04 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   639dc:	00638d80 	call	638d8 <alt_get_errno>
   639e0:	1007883a 	mov	r3,r2
   639e4:	00800344 	movi	r2,13
   639e8:	18800015 	stw	r2,0(r3)
   639ec:	00000406 	br	63a00 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   639f0:	00638d80 	call	638d8 <alt_get_errno>
   639f4:	1007883a 	mov	r3,r2
   639f8:	00801444 	movi	r2,81
   639fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   63a00:	00bfffc4 	movi	r2,-1
}
   63a04:	e037883a 	mov	sp,fp
   63a08:	dfc00117 	ldw	ra,4(sp)
   63a0c:	df000017 	ldw	fp,0(sp)
   63a10:	dec00204 	addi	sp,sp,8
   63a14:	f800283a 	ret

00063a18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   63a18:	defffc04 	addi	sp,sp,-16
   63a1c:	dfc00315 	stw	ra,12(sp)
   63a20:	df000215 	stw	fp,8(sp)
   63a24:	dc000115 	stw	r16,4(sp)
   63a28:	df000204 	addi	fp,sp,8
   63a2c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   63a30:	e0bffe17 	ldw	r2,-8(fp)
   63a34:	108000d0 	cmplti	r2,r2,3
   63a38:	1000111e 	bne	r2,zero,63a80 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   63a3c:	04000134 	movhi	r16,4
   63a40:	84022804 	addi	r16,r16,2208
   63a44:	e0bffe17 	ldw	r2,-8(fp)
   63a48:	01400304 	movi	r5,12
   63a4c:	1009883a 	mov	r4,r2
   63a50:	006314c0 	call	6314c <__mulsi3>
   63a54:	8085883a 	add	r2,r16,r2
   63a58:	10800204 	addi	r2,r2,8
   63a5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   63a60:	04000134 	movhi	r16,4
   63a64:	84022804 	addi	r16,r16,2208
   63a68:	e0bffe17 	ldw	r2,-8(fp)
   63a6c:	01400304 	movi	r5,12
   63a70:	1009883a 	mov	r4,r2
   63a74:	006314c0 	call	6314c <__mulsi3>
   63a78:	8085883a 	add	r2,r16,r2
   63a7c:	10000015 	stw	zero,0(r2)
  }
}
   63a80:	0001883a 	nop
   63a84:	e6ffff04 	addi	sp,fp,-4
   63a88:	dfc00217 	ldw	ra,8(sp)
   63a8c:	df000117 	ldw	fp,4(sp)
   63a90:	dc000017 	ldw	r16,0(sp)
   63a94:	dec00304 	addi	sp,sp,12
   63a98:	f800283a 	ret

00063a9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   63a9c:	defff904 	addi	sp,sp,-28
   63aa0:	df000615 	stw	fp,24(sp)
   63aa4:	df000604 	addi	fp,sp,24
   63aa8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   63aac:	0005303a 	rdctl	r2,status
   63ab0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   63ab4:	e0fffe17 	ldw	r3,-8(fp)
   63ab8:	00bfff84 	movi	r2,-2
   63abc:	1884703a 	and	r2,r3,r2
   63ac0:	1001703a 	wrctl	status,r2
  
  return context;
   63ac4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   63ac8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   63acc:	d0a00d17 	ldw	r2,-32716(gp)
   63ad0:	10c000c4 	addi	r3,r2,3
   63ad4:	00bfff04 	movi	r2,-4
   63ad8:	1884703a 	and	r2,r3,r2
   63adc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   63ae0:	d0e00d17 	ldw	r3,-32716(gp)
   63ae4:	e0bfff17 	ldw	r2,-4(fp)
   63ae8:	1887883a 	add	r3,r3,r2
   63aec:	008001b4 	movhi	r2,6
   63af0:	10800004 	addi	r2,r2,0
   63af4:	10c0062e 	bgeu	r2,r3,63b10 <sbrk+0x74>
   63af8:	e0bffb17 	ldw	r2,-20(fp)
   63afc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   63b00:	e0bffa17 	ldw	r2,-24(fp)
   63b04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   63b08:	00bfffc4 	movi	r2,-1
   63b0c:	00000b06 	br	63b3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   63b10:	d0a00d17 	ldw	r2,-32716(gp)
   63b14:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   63b18:	d0e00d17 	ldw	r3,-32716(gp)
   63b1c:	e0bfff17 	ldw	r2,-4(fp)
   63b20:	1885883a 	add	r2,r3,r2
   63b24:	d0a00d15 	stw	r2,-32716(gp)
   63b28:	e0bffb17 	ldw	r2,-20(fp)
   63b2c:	e0bffc15 	stw	r2,-16(fp)
   63b30:	e0bffc17 	ldw	r2,-16(fp)
   63b34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   63b38:	e0bffd17 	ldw	r2,-12(fp)
} 
   63b3c:	e037883a 	mov	sp,fp
   63b40:	df000017 	ldw	fp,0(sp)
   63b44:	dec00104 	addi	sp,sp,4
   63b48:	f800283a 	ret

00063b4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   63b4c:	defffe04 	addi	sp,sp,-8
   63b50:	dfc00115 	stw	ra,4(sp)
   63b54:	df000015 	stw	fp,0(sp)
   63b58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   63b5c:	d0a00b17 	ldw	r2,-32724(gp)
   63b60:	10000326 	beq	r2,zero,63b70 <alt_get_errno+0x24>
   63b64:	d0a00b17 	ldw	r2,-32724(gp)
   63b68:	103ee83a 	callr	r2
   63b6c:	00000106 	br	63b74 <alt_get_errno+0x28>
   63b70:	d0a01604 	addi	r2,gp,-32680
}
   63b74:	e037883a 	mov	sp,fp
   63b78:	dfc00117 	ldw	ra,4(sp)
   63b7c:	df000017 	ldw	fp,0(sp)
   63b80:	dec00204 	addi	sp,sp,8
   63b84:	f800283a 	ret

00063b88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   63b88:	defff904 	addi	sp,sp,-28
   63b8c:	dfc00615 	stw	ra,24(sp)
   63b90:	df000515 	stw	fp,20(sp)
   63b94:	df000504 	addi	fp,sp,20
   63b98:	e13ffd15 	stw	r4,-12(fp)
   63b9c:	e17ffe15 	stw	r5,-8(fp)
   63ba0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   63ba4:	e0bffd17 	ldw	r2,-12(fp)
   63ba8:	10000816 	blt	r2,zero,63bcc <write+0x44>
   63bac:	01400304 	movi	r5,12
   63bb0:	e13ffd17 	ldw	r4,-12(fp)
   63bb4:	006314c0 	call	6314c <__mulsi3>
   63bb8:	1007883a 	mov	r3,r2
   63bbc:	00800134 	movhi	r2,4
   63bc0:	10822804 	addi	r2,r2,2208
   63bc4:	1885883a 	add	r2,r3,r2
   63bc8:	00000106 	br	63bd0 <write+0x48>
   63bcc:	0005883a 	mov	r2,zero
   63bd0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   63bd4:	e0bffb17 	ldw	r2,-20(fp)
   63bd8:	10002126 	beq	r2,zero,63c60 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   63bdc:	e0bffb17 	ldw	r2,-20(fp)
   63be0:	10800217 	ldw	r2,8(r2)
   63be4:	108000cc 	andi	r2,r2,3
   63be8:	10001826 	beq	r2,zero,63c4c <write+0xc4>
   63bec:	e0bffb17 	ldw	r2,-20(fp)
   63bf0:	10800017 	ldw	r2,0(r2)
   63bf4:	10800617 	ldw	r2,24(r2)
   63bf8:	10001426 	beq	r2,zero,63c4c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   63bfc:	e0bffb17 	ldw	r2,-20(fp)
   63c00:	10800017 	ldw	r2,0(r2)
   63c04:	10800617 	ldw	r2,24(r2)
   63c08:	e0ffff17 	ldw	r3,-4(fp)
   63c0c:	180d883a 	mov	r6,r3
   63c10:	e17ffe17 	ldw	r5,-8(fp)
   63c14:	e13ffb17 	ldw	r4,-20(fp)
   63c18:	103ee83a 	callr	r2
   63c1c:	e0bffc15 	stw	r2,-16(fp)
   63c20:	e0bffc17 	ldw	r2,-16(fp)
   63c24:	1000070e 	bge	r2,zero,63c44 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   63c28:	0063b4c0 	call	63b4c <alt_get_errno>
   63c2c:	1007883a 	mov	r3,r2
   63c30:	e0bffc17 	ldw	r2,-16(fp)
   63c34:	0085c83a 	sub	r2,zero,r2
   63c38:	18800015 	stw	r2,0(r3)
        return -1;
   63c3c:	00bfffc4 	movi	r2,-1
   63c40:	00000c06 	br	63c74 <write+0xec>
      }
      return rval;
   63c44:	e0bffc17 	ldw	r2,-16(fp)
   63c48:	00000a06 	br	63c74 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   63c4c:	0063b4c0 	call	63b4c <alt_get_errno>
   63c50:	1007883a 	mov	r3,r2
   63c54:	00800344 	movi	r2,13
   63c58:	18800015 	stw	r2,0(r3)
   63c5c:	00000406 	br	63c70 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   63c60:	0063b4c0 	call	63b4c <alt_get_errno>
   63c64:	1007883a 	mov	r3,r2
   63c68:	00801444 	movi	r2,81
   63c6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   63c70:	00bfffc4 	movi	r2,-1
}
   63c74:	e037883a 	mov	sp,fp
   63c78:	dfc00117 	ldw	ra,4(sp)
   63c7c:	df000017 	ldw	fp,0(sp)
   63c80:	dec00204 	addi	sp,sp,8
   63c84:	f800283a 	ret

00063c88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   63c88:	defffd04 	addi	sp,sp,-12
   63c8c:	dfc00215 	stw	ra,8(sp)
   63c90:	df000115 	stw	fp,4(sp)
   63c94:	df000104 	addi	fp,sp,4
   63c98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   63c9c:	d1600804 	addi	r5,gp,-32736
   63ca0:	e13fff17 	ldw	r4,-4(fp)
   63ca4:	006492c0 	call	6492c <alt_dev_llist_insert>
}
   63ca8:	e037883a 	mov	sp,fp
   63cac:	dfc00117 	ldw	ra,4(sp)
   63cb0:	df000017 	ldw	fp,0(sp)
   63cb4:	dec00204 	addi	sp,sp,8
   63cb8:	f800283a 	ret

00063cbc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   63cbc:	defffd04 	addi	sp,sp,-12
   63cc0:	dfc00215 	stw	ra,8(sp)
   63cc4:	df000115 	stw	fp,4(sp)
   63cc8:	df000104 	addi	fp,sp,4
   63ccc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   63cd0:	00652d80 	call	652d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   63cd4:	00800044 	movi	r2,1
   63cd8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   63cdc:	0001883a 	nop
   63ce0:	e037883a 	mov	sp,fp
   63ce4:	dfc00117 	ldw	ra,4(sp)
   63ce8:	df000017 	ldw	fp,0(sp)
   63cec:	dec00204 	addi	sp,sp,8
   63cf0:	f800283a 	ret

00063cf4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   63cf4:	defffe04 	addi	sp,sp,-8
   63cf8:	dfc00115 	stw	ra,4(sp)
   63cfc:	df000015 	stw	fp,0(sp)
   63d00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   63d04:	000d883a 	mov	r6,zero
   63d08:	000b883a 	mov	r5,zero
   63d0c:	01000134 	movhi	r4,4
   63d10:	21029204 	addi	r4,r4,2632
   63d14:	0063ea00 	call	63ea0 <altera_avalon_jtag_uart_init>
   63d18:	01000134 	movhi	r4,4
   63d1c:	21028804 	addi	r4,r4,2592
   63d20:	0063c880 	call	63c88 <alt_dev_reg>
}
   63d24:	0001883a 	nop
   63d28:	e037883a 	mov	sp,fp
   63d2c:	dfc00117 	ldw	ra,4(sp)
   63d30:	df000017 	ldw	fp,0(sp)
   63d34:	dec00204 	addi	sp,sp,8
   63d38:	f800283a 	ret

00063d3c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   63d3c:	defffa04 	addi	sp,sp,-24
   63d40:	dfc00515 	stw	ra,20(sp)
   63d44:	df000415 	stw	fp,16(sp)
   63d48:	df000404 	addi	fp,sp,16
   63d4c:	e13ffd15 	stw	r4,-12(fp)
   63d50:	e17ffe15 	stw	r5,-8(fp)
   63d54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   63d58:	e0bffd17 	ldw	r2,-12(fp)
   63d5c:	10800017 	ldw	r2,0(r2)
   63d60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   63d64:	e0bffc17 	ldw	r2,-16(fp)
   63d68:	10c00a04 	addi	r3,r2,40
   63d6c:	e0bffd17 	ldw	r2,-12(fp)
   63d70:	10800217 	ldw	r2,8(r2)
   63d74:	100f883a 	mov	r7,r2
   63d78:	e1bfff17 	ldw	r6,-4(fp)
   63d7c:	e17ffe17 	ldw	r5,-8(fp)
   63d80:	1809883a 	mov	r4,r3
   63d84:	00643640 	call	64364 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   63d88:	e037883a 	mov	sp,fp
   63d8c:	dfc00117 	ldw	ra,4(sp)
   63d90:	df000017 	ldw	fp,0(sp)
   63d94:	dec00204 	addi	sp,sp,8
   63d98:	f800283a 	ret

00063d9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   63d9c:	defffa04 	addi	sp,sp,-24
   63da0:	dfc00515 	stw	ra,20(sp)
   63da4:	df000415 	stw	fp,16(sp)
   63da8:	df000404 	addi	fp,sp,16
   63dac:	e13ffd15 	stw	r4,-12(fp)
   63db0:	e17ffe15 	stw	r5,-8(fp)
   63db4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   63db8:	e0bffd17 	ldw	r2,-12(fp)
   63dbc:	10800017 	ldw	r2,0(r2)
   63dc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   63dc4:	e0bffc17 	ldw	r2,-16(fp)
   63dc8:	10c00a04 	addi	r3,r2,40
   63dcc:	e0bffd17 	ldw	r2,-12(fp)
   63dd0:	10800217 	ldw	r2,8(r2)
   63dd4:	100f883a 	mov	r7,r2
   63dd8:	e1bfff17 	ldw	r6,-4(fp)
   63ddc:	e17ffe17 	ldw	r5,-8(fp)
   63de0:	1809883a 	mov	r4,r3
   63de4:	00645800 	call	64580 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   63de8:	e037883a 	mov	sp,fp
   63dec:	dfc00117 	ldw	ra,4(sp)
   63df0:	df000017 	ldw	fp,0(sp)
   63df4:	dec00204 	addi	sp,sp,8
   63df8:	f800283a 	ret

00063dfc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   63dfc:	defffc04 	addi	sp,sp,-16
   63e00:	dfc00315 	stw	ra,12(sp)
   63e04:	df000215 	stw	fp,8(sp)
   63e08:	df000204 	addi	fp,sp,8
   63e0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   63e10:	e0bfff17 	ldw	r2,-4(fp)
   63e14:	10800017 	ldw	r2,0(r2)
   63e18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   63e1c:	e0bffe17 	ldw	r2,-8(fp)
   63e20:	10c00a04 	addi	r3,r2,40
   63e24:	e0bfff17 	ldw	r2,-4(fp)
   63e28:	10800217 	ldw	r2,8(r2)
   63e2c:	100b883a 	mov	r5,r2
   63e30:	1809883a 	mov	r4,r3
   63e34:	006420c0 	call	6420c <altera_avalon_jtag_uart_close>
}
   63e38:	e037883a 	mov	sp,fp
   63e3c:	dfc00117 	ldw	ra,4(sp)
   63e40:	df000017 	ldw	fp,0(sp)
   63e44:	dec00204 	addi	sp,sp,8
   63e48:	f800283a 	ret

00063e4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   63e4c:	defffa04 	addi	sp,sp,-24
   63e50:	dfc00515 	stw	ra,20(sp)
   63e54:	df000415 	stw	fp,16(sp)
   63e58:	df000404 	addi	fp,sp,16
   63e5c:	e13ffd15 	stw	r4,-12(fp)
   63e60:	e17ffe15 	stw	r5,-8(fp)
   63e64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   63e68:	e0bffd17 	ldw	r2,-12(fp)
   63e6c:	10800017 	ldw	r2,0(r2)
   63e70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   63e74:	e0bffc17 	ldw	r2,-16(fp)
   63e78:	10800a04 	addi	r2,r2,40
   63e7c:	e1bfff17 	ldw	r6,-4(fp)
   63e80:	e17ffe17 	ldw	r5,-8(fp)
   63e84:	1009883a 	mov	r4,r2
   63e88:	00642740 	call	64274 <altera_avalon_jtag_uart_ioctl>
}
   63e8c:	e037883a 	mov	sp,fp
   63e90:	dfc00117 	ldw	ra,4(sp)
   63e94:	df000017 	ldw	fp,0(sp)
   63e98:	dec00204 	addi	sp,sp,8
   63e9c:	f800283a 	ret

00063ea0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   63ea0:	defffa04 	addi	sp,sp,-24
   63ea4:	dfc00515 	stw	ra,20(sp)
   63ea8:	df000415 	stw	fp,16(sp)
   63eac:	df000404 	addi	fp,sp,16
   63eb0:	e13ffd15 	stw	r4,-12(fp)
   63eb4:	e17ffe15 	stw	r5,-8(fp)
   63eb8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   63ebc:	e0bffd17 	ldw	r2,-12(fp)
   63ec0:	00c00044 	movi	r3,1
   63ec4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   63ec8:	e0bffd17 	ldw	r2,-12(fp)
   63ecc:	10800017 	ldw	r2,0(r2)
   63ed0:	10800104 	addi	r2,r2,4
   63ed4:	1007883a 	mov	r3,r2
   63ed8:	e0bffd17 	ldw	r2,-12(fp)
   63edc:	10800817 	ldw	r2,32(r2)
   63ee0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   63ee4:	e0bffe17 	ldw	r2,-8(fp)
   63ee8:	e0ffff17 	ldw	r3,-4(fp)
   63eec:	d8000015 	stw	zero,0(sp)
   63ef0:	e1fffd17 	ldw	r7,-12(fp)
   63ef4:	018001b4 	movhi	r6,6
   63ef8:	318fd804 	addi	r6,r6,16224
   63efc:	180b883a 	mov	r5,r3
   63f00:	1009883a 	mov	r4,r2
   63f04:	0064ab00 	call	64ab0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   63f08:	e0bffd17 	ldw	r2,-12(fp)
   63f0c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   63f10:	e0bffd17 	ldw	r2,-12(fp)
   63f14:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   63f18:	d0e01b17 	ldw	r3,-32660(gp)
   63f1c:	e1fffd17 	ldw	r7,-12(fp)
   63f20:	018001b4 	movhi	r6,6
   63f24:	31905b04 	addi	r6,r6,16748
   63f28:	180b883a 	mov	r5,r3
   63f2c:	1009883a 	mov	r4,r2
   63f30:	00647a40 	call	647a4 <alt_alarm_start>
   63f34:	1000040e 	bge	r2,zero,63f48 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   63f38:	e0fffd17 	ldw	r3,-12(fp)
   63f3c:	00a00034 	movhi	r2,32768
   63f40:	10bfffc4 	addi	r2,r2,-1
   63f44:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   63f48:	0001883a 	nop
   63f4c:	e037883a 	mov	sp,fp
   63f50:	dfc00117 	ldw	ra,4(sp)
   63f54:	df000017 	ldw	fp,0(sp)
   63f58:	dec00204 	addi	sp,sp,8
   63f5c:	f800283a 	ret

00063f60 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   63f60:	defff804 	addi	sp,sp,-32
   63f64:	df000715 	stw	fp,28(sp)
   63f68:	df000704 	addi	fp,sp,28
   63f6c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   63f70:	e0bfff17 	ldw	r2,-4(fp)
   63f74:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   63f78:	e0bffb17 	ldw	r2,-20(fp)
   63f7c:	10800017 	ldw	r2,0(r2)
   63f80:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   63f84:	e0bffc17 	ldw	r2,-16(fp)
   63f88:	10800104 	addi	r2,r2,4
   63f8c:	10800037 	ldwio	r2,0(r2)
   63f90:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   63f94:	e0bffd17 	ldw	r2,-12(fp)
   63f98:	1080c00c 	andi	r2,r2,768
   63f9c:	10006d26 	beq	r2,zero,64154 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   63fa0:	e0bffd17 	ldw	r2,-12(fp)
   63fa4:	1080400c 	andi	r2,r2,256
   63fa8:	10003526 	beq	r2,zero,64080 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   63fac:	00800074 	movhi	r2,1
   63fb0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   63fb4:	e0bffb17 	ldw	r2,-20(fp)
   63fb8:	10800a17 	ldw	r2,40(r2)
   63fbc:	10800044 	addi	r2,r2,1
   63fc0:	1081ffcc 	andi	r2,r2,2047
   63fc4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   63fc8:	e0bffb17 	ldw	r2,-20(fp)
   63fcc:	10c00b17 	ldw	r3,44(r2)
   63fd0:	e0bffe17 	ldw	r2,-8(fp)
   63fd4:	18801526 	beq	r3,r2,6402c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   63fd8:	e0bffc17 	ldw	r2,-16(fp)
   63fdc:	10800037 	ldwio	r2,0(r2)
   63fe0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   63fe4:	e0bff917 	ldw	r2,-28(fp)
   63fe8:	10a0000c 	andi	r2,r2,32768
   63fec:	10001126 	beq	r2,zero,64034 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   63ff0:	e0bffb17 	ldw	r2,-20(fp)
   63ff4:	10800a17 	ldw	r2,40(r2)
   63ff8:	e0fff917 	ldw	r3,-28(fp)
   63ffc:	1809883a 	mov	r4,r3
   64000:	e0fffb17 	ldw	r3,-20(fp)
   64004:	1885883a 	add	r2,r3,r2
   64008:	10800e04 	addi	r2,r2,56
   6400c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   64010:	e0bffb17 	ldw	r2,-20(fp)
   64014:	10800a17 	ldw	r2,40(r2)
   64018:	10800044 	addi	r2,r2,1
   6401c:	10c1ffcc 	andi	r3,r2,2047
   64020:	e0bffb17 	ldw	r2,-20(fp)
   64024:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   64028:	003fe206 	br	63fb4 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   6402c:	0001883a 	nop
   64030:	00000106 	br	64038 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   64034:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   64038:	e0bff917 	ldw	r2,-28(fp)
   6403c:	10bfffec 	andhi	r2,r2,65535
   64040:	10000f26 	beq	r2,zero,64080 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   64044:	e0bffb17 	ldw	r2,-20(fp)
   64048:	10c00817 	ldw	r3,32(r2)
   6404c:	00bfff84 	movi	r2,-2
   64050:	1886703a 	and	r3,r3,r2
   64054:	e0bffb17 	ldw	r2,-20(fp)
   64058:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   6405c:	e0bffc17 	ldw	r2,-16(fp)
   64060:	10800104 	addi	r2,r2,4
   64064:	1007883a 	mov	r3,r2
   64068:	e0bffb17 	ldw	r2,-20(fp)
   6406c:	10800817 	ldw	r2,32(r2)
   64070:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   64074:	e0bffc17 	ldw	r2,-16(fp)
   64078:	10800104 	addi	r2,r2,4
   6407c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   64080:	e0bffd17 	ldw	r2,-12(fp)
   64084:	1080800c 	andi	r2,r2,512
   64088:	103fbe26 	beq	r2,zero,63f84 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   6408c:	e0bffd17 	ldw	r2,-12(fp)
   64090:	1004d43a 	srli	r2,r2,16
   64094:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   64098:	00001406 	br	640ec <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   6409c:	e0bffc17 	ldw	r2,-16(fp)
   640a0:	e0fffb17 	ldw	r3,-20(fp)
   640a4:	18c00d17 	ldw	r3,52(r3)
   640a8:	e13ffb17 	ldw	r4,-20(fp)
   640ac:	20c7883a 	add	r3,r4,r3
   640b0:	18c20e04 	addi	r3,r3,2104
   640b4:	18c00003 	ldbu	r3,0(r3)
   640b8:	18c03fcc 	andi	r3,r3,255
   640bc:	18c0201c 	xori	r3,r3,128
   640c0:	18ffe004 	addi	r3,r3,-128
   640c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   640c8:	e0bffb17 	ldw	r2,-20(fp)
   640cc:	10800d17 	ldw	r2,52(r2)
   640d0:	10800044 	addi	r2,r2,1
   640d4:	10c1ffcc 	andi	r3,r2,2047
   640d8:	e0bffb17 	ldw	r2,-20(fp)
   640dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   640e0:	e0bffa17 	ldw	r2,-24(fp)
   640e4:	10bfffc4 	addi	r2,r2,-1
   640e8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   640ec:	e0bffa17 	ldw	r2,-24(fp)
   640f0:	10000526 	beq	r2,zero,64108 <altera_avalon_jtag_uart_irq+0x1a8>
   640f4:	e0bffb17 	ldw	r2,-20(fp)
   640f8:	10c00d17 	ldw	r3,52(r2)
   640fc:	e0bffb17 	ldw	r2,-20(fp)
   64100:	10800c17 	ldw	r2,48(r2)
   64104:	18bfe51e 	bne	r3,r2,6409c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   64108:	e0bffa17 	ldw	r2,-24(fp)
   6410c:	103f9d26 	beq	r2,zero,63f84 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   64110:	e0bffb17 	ldw	r2,-20(fp)
   64114:	10c00817 	ldw	r3,32(r2)
   64118:	00bfff44 	movi	r2,-3
   6411c:	1886703a 	and	r3,r3,r2
   64120:	e0bffb17 	ldw	r2,-20(fp)
   64124:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   64128:	e0bffb17 	ldw	r2,-20(fp)
   6412c:	10800017 	ldw	r2,0(r2)
   64130:	10800104 	addi	r2,r2,4
   64134:	1007883a 	mov	r3,r2
   64138:	e0bffb17 	ldw	r2,-20(fp)
   6413c:	10800817 	ldw	r2,32(r2)
   64140:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   64144:	e0bffc17 	ldw	r2,-16(fp)
   64148:	10800104 	addi	r2,r2,4
   6414c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   64150:	003f8c06 	br	63f84 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   64154:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   64158:	0001883a 	nop
   6415c:	e037883a 	mov	sp,fp
   64160:	df000017 	ldw	fp,0(sp)
   64164:	dec00104 	addi	sp,sp,4
   64168:	f800283a 	ret

0006416c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   6416c:	defff804 	addi	sp,sp,-32
   64170:	df000715 	stw	fp,28(sp)
   64174:	df000704 	addi	fp,sp,28
   64178:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   6417c:	e0bffb17 	ldw	r2,-20(fp)
   64180:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   64184:	e0bff917 	ldw	r2,-28(fp)
   64188:	10800017 	ldw	r2,0(r2)
   6418c:	10800104 	addi	r2,r2,4
   64190:	10800037 	ldwio	r2,0(r2)
   64194:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   64198:	e0bffa17 	ldw	r2,-24(fp)
   6419c:	1081000c 	andi	r2,r2,1024
   641a0:	10000b26 	beq	r2,zero,641d0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   641a4:	e0bff917 	ldw	r2,-28(fp)
   641a8:	10800017 	ldw	r2,0(r2)
   641ac:	10800104 	addi	r2,r2,4
   641b0:	1007883a 	mov	r3,r2
   641b4:	e0bff917 	ldw	r2,-28(fp)
   641b8:	10800817 	ldw	r2,32(r2)
   641bc:	10810014 	ori	r2,r2,1024
   641c0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   641c4:	e0bff917 	ldw	r2,-28(fp)
   641c8:	10000915 	stw	zero,36(r2)
   641cc:	00000a06 	br	641f8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   641d0:	e0bff917 	ldw	r2,-28(fp)
   641d4:	10c00917 	ldw	r3,36(r2)
   641d8:	00a00034 	movhi	r2,32768
   641dc:	10bfff04 	addi	r2,r2,-4
   641e0:	10c00536 	bltu	r2,r3,641f8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   641e4:	e0bff917 	ldw	r2,-28(fp)
   641e8:	10800917 	ldw	r2,36(r2)
   641ec:	10c00044 	addi	r3,r2,1
   641f0:	e0bff917 	ldw	r2,-28(fp)
   641f4:	10c00915 	stw	r3,36(r2)
   641f8:	d0a01b17 	ldw	r2,-32660(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   641fc:	e037883a 	mov	sp,fp
   64200:	df000017 	ldw	fp,0(sp)
   64204:	dec00104 	addi	sp,sp,4
   64208:	f800283a 	ret

0006420c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   6420c:	defffd04 	addi	sp,sp,-12
   64210:	df000215 	stw	fp,8(sp)
   64214:	df000204 	addi	fp,sp,8
   64218:	e13ffe15 	stw	r4,-8(fp)
   6421c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   64220:	00000506 	br	64238 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   64224:	e0bfff17 	ldw	r2,-4(fp)
   64228:	1090000c 	andi	r2,r2,16384
   6422c:	10000226 	beq	r2,zero,64238 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   64230:	00bffd44 	movi	r2,-11
   64234:	00000b06 	br	64264 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   64238:	e0bffe17 	ldw	r2,-8(fp)
   6423c:	10c00d17 	ldw	r3,52(r2)
   64240:	e0bffe17 	ldw	r2,-8(fp)
   64244:	10800c17 	ldw	r2,48(r2)
   64248:	18800526 	beq	r3,r2,64260 <altera_avalon_jtag_uart_close+0x54>
   6424c:	e0bffe17 	ldw	r2,-8(fp)
   64250:	10c00917 	ldw	r3,36(r2)
   64254:	e0bffe17 	ldw	r2,-8(fp)
   64258:	10800117 	ldw	r2,4(r2)
   6425c:	18bff136 	bltu	r3,r2,64224 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   64260:	0005883a 	mov	r2,zero
}
   64264:	e037883a 	mov	sp,fp
   64268:	df000017 	ldw	fp,0(sp)
   6426c:	dec00104 	addi	sp,sp,4
   64270:	f800283a 	ret

00064274 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   64274:	defffa04 	addi	sp,sp,-24
   64278:	df000515 	stw	fp,20(sp)
   6427c:	df000504 	addi	fp,sp,20
   64280:	e13ffd15 	stw	r4,-12(fp)
   64284:	e17ffe15 	stw	r5,-8(fp)
   64288:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   6428c:	00bff9c4 	movi	r2,-25
   64290:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   64294:	e0bffe17 	ldw	r2,-8(fp)
   64298:	10da8060 	cmpeqi	r3,r2,27137
   6429c:	1800031e 	bne	r3,zero,642ac <altera_avalon_jtag_uart_ioctl+0x38>
   642a0:	109a80a0 	cmpeqi	r2,r2,27138
   642a4:	1000181e 	bne	r2,zero,64308 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   642a8:	00002906 	br	64350 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   642ac:	e0bffd17 	ldw	r2,-12(fp)
   642b0:	10c00117 	ldw	r3,4(r2)
   642b4:	00a00034 	movhi	r2,32768
   642b8:	10bfffc4 	addi	r2,r2,-1
   642bc:	18802126 	beq	r3,r2,64344 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   642c0:	e0bfff17 	ldw	r2,-4(fp)
   642c4:	10800017 	ldw	r2,0(r2)
   642c8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   642cc:	e0bffc17 	ldw	r2,-16(fp)
   642d0:	10800090 	cmplti	r2,r2,2
   642d4:	1000061e 	bne	r2,zero,642f0 <altera_avalon_jtag_uart_ioctl+0x7c>
   642d8:	e0fffc17 	ldw	r3,-16(fp)
   642dc:	00a00034 	movhi	r2,32768
   642e0:	10bfffc4 	addi	r2,r2,-1
   642e4:	18800226 	beq	r3,r2,642f0 <altera_avalon_jtag_uart_ioctl+0x7c>
   642e8:	e0bffc17 	ldw	r2,-16(fp)
   642ec:	00000206 	br	642f8 <altera_avalon_jtag_uart_ioctl+0x84>
   642f0:	00a00034 	movhi	r2,32768
   642f4:	10bfff84 	addi	r2,r2,-2
   642f8:	e0fffd17 	ldw	r3,-12(fp)
   642fc:	18800115 	stw	r2,4(r3)
      rc = 0;
   64300:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   64304:	00000f06 	br	64344 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   64308:	e0bffd17 	ldw	r2,-12(fp)
   6430c:	10c00117 	ldw	r3,4(r2)
   64310:	00a00034 	movhi	r2,32768
   64314:	10bfffc4 	addi	r2,r2,-1
   64318:	18800c26 	beq	r3,r2,6434c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   6431c:	e0bffd17 	ldw	r2,-12(fp)
   64320:	10c00917 	ldw	r3,36(r2)
   64324:	e0bffd17 	ldw	r2,-12(fp)
   64328:	10800117 	ldw	r2,4(r2)
   6432c:	1885803a 	cmpltu	r2,r3,r2
   64330:	10c03fcc 	andi	r3,r2,255
   64334:	e0bfff17 	ldw	r2,-4(fp)
   64338:	10c00015 	stw	r3,0(r2)
      rc = 0;
   6433c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   64340:	00000206 	br	6434c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   64344:	0001883a 	nop
   64348:	00000106 	br	64350 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   6434c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   64350:	e0bffb17 	ldw	r2,-20(fp)
}
   64354:	e037883a 	mov	sp,fp
   64358:	df000017 	ldw	fp,0(sp)
   6435c:	dec00104 	addi	sp,sp,4
   64360:	f800283a 	ret

00064364 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   64364:	defff304 	addi	sp,sp,-52
   64368:	dfc00c15 	stw	ra,48(sp)
   6436c:	df000b15 	stw	fp,44(sp)
   64370:	df000b04 	addi	fp,sp,44
   64374:	e13ffc15 	stw	r4,-16(fp)
   64378:	e17ffd15 	stw	r5,-12(fp)
   6437c:	e1bffe15 	stw	r6,-8(fp)
   64380:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   64384:	e0bffd17 	ldw	r2,-12(fp)
   64388:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   6438c:	00004706 	br	644ac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   64390:	e0bffc17 	ldw	r2,-16(fp)
   64394:	10800a17 	ldw	r2,40(r2)
   64398:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   6439c:	e0bffc17 	ldw	r2,-16(fp)
   643a0:	10800b17 	ldw	r2,44(r2)
   643a4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   643a8:	e0fff717 	ldw	r3,-36(fp)
   643ac:	e0bff817 	ldw	r2,-32(fp)
   643b0:	18800536 	bltu	r3,r2,643c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   643b4:	e0fff717 	ldw	r3,-36(fp)
   643b8:	e0bff817 	ldw	r2,-32(fp)
   643bc:	1885c83a 	sub	r2,r3,r2
   643c0:	e0bff615 	stw	r2,-40(fp)
   643c4:	00000406 	br	643d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   643c8:	00c20004 	movi	r3,2048
   643cc:	e0bff817 	ldw	r2,-32(fp)
   643d0:	1885c83a 	sub	r2,r3,r2
   643d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   643d8:	e0bff617 	ldw	r2,-40(fp)
   643dc:	10001e26 	beq	r2,zero,64458 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   643e0:	e0fffe17 	ldw	r3,-8(fp)
   643e4:	e0bff617 	ldw	r2,-40(fp)
   643e8:	1880022e 	bgeu	r3,r2,643f4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   643ec:	e0bffe17 	ldw	r2,-8(fp)
   643f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   643f4:	e0bffc17 	ldw	r2,-16(fp)
   643f8:	10c00e04 	addi	r3,r2,56
   643fc:	e0bff817 	ldw	r2,-32(fp)
   64400:	1885883a 	add	r2,r3,r2
   64404:	e1bff617 	ldw	r6,-40(fp)
   64408:	100b883a 	mov	r5,r2
   6440c:	e13ff517 	ldw	r4,-44(fp)
   64410:	00619780 	call	61978 <memcpy>
      ptr   += n;
   64414:	e0fff517 	ldw	r3,-44(fp)
   64418:	e0bff617 	ldw	r2,-40(fp)
   6441c:	1885883a 	add	r2,r3,r2
   64420:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   64424:	e0fffe17 	ldw	r3,-8(fp)
   64428:	e0bff617 	ldw	r2,-40(fp)
   6442c:	1885c83a 	sub	r2,r3,r2
   64430:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   64434:	e0fff817 	ldw	r3,-32(fp)
   64438:	e0bff617 	ldw	r2,-40(fp)
   6443c:	1885883a 	add	r2,r3,r2
   64440:	10c1ffcc 	andi	r3,r2,2047
   64444:	e0bffc17 	ldw	r2,-16(fp)
   64448:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   6444c:	e0bffe17 	ldw	r2,-8(fp)
   64450:	00bfcf16 	blt	zero,r2,64390 <altera_avalon_jtag_uart_read+0x2c>
   64454:	00000106 	br	6445c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   64458:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   6445c:	e0fff517 	ldw	r3,-44(fp)
   64460:	e0bffd17 	ldw	r2,-12(fp)
   64464:	1880141e 	bne	r3,r2,644b8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   64468:	e0bfff17 	ldw	r2,-4(fp)
   6446c:	1090000c 	andi	r2,r2,16384
   64470:	1000131e 	bne	r2,zero,644c0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   64474:	0001883a 	nop
   64478:	e0bffc17 	ldw	r2,-16(fp)
   6447c:	10c00a17 	ldw	r3,40(r2)
   64480:	e0bff717 	ldw	r2,-36(fp)
   64484:	1880051e 	bne	r3,r2,6449c <altera_avalon_jtag_uart_read+0x138>
   64488:	e0bffc17 	ldw	r2,-16(fp)
   6448c:	10c00917 	ldw	r3,36(r2)
   64490:	e0bffc17 	ldw	r2,-16(fp)
   64494:	10800117 	ldw	r2,4(r2)
   64498:	18bff736 	bltu	r3,r2,64478 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   6449c:	e0bffc17 	ldw	r2,-16(fp)
   644a0:	10c00a17 	ldw	r3,40(r2)
   644a4:	e0bff717 	ldw	r2,-36(fp)
   644a8:	18800726 	beq	r3,r2,644c8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   644ac:	e0bffe17 	ldw	r2,-8(fp)
   644b0:	00bfb716 	blt	zero,r2,64390 <altera_avalon_jtag_uart_read+0x2c>
   644b4:	00000506 	br	644cc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   644b8:	0001883a 	nop
   644bc:	00000306 	br	644cc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   644c0:	0001883a 	nop
   644c4:	00000106 	br	644cc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   644c8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   644cc:	e0fff517 	ldw	r3,-44(fp)
   644d0:	e0bffd17 	ldw	r2,-12(fp)
   644d4:	18801826 	beq	r3,r2,64538 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   644d8:	0005303a 	rdctl	r2,status
   644dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   644e0:	e0fffb17 	ldw	r3,-20(fp)
   644e4:	00bfff84 	movi	r2,-2
   644e8:	1884703a 	and	r2,r3,r2
   644ec:	1001703a 	wrctl	status,r2
  
  return context;
   644f0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   644f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   644f8:	e0bffc17 	ldw	r2,-16(fp)
   644fc:	10800817 	ldw	r2,32(r2)
   64500:	10c00054 	ori	r3,r2,1
   64504:	e0bffc17 	ldw	r2,-16(fp)
   64508:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   6450c:	e0bffc17 	ldw	r2,-16(fp)
   64510:	10800017 	ldw	r2,0(r2)
   64514:	10800104 	addi	r2,r2,4
   64518:	1007883a 	mov	r3,r2
   6451c:	e0bffc17 	ldw	r2,-16(fp)
   64520:	10800817 	ldw	r2,32(r2)
   64524:	18800035 	stwio	r2,0(r3)
   64528:	e0bffa17 	ldw	r2,-24(fp)
   6452c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   64530:	e0bff917 	ldw	r2,-28(fp)
   64534:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   64538:	e0fff517 	ldw	r3,-44(fp)
   6453c:	e0bffd17 	ldw	r2,-12(fp)
   64540:	18800426 	beq	r3,r2,64554 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   64544:	e0fff517 	ldw	r3,-44(fp)
   64548:	e0bffd17 	ldw	r2,-12(fp)
   6454c:	1885c83a 	sub	r2,r3,r2
   64550:	00000606 	br	6456c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   64554:	e0bfff17 	ldw	r2,-4(fp)
   64558:	1090000c 	andi	r2,r2,16384
   6455c:	10000226 	beq	r2,zero,64568 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   64560:	00bffd44 	movi	r2,-11
   64564:	00000106 	br	6456c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   64568:	00bffec4 	movi	r2,-5
}
   6456c:	e037883a 	mov	sp,fp
   64570:	dfc00117 	ldw	ra,4(sp)
   64574:	df000017 	ldw	fp,0(sp)
   64578:	dec00204 	addi	sp,sp,8
   6457c:	f800283a 	ret

00064580 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   64580:	defff304 	addi	sp,sp,-52
   64584:	dfc00c15 	stw	ra,48(sp)
   64588:	df000b15 	stw	fp,44(sp)
   6458c:	df000b04 	addi	fp,sp,44
   64590:	e13ffc15 	stw	r4,-16(fp)
   64594:	e17ffd15 	stw	r5,-12(fp)
   64598:	e1bffe15 	stw	r6,-8(fp)
   6459c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   645a0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   645a4:	e0bffd17 	ldw	r2,-12(fp)
   645a8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   645ac:	00003706 	br	6468c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   645b0:	e0bffc17 	ldw	r2,-16(fp)
   645b4:	10800c17 	ldw	r2,48(r2)
   645b8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   645bc:	e0bffc17 	ldw	r2,-16(fp)
   645c0:	10800d17 	ldw	r2,52(r2)
   645c4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   645c8:	e0fff917 	ldw	r3,-28(fp)
   645cc:	e0bff517 	ldw	r2,-44(fp)
   645d0:	1880062e 	bgeu	r3,r2,645ec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   645d4:	e0fff517 	ldw	r3,-44(fp)
   645d8:	e0bff917 	ldw	r2,-28(fp)
   645dc:	1885c83a 	sub	r2,r3,r2
   645e0:	10bfffc4 	addi	r2,r2,-1
   645e4:	e0bff615 	stw	r2,-40(fp)
   645e8:	00000b06 	br	64618 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   645ec:	e0bff517 	ldw	r2,-44(fp)
   645f0:	10000526 	beq	r2,zero,64608 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   645f4:	00c20004 	movi	r3,2048
   645f8:	e0bff917 	ldw	r2,-28(fp)
   645fc:	1885c83a 	sub	r2,r3,r2
   64600:	e0bff615 	stw	r2,-40(fp)
   64604:	00000406 	br	64618 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   64608:	00c1ffc4 	movi	r3,2047
   6460c:	e0bff917 	ldw	r2,-28(fp)
   64610:	1885c83a 	sub	r2,r3,r2
   64614:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   64618:	e0bff617 	ldw	r2,-40(fp)
   6461c:	10001e26 	beq	r2,zero,64698 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   64620:	e0fffe17 	ldw	r3,-8(fp)
   64624:	e0bff617 	ldw	r2,-40(fp)
   64628:	1880022e 	bgeu	r3,r2,64634 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   6462c:	e0bffe17 	ldw	r2,-8(fp)
   64630:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   64634:	e0bffc17 	ldw	r2,-16(fp)
   64638:	10c20e04 	addi	r3,r2,2104
   6463c:	e0bff917 	ldw	r2,-28(fp)
   64640:	1885883a 	add	r2,r3,r2
   64644:	e1bff617 	ldw	r6,-40(fp)
   64648:	e17ffd17 	ldw	r5,-12(fp)
   6464c:	1009883a 	mov	r4,r2
   64650:	00619780 	call	61978 <memcpy>
      ptr   += n;
   64654:	e0fffd17 	ldw	r3,-12(fp)
   64658:	e0bff617 	ldw	r2,-40(fp)
   6465c:	1885883a 	add	r2,r3,r2
   64660:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   64664:	e0fffe17 	ldw	r3,-8(fp)
   64668:	e0bff617 	ldw	r2,-40(fp)
   6466c:	1885c83a 	sub	r2,r3,r2
   64670:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   64674:	e0fff917 	ldw	r3,-28(fp)
   64678:	e0bff617 	ldw	r2,-40(fp)
   6467c:	1885883a 	add	r2,r3,r2
   64680:	10c1ffcc 	andi	r3,r2,2047
   64684:	e0bffc17 	ldw	r2,-16(fp)
   64688:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   6468c:	e0bffe17 	ldw	r2,-8(fp)
   64690:	00bfc716 	blt	zero,r2,645b0 <altera_avalon_jtag_uart_write+0x30>
   64694:	00000106 	br	6469c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   64698:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   6469c:	0005303a 	rdctl	r2,status
   646a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   646a4:	e0fffb17 	ldw	r3,-20(fp)
   646a8:	00bfff84 	movi	r2,-2
   646ac:	1884703a 	and	r2,r3,r2
   646b0:	1001703a 	wrctl	status,r2
  
  return context;
   646b4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   646b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   646bc:	e0bffc17 	ldw	r2,-16(fp)
   646c0:	10800817 	ldw	r2,32(r2)
   646c4:	10c00094 	ori	r3,r2,2
   646c8:	e0bffc17 	ldw	r2,-16(fp)
   646cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   646d0:	e0bffc17 	ldw	r2,-16(fp)
   646d4:	10800017 	ldw	r2,0(r2)
   646d8:	10800104 	addi	r2,r2,4
   646dc:	1007883a 	mov	r3,r2
   646e0:	e0bffc17 	ldw	r2,-16(fp)
   646e4:	10800817 	ldw	r2,32(r2)
   646e8:	18800035 	stwio	r2,0(r3)
   646ec:	e0bffa17 	ldw	r2,-24(fp)
   646f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   646f4:	e0bff817 	ldw	r2,-32(fp)
   646f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   646fc:	e0bffe17 	ldw	r2,-8(fp)
   64700:	0080100e 	bge	zero,r2,64744 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   64704:	e0bfff17 	ldw	r2,-4(fp)
   64708:	1090000c 	andi	r2,r2,16384
   6470c:	1000101e 	bne	r2,zero,64750 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   64710:	0001883a 	nop
   64714:	e0bffc17 	ldw	r2,-16(fp)
   64718:	10c00d17 	ldw	r3,52(r2)
   6471c:	e0bff517 	ldw	r2,-44(fp)
   64720:	1880051e 	bne	r3,r2,64738 <altera_avalon_jtag_uart_write+0x1b8>
   64724:	e0bffc17 	ldw	r2,-16(fp)
   64728:	10c00917 	ldw	r3,36(r2)
   6472c:	e0bffc17 	ldw	r2,-16(fp)
   64730:	10800117 	ldw	r2,4(r2)
   64734:	18bff736 	bltu	r3,r2,64714 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   64738:	e0bffc17 	ldw	r2,-16(fp)
   6473c:	10800917 	ldw	r2,36(r2)
   64740:	1000051e 	bne	r2,zero,64758 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   64744:	e0bffe17 	ldw	r2,-8(fp)
   64748:	00bfd016 	blt	zero,r2,6468c <altera_avalon_jtag_uart_write+0x10c>
   6474c:	00000306 	br	6475c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   64750:	0001883a 	nop
   64754:	00000106 	br	6475c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   64758:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   6475c:	e0fffd17 	ldw	r3,-12(fp)
   64760:	e0bff717 	ldw	r2,-36(fp)
   64764:	18800426 	beq	r3,r2,64778 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   64768:	e0fffd17 	ldw	r3,-12(fp)
   6476c:	e0bff717 	ldw	r2,-36(fp)
   64770:	1885c83a 	sub	r2,r3,r2
   64774:	00000606 	br	64790 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   64778:	e0bfff17 	ldw	r2,-4(fp)
   6477c:	1090000c 	andi	r2,r2,16384
   64780:	10000226 	beq	r2,zero,6478c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   64784:	00bffd44 	movi	r2,-11
   64788:	00000106 	br	64790 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   6478c:	00bffec4 	movi	r2,-5
}
   64790:	e037883a 	mov	sp,fp
   64794:	dfc00117 	ldw	ra,4(sp)
   64798:	df000017 	ldw	fp,0(sp)
   6479c:	dec00204 	addi	sp,sp,8
   647a0:	f800283a 	ret

000647a4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   647a4:	defff504 	addi	sp,sp,-44
   647a8:	df000a15 	stw	fp,40(sp)
   647ac:	df000a04 	addi	fp,sp,40
   647b0:	e13ffc15 	stw	r4,-16(fp)
   647b4:	e17ffd15 	stw	r5,-12(fp)
   647b8:	e1bffe15 	stw	r6,-8(fp)
   647bc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   647c0:	e03ff615 	stw	zero,-40(fp)
   647c4:	d0a01b17 	ldw	r2,-32660(gp)
  
  if (alt_ticks_per_second ())
   647c8:	10003c26 	beq	r2,zero,648bc <alt_alarm_start+0x118>
  {
    if (alarm)
   647cc:	e0bffc17 	ldw	r2,-16(fp)
   647d0:	10003826 	beq	r2,zero,648b4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   647d4:	e0bffc17 	ldw	r2,-16(fp)
   647d8:	e0fffe17 	ldw	r3,-8(fp)
   647dc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   647e0:	e0bffc17 	ldw	r2,-16(fp)
   647e4:	e0ffff17 	ldw	r3,-4(fp)
   647e8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   647ec:	0005303a 	rdctl	r2,status
   647f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   647f4:	e0fff917 	ldw	r3,-28(fp)
   647f8:	00bfff84 	movi	r2,-2
   647fc:	1884703a 	and	r2,r3,r2
   64800:	1001703a 	wrctl	status,r2
  
  return context;
   64804:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   64808:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   6480c:	d0a01c17 	ldw	r2,-32656(gp)
      
      current_nticks = alt_nticks();
   64810:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   64814:	e0fffd17 	ldw	r3,-12(fp)
   64818:	e0bff617 	ldw	r2,-40(fp)
   6481c:	1885883a 	add	r2,r3,r2
   64820:	10c00044 	addi	r3,r2,1
   64824:	e0bffc17 	ldw	r2,-16(fp)
   64828:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   6482c:	e0bffc17 	ldw	r2,-16(fp)
   64830:	10c00217 	ldw	r3,8(r2)
   64834:	e0bff617 	ldw	r2,-40(fp)
   64838:	1880042e 	bgeu	r3,r2,6484c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   6483c:	e0bffc17 	ldw	r2,-16(fp)
   64840:	00c00044 	movi	r3,1
   64844:	10c00405 	stb	r3,16(r2)
   64848:	00000206 	br	64854 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   6484c:	e0bffc17 	ldw	r2,-16(fp)
   64850:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   64854:	e0bffc17 	ldw	r2,-16(fp)
   64858:	d0e00e04 	addi	r3,gp,-32712
   6485c:	e0fffa15 	stw	r3,-24(fp)
   64860:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   64864:	e0bffb17 	ldw	r2,-20(fp)
   64868:	e0fffa17 	ldw	r3,-24(fp)
   6486c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   64870:	e0bffa17 	ldw	r2,-24(fp)
   64874:	10c00017 	ldw	r3,0(r2)
   64878:	e0bffb17 	ldw	r2,-20(fp)
   6487c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   64880:	e0bffa17 	ldw	r2,-24(fp)
   64884:	10800017 	ldw	r2,0(r2)
   64888:	e0fffb17 	ldw	r3,-20(fp)
   6488c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   64890:	e0bffa17 	ldw	r2,-24(fp)
   64894:	e0fffb17 	ldw	r3,-20(fp)
   64898:	10c00015 	stw	r3,0(r2)
   6489c:	e0bff817 	ldw	r2,-32(fp)
   648a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   648a4:	e0bff717 	ldw	r2,-36(fp)
   648a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   648ac:	0005883a 	mov	r2,zero
   648b0:	00000306 	br	648c0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   648b4:	00bffa84 	movi	r2,-22
   648b8:	00000106 	br	648c0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   648bc:	00bfde84 	movi	r2,-134
  }
}
   648c0:	e037883a 	mov	sp,fp
   648c4:	df000017 	ldw	fp,0(sp)
   648c8:	dec00104 	addi	sp,sp,4
   648cc:	f800283a 	ret

000648d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   648d0:	deffff04 	addi	sp,sp,-4
   648d4:	df000015 	stw	fp,0(sp)
   648d8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   648dc:	0001883a 	nop
   648e0:	e037883a 	mov	sp,fp
   648e4:	df000017 	ldw	fp,0(sp)
   648e8:	dec00104 	addi	sp,sp,4
   648ec:	f800283a 	ret

000648f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   648f0:	defffe04 	addi	sp,sp,-8
   648f4:	dfc00115 	stw	ra,4(sp)
   648f8:	df000015 	stw	fp,0(sp)
   648fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   64900:	d0a00b17 	ldw	r2,-32724(gp)
   64904:	10000326 	beq	r2,zero,64914 <alt_get_errno+0x24>
   64908:	d0a00b17 	ldw	r2,-32724(gp)
   6490c:	103ee83a 	callr	r2
   64910:	00000106 	br	64918 <alt_get_errno+0x28>
   64914:	d0a01604 	addi	r2,gp,-32680
}
   64918:	e037883a 	mov	sp,fp
   6491c:	dfc00117 	ldw	ra,4(sp)
   64920:	df000017 	ldw	fp,0(sp)
   64924:	dec00204 	addi	sp,sp,8
   64928:	f800283a 	ret

0006492c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   6492c:	defffa04 	addi	sp,sp,-24
   64930:	dfc00515 	stw	ra,20(sp)
   64934:	df000415 	stw	fp,16(sp)
   64938:	df000404 	addi	fp,sp,16
   6493c:	e13ffe15 	stw	r4,-8(fp)
   64940:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   64944:	e0bffe17 	ldw	r2,-8(fp)
   64948:	10000326 	beq	r2,zero,64958 <alt_dev_llist_insert+0x2c>
   6494c:	e0bffe17 	ldw	r2,-8(fp)
   64950:	10800217 	ldw	r2,8(r2)
   64954:	1000061e 	bne	r2,zero,64970 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   64958:	00648f00 	call	648f0 <alt_get_errno>
   6495c:	1007883a 	mov	r3,r2
   64960:	00800584 	movi	r2,22
   64964:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   64968:	00bffa84 	movi	r2,-22
   6496c:	00001306 	br	649bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   64970:	e0bffe17 	ldw	r2,-8(fp)
   64974:	e0ffff17 	ldw	r3,-4(fp)
   64978:	e0fffc15 	stw	r3,-16(fp)
   6497c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   64980:	e0bffd17 	ldw	r2,-12(fp)
   64984:	e0fffc17 	ldw	r3,-16(fp)
   64988:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   6498c:	e0bffc17 	ldw	r2,-16(fp)
   64990:	10c00017 	ldw	r3,0(r2)
   64994:	e0bffd17 	ldw	r2,-12(fp)
   64998:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   6499c:	e0bffc17 	ldw	r2,-16(fp)
   649a0:	10800017 	ldw	r2,0(r2)
   649a4:	e0fffd17 	ldw	r3,-12(fp)
   649a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   649ac:	e0bffc17 	ldw	r2,-16(fp)
   649b0:	e0fffd17 	ldw	r3,-12(fp)
   649b4:	10c00015 	stw	r3,0(r2)

  return 0;  
   649b8:	0005883a 	mov	r2,zero
}
   649bc:	e037883a 	mov	sp,fp
   649c0:	dfc00117 	ldw	ra,4(sp)
   649c4:	df000017 	ldw	fp,0(sp)
   649c8:	dec00204 	addi	sp,sp,8
   649cc:	f800283a 	ret

000649d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   649d0:	defffd04 	addi	sp,sp,-12
   649d4:	dfc00215 	stw	ra,8(sp)
   649d8:	df000115 	stw	fp,4(sp)
   649dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   649e0:	008001b4 	movhi	r2,6
   649e4:	10966104 	addi	r2,r2,22916
   649e8:	e0bfff15 	stw	r2,-4(fp)
   649ec:	00000606 	br	64a08 <_do_ctors+0x38>
        (*ctor) (); 
   649f0:	e0bfff17 	ldw	r2,-4(fp)
   649f4:	10800017 	ldw	r2,0(r2)
   649f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   649fc:	e0bfff17 	ldw	r2,-4(fp)
   64a00:	10bfff04 	addi	r2,r2,-4
   64a04:	e0bfff15 	stw	r2,-4(fp)
   64a08:	e0ffff17 	ldw	r3,-4(fp)
   64a0c:	008001b4 	movhi	r2,6
   64a10:	10966204 	addi	r2,r2,22920
   64a14:	18bff62e 	bgeu	r3,r2,649f0 <_do_ctors+0x20>
        (*ctor) (); 
}
   64a18:	0001883a 	nop
   64a1c:	e037883a 	mov	sp,fp
   64a20:	dfc00117 	ldw	ra,4(sp)
   64a24:	df000017 	ldw	fp,0(sp)
   64a28:	dec00204 	addi	sp,sp,8
   64a2c:	f800283a 	ret

00064a30 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   64a30:	defffd04 	addi	sp,sp,-12
   64a34:	dfc00215 	stw	ra,8(sp)
   64a38:	df000115 	stw	fp,4(sp)
   64a3c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   64a40:	008001b4 	movhi	r2,6
   64a44:	10966104 	addi	r2,r2,22916
   64a48:	e0bfff15 	stw	r2,-4(fp)
   64a4c:	00000606 	br	64a68 <_do_dtors+0x38>
        (*dtor) (); 
   64a50:	e0bfff17 	ldw	r2,-4(fp)
   64a54:	10800017 	ldw	r2,0(r2)
   64a58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   64a5c:	e0bfff17 	ldw	r2,-4(fp)
   64a60:	10bfff04 	addi	r2,r2,-4
   64a64:	e0bfff15 	stw	r2,-4(fp)
   64a68:	e0ffff17 	ldw	r3,-4(fp)
   64a6c:	008001b4 	movhi	r2,6
   64a70:	10966204 	addi	r2,r2,22920
   64a74:	18bff62e 	bgeu	r3,r2,64a50 <_do_dtors+0x20>
        (*dtor) (); 
}
   64a78:	0001883a 	nop
   64a7c:	e037883a 	mov	sp,fp
   64a80:	dfc00117 	ldw	ra,4(sp)
   64a84:	df000017 	ldw	fp,0(sp)
   64a88:	dec00204 	addi	sp,sp,8
   64a8c:	f800283a 	ret

00064a90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   64a90:	deffff04 	addi	sp,sp,-4
   64a94:	df000015 	stw	fp,0(sp)
   64a98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   64a9c:	0001883a 	nop
   64aa0:	e037883a 	mov	sp,fp
   64aa4:	df000017 	ldw	fp,0(sp)
   64aa8:	dec00104 	addi	sp,sp,4
   64aac:	f800283a 	ret

00064ab0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   64ab0:	defff904 	addi	sp,sp,-28
   64ab4:	dfc00615 	stw	ra,24(sp)
   64ab8:	df000515 	stw	fp,20(sp)
   64abc:	df000504 	addi	fp,sp,20
   64ac0:	e13ffc15 	stw	r4,-16(fp)
   64ac4:	e17ffd15 	stw	r5,-12(fp)
   64ac8:	e1bffe15 	stw	r6,-8(fp)
   64acc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   64ad0:	e0800217 	ldw	r2,8(fp)
   64ad4:	d8800015 	stw	r2,0(sp)
   64ad8:	e1ffff17 	ldw	r7,-4(fp)
   64adc:	e1bffe17 	ldw	r6,-8(fp)
   64ae0:	e17ffd17 	ldw	r5,-12(fp)
   64ae4:	e13ffc17 	ldw	r4,-16(fp)
   64ae8:	0064c600 	call	64c60 <alt_iic_isr_register>
}  
   64aec:	e037883a 	mov	sp,fp
   64af0:	dfc00117 	ldw	ra,4(sp)
   64af4:	df000017 	ldw	fp,0(sp)
   64af8:	dec00204 	addi	sp,sp,8
   64afc:	f800283a 	ret

00064b00 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   64b00:	defff904 	addi	sp,sp,-28
   64b04:	df000615 	stw	fp,24(sp)
   64b08:	df000604 	addi	fp,sp,24
   64b0c:	e13ffe15 	stw	r4,-8(fp)
   64b10:	e17fff15 	stw	r5,-4(fp)
   64b14:	e0bfff17 	ldw	r2,-4(fp)
   64b18:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   64b1c:	0005303a 	rdctl	r2,status
   64b20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   64b24:	e0fffb17 	ldw	r3,-20(fp)
   64b28:	00bfff84 	movi	r2,-2
   64b2c:	1884703a 	and	r2,r3,r2
   64b30:	1001703a 	wrctl	status,r2
  
  return context;
   64b34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   64b38:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   64b3c:	00c00044 	movi	r3,1
   64b40:	e0bffa17 	ldw	r2,-24(fp)
   64b44:	1884983a 	sll	r2,r3,r2
   64b48:	1007883a 	mov	r3,r2
   64b4c:	d0a01717 	ldw	r2,-32676(gp)
   64b50:	1884b03a 	or	r2,r3,r2
   64b54:	d0a01715 	stw	r2,-32676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   64b58:	d0a01717 	ldw	r2,-32676(gp)
   64b5c:	100170fa 	wrctl	ienable,r2
   64b60:	e0bffc17 	ldw	r2,-16(fp)
   64b64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   64b68:	e0bffd17 	ldw	r2,-12(fp)
   64b6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   64b70:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   64b74:	0001883a 	nop
}
   64b78:	e037883a 	mov	sp,fp
   64b7c:	df000017 	ldw	fp,0(sp)
   64b80:	dec00104 	addi	sp,sp,4
   64b84:	f800283a 	ret

00064b88 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   64b88:	defff904 	addi	sp,sp,-28
   64b8c:	df000615 	stw	fp,24(sp)
   64b90:	df000604 	addi	fp,sp,24
   64b94:	e13ffe15 	stw	r4,-8(fp)
   64b98:	e17fff15 	stw	r5,-4(fp)
   64b9c:	e0bfff17 	ldw	r2,-4(fp)
   64ba0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   64ba4:	0005303a 	rdctl	r2,status
   64ba8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   64bac:	e0fffb17 	ldw	r3,-20(fp)
   64bb0:	00bfff84 	movi	r2,-2
   64bb4:	1884703a 	and	r2,r3,r2
   64bb8:	1001703a 	wrctl	status,r2
  
  return context;
   64bbc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   64bc0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   64bc4:	00c00044 	movi	r3,1
   64bc8:	e0bffa17 	ldw	r2,-24(fp)
   64bcc:	1884983a 	sll	r2,r3,r2
   64bd0:	0084303a 	nor	r2,zero,r2
   64bd4:	1007883a 	mov	r3,r2
   64bd8:	d0a01717 	ldw	r2,-32676(gp)
   64bdc:	1884703a 	and	r2,r3,r2
   64be0:	d0a01715 	stw	r2,-32676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   64be4:	d0a01717 	ldw	r2,-32676(gp)
   64be8:	100170fa 	wrctl	ienable,r2
   64bec:	e0bffc17 	ldw	r2,-16(fp)
   64bf0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   64bf4:	e0bffd17 	ldw	r2,-12(fp)
   64bf8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   64bfc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   64c00:	0001883a 	nop
}
   64c04:	e037883a 	mov	sp,fp
   64c08:	df000017 	ldw	fp,0(sp)
   64c0c:	dec00104 	addi	sp,sp,4
   64c10:	f800283a 	ret

00064c14 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   64c14:	defffc04 	addi	sp,sp,-16
   64c18:	df000315 	stw	fp,12(sp)
   64c1c:	df000304 	addi	fp,sp,12
   64c20:	e13ffe15 	stw	r4,-8(fp)
   64c24:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   64c28:	000530fa 	rdctl	r2,ienable
   64c2c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   64c30:	00c00044 	movi	r3,1
   64c34:	e0bfff17 	ldw	r2,-4(fp)
   64c38:	1884983a 	sll	r2,r3,r2
   64c3c:	1007883a 	mov	r3,r2
   64c40:	e0bffd17 	ldw	r2,-12(fp)
   64c44:	1884703a 	and	r2,r3,r2
   64c48:	1004c03a 	cmpne	r2,r2,zero
   64c4c:	10803fcc 	andi	r2,r2,255
}
   64c50:	e037883a 	mov	sp,fp
   64c54:	df000017 	ldw	fp,0(sp)
   64c58:	dec00104 	addi	sp,sp,4
   64c5c:	f800283a 	ret

00064c60 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   64c60:	defff504 	addi	sp,sp,-44
   64c64:	dfc00a15 	stw	ra,40(sp)
   64c68:	df000915 	stw	fp,36(sp)
   64c6c:	df000904 	addi	fp,sp,36
   64c70:	e13ffc15 	stw	r4,-16(fp)
   64c74:	e17ffd15 	stw	r5,-12(fp)
   64c78:	e1bffe15 	stw	r6,-8(fp)
   64c7c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   64c80:	00bffa84 	movi	r2,-22
   64c84:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   64c88:	e0bffd17 	ldw	r2,-12(fp)
   64c8c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   64c90:	e0bff817 	ldw	r2,-32(fp)
   64c94:	10800808 	cmpgei	r2,r2,32
   64c98:	1000271e 	bne	r2,zero,64d38 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   64c9c:	0005303a 	rdctl	r2,status
   64ca0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   64ca4:	e0fffb17 	ldw	r3,-20(fp)
   64ca8:	00bfff84 	movi	r2,-2
   64cac:	1884703a 	and	r2,r3,r2
   64cb0:	1001703a 	wrctl	status,r2
  
  return context;
   64cb4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   64cb8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   64cbc:	00800134 	movhi	r2,4
   64cc0:	1086c804 	addi	r2,r2,6944
   64cc4:	e0fff817 	ldw	r3,-32(fp)
   64cc8:	180690fa 	slli	r3,r3,3
   64ccc:	10c5883a 	add	r2,r2,r3
   64cd0:	e0fffe17 	ldw	r3,-8(fp)
   64cd4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   64cd8:	00800134 	movhi	r2,4
   64cdc:	1086c804 	addi	r2,r2,6944
   64ce0:	e0fff817 	ldw	r3,-32(fp)
   64ce4:	180690fa 	slli	r3,r3,3
   64ce8:	10c5883a 	add	r2,r2,r3
   64cec:	10800104 	addi	r2,r2,4
   64cf0:	e0ffff17 	ldw	r3,-4(fp)
   64cf4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   64cf8:	e0bffe17 	ldw	r2,-8(fp)
   64cfc:	10000526 	beq	r2,zero,64d14 <alt_iic_isr_register+0xb4>
   64d00:	e0bff817 	ldw	r2,-32(fp)
   64d04:	100b883a 	mov	r5,r2
   64d08:	e13ffc17 	ldw	r4,-16(fp)
   64d0c:	0064b000 	call	64b00 <alt_ic_irq_enable>
   64d10:	00000406 	br	64d24 <alt_iic_isr_register+0xc4>
   64d14:	e0bff817 	ldw	r2,-32(fp)
   64d18:	100b883a 	mov	r5,r2
   64d1c:	e13ffc17 	ldw	r4,-16(fp)
   64d20:	0064b880 	call	64b88 <alt_ic_irq_disable>
   64d24:	e0bff715 	stw	r2,-36(fp)
   64d28:	e0bffa17 	ldw	r2,-24(fp)
   64d2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   64d30:	e0bff917 	ldw	r2,-28(fp)
   64d34:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   64d38:	e0bff717 	ldw	r2,-36(fp)
}
   64d3c:	e037883a 	mov	sp,fp
   64d40:	dfc00117 	ldw	ra,4(sp)
   64d44:	df000017 	ldw	fp,0(sp)
   64d48:	dec00204 	addi	sp,sp,8
   64d4c:	f800283a 	ret

00064d50 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   64d50:	defff804 	addi	sp,sp,-32
   64d54:	dfc00715 	stw	ra,28(sp)
   64d58:	df000615 	stw	fp,24(sp)
   64d5c:	dc000515 	stw	r16,20(sp)
   64d60:	df000604 	addi	fp,sp,24
   64d64:	e13ffb15 	stw	r4,-20(fp)
   64d68:	e17ffc15 	stw	r5,-16(fp)
   64d6c:	e1bffd15 	stw	r6,-12(fp)
   64d70:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   64d74:	e1bffe17 	ldw	r6,-8(fp)
   64d78:	e17ffd17 	ldw	r5,-12(fp)
   64d7c:	e13ffc17 	ldw	r4,-16(fp)
   64d80:	0064fd80 	call	64fd8 <open>
   64d84:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   64d88:	e0bffa17 	ldw	r2,-24(fp)
   64d8c:	10002216 	blt	r2,zero,64e18 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   64d90:	04000134 	movhi	r16,4
   64d94:	84022804 	addi	r16,r16,2208
   64d98:	e0bffa17 	ldw	r2,-24(fp)
   64d9c:	01400304 	movi	r5,12
   64da0:	1009883a 	mov	r4,r2
   64da4:	006314c0 	call	6314c <__mulsi3>
   64da8:	8085883a 	add	r2,r16,r2
   64dac:	10c00017 	ldw	r3,0(r2)
   64db0:	e0bffb17 	ldw	r2,-20(fp)
   64db4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   64db8:	04000134 	movhi	r16,4
   64dbc:	84022804 	addi	r16,r16,2208
   64dc0:	e0bffa17 	ldw	r2,-24(fp)
   64dc4:	01400304 	movi	r5,12
   64dc8:	1009883a 	mov	r4,r2
   64dcc:	006314c0 	call	6314c <__mulsi3>
   64dd0:	8085883a 	add	r2,r16,r2
   64dd4:	10800104 	addi	r2,r2,4
   64dd8:	10c00017 	ldw	r3,0(r2)
   64ddc:	e0bffb17 	ldw	r2,-20(fp)
   64de0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   64de4:	04000134 	movhi	r16,4
   64de8:	84022804 	addi	r16,r16,2208
   64dec:	e0bffa17 	ldw	r2,-24(fp)
   64df0:	01400304 	movi	r5,12
   64df4:	1009883a 	mov	r4,r2
   64df8:	006314c0 	call	6314c <__mulsi3>
   64dfc:	8085883a 	add	r2,r16,r2
   64e00:	10800204 	addi	r2,r2,8
   64e04:	10c00017 	ldw	r3,0(r2)
   64e08:	e0bffb17 	ldw	r2,-20(fp)
   64e0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   64e10:	e13ffa17 	ldw	r4,-24(fp)
   64e14:	0063a180 	call	63a18 <alt_release_fd>
  }
} 
   64e18:	0001883a 	nop
   64e1c:	e6ffff04 	addi	sp,fp,-4
   64e20:	dfc00217 	ldw	ra,8(sp)
   64e24:	df000117 	ldw	fp,4(sp)
   64e28:	dc000017 	ldw	r16,0(sp)
   64e2c:	dec00304 	addi	sp,sp,12
   64e30:	f800283a 	ret

00064e34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   64e34:	defffb04 	addi	sp,sp,-20
   64e38:	dfc00415 	stw	ra,16(sp)
   64e3c:	df000315 	stw	fp,12(sp)
   64e40:	df000304 	addi	fp,sp,12
   64e44:	e13ffd15 	stw	r4,-12(fp)
   64e48:	e17ffe15 	stw	r5,-8(fp)
   64e4c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   64e50:	01c07fc4 	movi	r7,511
   64e54:	01800044 	movi	r6,1
   64e58:	e17ffd17 	ldw	r5,-12(fp)
   64e5c:	01000134 	movhi	r4,4
   64e60:	21022b04 	addi	r4,r4,2220
   64e64:	0064d500 	call	64d50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   64e68:	01c07fc4 	movi	r7,511
   64e6c:	000d883a 	mov	r6,zero
   64e70:	e17ffe17 	ldw	r5,-8(fp)
   64e74:	01000134 	movhi	r4,4
   64e78:	21022804 	addi	r4,r4,2208
   64e7c:	0064d500 	call	64d50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   64e80:	01c07fc4 	movi	r7,511
   64e84:	01800044 	movi	r6,1
   64e88:	e17fff17 	ldw	r5,-4(fp)
   64e8c:	01000134 	movhi	r4,4
   64e90:	21022e04 	addi	r4,r4,2232
   64e94:	0064d500 	call	64d50 <alt_open_fd>
}  
   64e98:	0001883a 	nop
   64e9c:	e037883a 	mov	sp,fp
   64ea0:	dfc00117 	ldw	ra,4(sp)
   64ea4:	df000017 	ldw	fp,0(sp)
   64ea8:	dec00204 	addi	sp,sp,8
   64eac:	f800283a 	ret

00064eb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   64eb0:	defffe04 	addi	sp,sp,-8
   64eb4:	dfc00115 	stw	ra,4(sp)
   64eb8:	df000015 	stw	fp,0(sp)
   64ebc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   64ec0:	d0a00b17 	ldw	r2,-32724(gp)
   64ec4:	10000326 	beq	r2,zero,64ed4 <alt_get_errno+0x24>
   64ec8:	d0a00b17 	ldw	r2,-32724(gp)
   64ecc:	103ee83a 	callr	r2
   64ed0:	00000106 	br	64ed8 <alt_get_errno+0x28>
   64ed4:	d0a01604 	addi	r2,gp,-32680
}
   64ed8:	e037883a 	mov	sp,fp
   64edc:	dfc00117 	ldw	ra,4(sp)
   64ee0:	df000017 	ldw	fp,0(sp)
   64ee4:	dec00204 	addi	sp,sp,8
   64ee8:	f800283a 	ret

00064eec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   64eec:	defffb04 	addi	sp,sp,-20
   64ef0:	dfc00415 	stw	ra,16(sp)
   64ef4:	df000315 	stw	fp,12(sp)
   64ef8:	dc000215 	stw	r16,8(sp)
   64efc:	df000304 	addi	fp,sp,12
   64f00:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   64f04:	e0bffe17 	ldw	r2,-8(fp)
   64f08:	10800217 	ldw	r2,8(r2)
   64f0c:	10d00034 	orhi	r3,r2,16384
   64f10:	e0bffe17 	ldw	r2,-8(fp)
   64f14:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   64f18:	e03ffd15 	stw	zero,-12(fp)
   64f1c:	00002306 	br	64fac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   64f20:	04000134 	movhi	r16,4
   64f24:	84022804 	addi	r16,r16,2208
   64f28:	e0bffd17 	ldw	r2,-12(fp)
   64f2c:	01400304 	movi	r5,12
   64f30:	1009883a 	mov	r4,r2
   64f34:	006314c0 	call	6314c <__mulsi3>
   64f38:	8085883a 	add	r2,r16,r2
   64f3c:	10c00017 	ldw	r3,0(r2)
   64f40:	e0bffe17 	ldw	r2,-8(fp)
   64f44:	10800017 	ldw	r2,0(r2)
   64f48:	1880151e 	bne	r3,r2,64fa0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   64f4c:	04000134 	movhi	r16,4
   64f50:	84022804 	addi	r16,r16,2208
   64f54:	e0bffd17 	ldw	r2,-12(fp)
   64f58:	01400304 	movi	r5,12
   64f5c:	1009883a 	mov	r4,r2
   64f60:	006314c0 	call	6314c <__mulsi3>
   64f64:	8085883a 	add	r2,r16,r2
   64f68:	10800204 	addi	r2,r2,8
   64f6c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   64f70:	10000b0e 	bge	r2,zero,64fa0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   64f74:	01400304 	movi	r5,12
   64f78:	e13ffd17 	ldw	r4,-12(fp)
   64f7c:	006314c0 	call	6314c <__mulsi3>
   64f80:	1007883a 	mov	r3,r2
   64f84:	00800134 	movhi	r2,4
   64f88:	10822804 	addi	r2,r2,2208
   64f8c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   64f90:	e0bffe17 	ldw	r2,-8(fp)
   64f94:	18800226 	beq	r3,r2,64fa0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   64f98:	00bffcc4 	movi	r2,-13
   64f9c:	00000806 	br	64fc0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   64fa0:	e0bffd17 	ldw	r2,-12(fp)
   64fa4:	10800044 	addi	r2,r2,1
   64fa8:	e0bffd15 	stw	r2,-12(fp)
   64fac:	d0a00a17 	ldw	r2,-32728(gp)
   64fb0:	1007883a 	mov	r3,r2
   64fb4:	e0bffd17 	ldw	r2,-12(fp)
   64fb8:	18bfd92e 	bgeu	r3,r2,64f20 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   64fbc:	0005883a 	mov	r2,zero
}
   64fc0:	e6ffff04 	addi	sp,fp,-4
   64fc4:	dfc00217 	ldw	ra,8(sp)
   64fc8:	df000117 	ldw	fp,4(sp)
   64fcc:	dc000017 	ldw	r16,0(sp)
   64fd0:	dec00304 	addi	sp,sp,12
   64fd4:	f800283a 	ret

00064fd8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   64fd8:	defff604 	addi	sp,sp,-40
   64fdc:	dfc00915 	stw	ra,36(sp)
   64fe0:	df000815 	stw	fp,32(sp)
   64fe4:	df000804 	addi	fp,sp,32
   64fe8:	e13ffd15 	stw	r4,-12(fp)
   64fec:	e17ffe15 	stw	r5,-8(fp)
   64ff0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   64ff4:	00bfffc4 	movi	r2,-1
   64ff8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   64ffc:	00bffb44 	movi	r2,-19
   65000:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   65004:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   65008:	d1600804 	addi	r5,gp,-32736
   6500c:	e13ffd17 	ldw	r4,-12(fp)
   65010:	00652fc0 	call	652fc <alt_find_dev>
   65014:	e0bff815 	stw	r2,-32(fp)
   65018:	e0bff817 	ldw	r2,-32(fp)
   6501c:	1000051e 	bne	r2,zero,65034 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   65020:	e13ffd17 	ldw	r4,-12(fp)
   65024:	006538c0 	call	6538c <alt_find_file>
   65028:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   6502c:	00800044 	movi	r2,1
   65030:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   65034:	e0bff817 	ldw	r2,-32(fp)
   65038:	10002b26 	beq	r2,zero,650e8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   6503c:	e13ff817 	ldw	r4,-32(fp)
   65040:	00654940 	call	65494 <alt_get_fd>
   65044:	e0bff915 	stw	r2,-28(fp)
   65048:	e0bff917 	ldw	r2,-28(fp)
   6504c:	1000030e 	bge	r2,zero,6505c <open+0x84>
    {
      status = index;
   65050:	e0bff917 	ldw	r2,-28(fp)
   65054:	e0bffa15 	stw	r2,-24(fp)
   65058:	00002506 	br	650f0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   6505c:	01400304 	movi	r5,12
   65060:	e13ff917 	ldw	r4,-28(fp)
   65064:	006314c0 	call	6314c <__mulsi3>
   65068:	1007883a 	mov	r3,r2
   6506c:	00800134 	movhi	r2,4
   65070:	10822804 	addi	r2,r2,2208
   65074:	1885883a 	add	r2,r3,r2
   65078:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   6507c:	e0fffe17 	ldw	r3,-8(fp)
   65080:	00900034 	movhi	r2,16384
   65084:	10bfffc4 	addi	r2,r2,-1
   65088:	1886703a 	and	r3,r3,r2
   6508c:	e0bffc17 	ldw	r2,-16(fp)
   65090:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   65094:	e0bffb17 	ldw	r2,-20(fp)
   65098:	1000051e 	bne	r2,zero,650b0 <open+0xd8>
   6509c:	e13ffc17 	ldw	r4,-16(fp)
   650a0:	0064eec0 	call	64eec <alt_file_locked>
   650a4:	e0bffa15 	stw	r2,-24(fp)
   650a8:	e0bffa17 	ldw	r2,-24(fp)
   650ac:	10001016 	blt	r2,zero,650f0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   650b0:	e0bff817 	ldw	r2,-32(fp)
   650b4:	10800317 	ldw	r2,12(r2)
   650b8:	10000826 	beq	r2,zero,650dc <open+0x104>
   650bc:	e0bff817 	ldw	r2,-32(fp)
   650c0:	10800317 	ldw	r2,12(r2)
   650c4:	e1ffff17 	ldw	r7,-4(fp)
   650c8:	e1bffe17 	ldw	r6,-8(fp)
   650cc:	e17ffd17 	ldw	r5,-12(fp)
   650d0:	e13ffc17 	ldw	r4,-16(fp)
   650d4:	103ee83a 	callr	r2
   650d8:	00000106 	br	650e0 <open+0x108>
   650dc:	0005883a 	mov	r2,zero
   650e0:	e0bffa15 	stw	r2,-24(fp)
   650e4:	00000206 	br	650f0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   650e8:	00bffb44 	movi	r2,-19
   650ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   650f0:	e0bffa17 	ldw	r2,-24(fp)
   650f4:	1000090e 	bge	r2,zero,6511c <open+0x144>
  {
    alt_release_fd (index);  
   650f8:	e13ff917 	ldw	r4,-28(fp)
   650fc:	0063a180 	call	63a18 <alt_release_fd>
    ALT_ERRNO = -status;
   65100:	0064eb00 	call	64eb0 <alt_get_errno>
   65104:	1007883a 	mov	r3,r2
   65108:	e0bffa17 	ldw	r2,-24(fp)
   6510c:	0085c83a 	sub	r2,zero,r2
   65110:	18800015 	stw	r2,0(r3)
    return -1;
   65114:	00bfffc4 	movi	r2,-1
   65118:	00000106 	br	65120 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   6511c:	e0bff917 	ldw	r2,-28(fp)
}
   65120:	e037883a 	mov	sp,fp
   65124:	dfc00117 	ldw	ra,4(sp)
   65128:	df000017 	ldw	fp,0(sp)
   6512c:	dec00204 	addi	sp,sp,8
   65130:	f800283a 	ret

00065134 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   65134:	defffa04 	addi	sp,sp,-24
   65138:	df000515 	stw	fp,20(sp)
   6513c:	df000504 	addi	fp,sp,20
   65140:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   65144:	0005303a 	rdctl	r2,status
   65148:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   6514c:	e0fffc17 	ldw	r3,-16(fp)
   65150:	00bfff84 	movi	r2,-2
   65154:	1884703a 	and	r2,r3,r2
   65158:	1001703a 	wrctl	status,r2
  
  return context;
   6515c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   65160:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   65164:	e0bfff17 	ldw	r2,-4(fp)
   65168:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   6516c:	e0bffd17 	ldw	r2,-12(fp)
   65170:	10800017 	ldw	r2,0(r2)
   65174:	e0fffd17 	ldw	r3,-12(fp)
   65178:	18c00117 	ldw	r3,4(r3)
   6517c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   65180:	e0bffd17 	ldw	r2,-12(fp)
   65184:	10800117 	ldw	r2,4(r2)
   65188:	e0fffd17 	ldw	r3,-12(fp)
   6518c:	18c00017 	ldw	r3,0(r3)
   65190:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   65194:	e0bffd17 	ldw	r2,-12(fp)
   65198:	e0fffd17 	ldw	r3,-12(fp)
   6519c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   651a0:	e0bffd17 	ldw	r2,-12(fp)
   651a4:	e0fffd17 	ldw	r3,-12(fp)
   651a8:	10c00015 	stw	r3,0(r2)
   651ac:	e0bffb17 	ldw	r2,-20(fp)
   651b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   651b4:	e0bffe17 	ldw	r2,-8(fp)
   651b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   651bc:	0001883a 	nop
   651c0:	e037883a 	mov	sp,fp
   651c4:	df000017 	ldw	fp,0(sp)
   651c8:	dec00104 	addi	sp,sp,4
   651cc:	f800283a 	ret

000651d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   651d0:	defffb04 	addi	sp,sp,-20
   651d4:	dfc00415 	stw	ra,16(sp)
   651d8:	df000315 	stw	fp,12(sp)
   651dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   651e0:	d0a00e17 	ldw	r2,-32712(gp)
   651e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   651e8:	d0a01c17 	ldw	r2,-32656(gp)
   651ec:	10800044 	addi	r2,r2,1
   651f0:	d0a01c15 	stw	r2,-32656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   651f4:	00002e06 	br	652b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   651f8:	e0bffd17 	ldw	r2,-12(fp)
   651fc:	10800017 	ldw	r2,0(r2)
   65200:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   65204:	e0bffd17 	ldw	r2,-12(fp)
   65208:	10800403 	ldbu	r2,16(r2)
   6520c:	10803fcc 	andi	r2,r2,255
   65210:	10000426 	beq	r2,zero,65224 <alt_tick+0x54>
   65214:	d0a01c17 	ldw	r2,-32656(gp)
   65218:	1000021e 	bne	r2,zero,65224 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   6521c:	e0bffd17 	ldw	r2,-12(fp)
   65220:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   65224:	e0bffd17 	ldw	r2,-12(fp)
   65228:	10800217 	ldw	r2,8(r2)
   6522c:	d0e01c17 	ldw	r3,-32656(gp)
   65230:	18801d36 	bltu	r3,r2,652a8 <alt_tick+0xd8>
   65234:	e0bffd17 	ldw	r2,-12(fp)
   65238:	10800403 	ldbu	r2,16(r2)
   6523c:	10803fcc 	andi	r2,r2,255
   65240:	1000191e 	bne	r2,zero,652a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   65244:	e0bffd17 	ldw	r2,-12(fp)
   65248:	10800317 	ldw	r2,12(r2)
   6524c:	e0fffd17 	ldw	r3,-12(fp)
   65250:	18c00517 	ldw	r3,20(r3)
   65254:	1809883a 	mov	r4,r3
   65258:	103ee83a 	callr	r2
   6525c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   65260:	e0bfff17 	ldw	r2,-4(fp)
   65264:	1000031e 	bne	r2,zero,65274 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   65268:	e13ffd17 	ldw	r4,-12(fp)
   6526c:	00651340 	call	65134 <alt_alarm_stop>
   65270:	00000d06 	br	652a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   65274:	e0bffd17 	ldw	r2,-12(fp)
   65278:	10c00217 	ldw	r3,8(r2)
   6527c:	e0bfff17 	ldw	r2,-4(fp)
   65280:	1887883a 	add	r3,r3,r2
   65284:	e0bffd17 	ldw	r2,-12(fp)
   65288:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   6528c:	e0bffd17 	ldw	r2,-12(fp)
   65290:	10c00217 	ldw	r3,8(r2)
   65294:	d0a01c17 	ldw	r2,-32656(gp)
   65298:	1880032e 	bgeu	r3,r2,652a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   6529c:	e0bffd17 	ldw	r2,-12(fp)
   652a0:	00c00044 	movi	r3,1
   652a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   652a8:	e0bffe17 	ldw	r2,-8(fp)
   652ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   652b0:	e0fffd17 	ldw	r3,-12(fp)
   652b4:	d0a00e04 	addi	r2,gp,-32712
   652b8:	18bfcf1e 	bne	r3,r2,651f8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   652bc:	0001883a 	nop
}
   652c0:	0001883a 	nop
   652c4:	e037883a 	mov	sp,fp
   652c8:	dfc00117 	ldw	ra,4(sp)
   652cc:	df000017 	ldw	fp,0(sp)
   652d0:	dec00204 	addi	sp,sp,8
   652d4:	f800283a 	ret

000652d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   652d8:	deffff04 	addi	sp,sp,-4
   652dc:	df000015 	stw	fp,0(sp)
   652e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   652e4:	000170fa 	wrctl	ienable,zero
}
   652e8:	0001883a 	nop
   652ec:	e037883a 	mov	sp,fp
   652f0:	df000017 	ldw	fp,0(sp)
   652f4:	dec00104 	addi	sp,sp,4
   652f8:	f800283a 	ret

000652fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   652fc:	defffa04 	addi	sp,sp,-24
   65300:	dfc00515 	stw	ra,20(sp)
   65304:	df000415 	stw	fp,16(sp)
   65308:	df000404 	addi	fp,sp,16
   6530c:	e13ffe15 	stw	r4,-8(fp)
   65310:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   65314:	e0bfff17 	ldw	r2,-4(fp)
   65318:	10800017 	ldw	r2,0(r2)
   6531c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   65320:	e13ffe17 	ldw	r4,-8(fp)
   65324:	00605f00 	call	605f0 <strlen>
   65328:	10800044 	addi	r2,r2,1
   6532c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   65330:	00000d06 	br	65368 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   65334:	e0bffc17 	ldw	r2,-16(fp)
   65338:	10800217 	ldw	r2,8(r2)
   6533c:	e0fffd17 	ldw	r3,-12(fp)
   65340:	180d883a 	mov	r6,r3
   65344:	e17ffe17 	ldw	r5,-8(fp)
   65348:	1009883a 	mov	r4,r2
   6534c:	00656400 	call	65640 <memcmp>
   65350:	1000021e 	bne	r2,zero,6535c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   65354:	e0bffc17 	ldw	r2,-16(fp)
   65358:	00000706 	br	65378 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   6535c:	e0bffc17 	ldw	r2,-16(fp)
   65360:	10800017 	ldw	r2,0(r2)
   65364:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   65368:	e0fffc17 	ldw	r3,-16(fp)
   6536c:	e0bfff17 	ldw	r2,-4(fp)
   65370:	18bff01e 	bne	r3,r2,65334 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   65374:	0005883a 	mov	r2,zero
}
   65378:	e037883a 	mov	sp,fp
   6537c:	dfc00117 	ldw	ra,4(sp)
   65380:	df000017 	ldw	fp,0(sp)
   65384:	dec00204 	addi	sp,sp,8
   65388:	f800283a 	ret

0006538c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   6538c:	defffb04 	addi	sp,sp,-20
   65390:	dfc00415 	stw	ra,16(sp)
   65394:	df000315 	stw	fp,12(sp)
   65398:	df000304 	addi	fp,sp,12
   6539c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   653a0:	d0a00617 	ldw	r2,-32744(gp)
   653a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   653a8:	00003106 	br	65470 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   653ac:	e0bffd17 	ldw	r2,-12(fp)
   653b0:	10800217 	ldw	r2,8(r2)
   653b4:	1009883a 	mov	r4,r2
   653b8:	00605f00 	call	605f0 <strlen>
   653bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   653c0:	e0bffd17 	ldw	r2,-12(fp)
   653c4:	10c00217 	ldw	r3,8(r2)
   653c8:	e0bffe17 	ldw	r2,-8(fp)
   653cc:	10bfffc4 	addi	r2,r2,-1
   653d0:	1885883a 	add	r2,r3,r2
   653d4:	10800003 	ldbu	r2,0(r2)
   653d8:	10803fcc 	andi	r2,r2,255
   653dc:	1080201c 	xori	r2,r2,128
   653e0:	10bfe004 	addi	r2,r2,-128
   653e4:	10800bd8 	cmpnei	r2,r2,47
   653e8:	1000031e 	bne	r2,zero,653f8 <alt_find_file+0x6c>
    {
      len -= 1;
   653ec:	e0bffe17 	ldw	r2,-8(fp)
   653f0:	10bfffc4 	addi	r2,r2,-1
   653f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   653f8:	e0bffe17 	ldw	r2,-8(fp)
   653fc:	e0ffff17 	ldw	r3,-4(fp)
   65400:	1885883a 	add	r2,r3,r2
   65404:	10800003 	ldbu	r2,0(r2)
   65408:	10803fcc 	andi	r2,r2,255
   6540c:	1080201c 	xori	r2,r2,128
   65410:	10bfe004 	addi	r2,r2,-128
   65414:	10800be0 	cmpeqi	r2,r2,47
   65418:	1000081e 	bne	r2,zero,6543c <alt_find_file+0xb0>
   6541c:	e0bffe17 	ldw	r2,-8(fp)
   65420:	e0ffff17 	ldw	r3,-4(fp)
   65424:	1885883a 	add	r2,r3,r2
   65428:	10800003 	ldbu	r2,0(r2)
   6542c:	10803fcc 	andi	r2,r2,255
   65430:	1080201c 	xori	r2,r2,128
   65434:	10bfe004 	addi	r2,r2,-128
   65438:	10000a1e 	bne	r2,zero,65464 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   6543c:	e0bffd17 	ldw	r2,-12(fp)
   65440:	10800217 	ldw	r2,8(r2)
   65444:	e0fffe17 	ldw	r3,-8(fp)
   65448:	180d883a 	mov	r6,r3
   6544c:	e17fff17 	ldw	r5,-4(fp)
   65450:	1009883a 	mov	r4,r2
   65454:	00656400 	call	65640 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   65458:	1000021e 	bne	r2,zero,65464 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   6545c:	e0bffd17 	ldw	r2,-12(fp)
   65460:	00000706 	br	65480 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   65464:	e0bffd17 	ldw	r2,-12(fp)
   65468:	10800017 	ldw	r2,0(r2)
   6546c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   65470:	e0fffd17 	ldw	r3,-12(fp)
   65474:	d0a00604 	addi	r2,gp,-32744
   65478:	18bfcc1e 	bne	r3,r2,653ac <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   6547c:	0005883a 	mov	r2,zero
}
   65480:	e037883a 	mov	sp,fp
   65484:	dfc00117 	ldw	ra,4(sp)
   65488:	df000017 	ldw	fp,0(sp)
   6548c:	dec00204 	addi	sp,sp,8
   65490:	f800283a 	ret

00065494 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   65494:	defffa04 	addi	sp,sp,-24
   65498:	dfc00515 	stw	ra,20(sp)
   6549c:	df000415 	stw	fp,16(sp)
   654a0:	dc000315 	stw	r16,12(sp)
   654a4:	df000404 	addi	fp,sp,16
   654a8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   654ac:	00bffa04 	movi	r2,-24
   654b0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   654b4:	e03ffc15 	stw	zero,-16(fp)
   654b8:	00001d06 	br	65530 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   654bc:	04000134 	movhi	r16,4
   654c0:	84022804 	addi	r16,r16,2208
   654c4:	e0bffc17 	ldw	r2,-16(fp)
   654c8:	01400304 	movi	r5,12
   654cc:	1009883a 	mov	r4,r2
   654d0:	006314c0 	call	6314c <__mulsi3>
   654d4:	8085883a 	add	r2,r16,r2
   654d8:	10800017 	ldw	r2,0(r2)
   654dc:	1000111e 	bne	r2,zero,65524 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   654e0:	04000134 	movhi	r16,4
   654e4:	84022804 	addi	r16,r16,2208
   654e8:	e0bffc17 	ldw	r2,-16(fp)
   654ec:	01400304 	movi	r5,12
   654f0:	1009883a 	mov	r4,r2
   654f4:	006314c0 	call	6314c <__mulsi3>
   654f8:	8085883a 	add	r2,r16,r2
   654fc:	e0fffe17 	ldw	r3,-8(fp)
   65500:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   65504:	d0e00a17 	ldw	r3,-32728(gp)
   65508:	e0bffc17 	ldw	r2,-16(fp)
   6550c:	1880020e 	bge	r3,r2,65518 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   65510:	e0bffc17 	ldw	r2,-16(fp)
   65514:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   65518:	e0bffc17 	ldw	r2,-16(fp)
   6551c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   65520:	00000606 	br	6553c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   65524:	e0bffc17 	ldw	r2,-16(fp)
   65528:	10800044 	addi	r2,r2,1
   6552c:	e0bffc15 	stw	r2,-16(fp)
   65530:	e0bffc17 	ldw	r2,-16(fp)
   65534:	10800810 	cmplti	r2,r2,32
   65538:	103fe01e 	bne	r2,zero,654bc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   6553c:	e0bffd17 	ldw	r2,-12(fp)
}
   65540:	e6ffff04 	addi	sp,fp,-4
   65544:	dfc00217 	ldw	ra,8(sp)
   65548:	df000117 	ldw	fp,4(sp)
   6554c:	dc000017 	ldw	r16,0(sp)
   65550:	dec00304 	addi	sp,sp,12
   65554:	f800283a 	ret

00065558 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   65558:	defffe04 	addi	sp,sp,-8
   6555c:	df000115 	stw	fp,4(sp)
   65560:	df000104 	addi	fp,sp,4
   65564:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   65568:	e0bfff17 	ldw	r2,-4(fp)
   6556c:	10bffe84 	addi	r2,r2,-6
   65570:	10c00428 	cmpgeui	r3,r2,16
   65574:	18001a1e 	bne	r3,zero,655e0 <alt_exception_cause_generated_bad_addr+0x88>
   65578:	100690ba 	slli	r3,r2,2
   6557c:	008001b4 	movhi	r2,6
   65580:	10956404 	addi	r2,r2,21904
   65584:	1885883a 	add	r2,r3,r2
   65588:	10800017 	ldw	r2,0(r2)
   6558c:	1000683a 	jmp	r2
   65590:	000655d0 	cmplti	zero,zero,6487
   65594:	000655d0 	cmplti	zero,zero,6487
   65598:	000655e0 	cmpeqi	zero,zero,6487
   6559c:	000655e0 	cmpeqi	zero,zero,6487
   655a0:	000655e0 	cmpeqi	zero,zero,6487
   655a4:	000655d0 	cmplti	zero,zero,6487
   655a8:	000655d8 	cmpnei	zero,zero,6487
   655ac:	000655e0 	cmpeqi	zero,zero,6487
   655b0:	000655d0 	cmplti	zero,zero,6487
   655b4:	000655d0 	cmplti	zero,zero,6487
   655b8:	000655e0 	cmpeqi	zero,zero,6487
   655bc:	000655d0 	cmplti	zero,zero,6487
   655c0:	000655d8 	cmpnei	zero,zero,6487
   655c4:	000655e0 	cmpeqi	zero,zero,6487
   655c8:	000655e0 	cmpeqi	zero,zero,6487
   655cc:	000655d0 	cmplti	zero,zero,6487
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   655d0:	00800044 	movi	r2,1
   655d4:	00000306 	br	655e4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   655d8:	0005883a 	mov	r2,zero
   655dc:	00000106 	br	655e4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   655e0:	0005883a 	mov	r2,zero
  }
}
   655e4:	e037883a 	mov	sp,fp
   655e8:	df000017 	ldw	fp,0(sp)
   655ec:	dec00104 	addi	sp,sp,4
   655f0:	f800283a 	ret

000655f4 <atexit>:
   655f4:	200b883a 	mov	r5,r4
   655f8:	000f883a 	mov	r7,zero
   655fc:	000d883a 	mov	r6,zero
   65600:	0009883a 	mov	r4,zero
   65604:	00656bc1 	jmpi	656bc <__register_exitproc>

00065608 <exit>:
   65608:	defffe04 	addi	sp,sp,-8
   6560c:	000b883a 	mov	r5,zero
   65610:	dc000015 	stw	r16,0(sp)
   65614:	dfc00115 	stw	ra,4(sp)
   65618:	2021883a 	mov	r16,r4
   6561c:	00657d40 	call	657d4 <__call_exitprocs>
   65620:	00800134 	movhi	r2,4
   65624:	1086a204 	addi	r2,r2,6792
   65628:	11000017 	ldw	r4,0(r2)
   6562c:	20800f17 	ldw	r2,60(r4)
   65630:	10000126 	beq	r2,zero,65638 <exit+0x30>
   65634:	103ee83a 	callr	r2
   65638:	8009883a 	mov	r4,r16
   6563c:	00659540 	call	65954 <_exit>

00065640 <memcmp>:
   65640:	01c000c4 	movi	r7,3
   65644:	3980192e 	bgeu	r7,r6,656ac <memcmp+0x6c>
   65648:	2144b03a 	or	r2,r4,r5
   6564c:	11c4703a 	and	r2,r2,r7
   65650:	10000f26 	beq	r2,zero,65690 <memcmp+0x50>
   65654:	20800003 	ldbu	r2,0(r4)
   65658:	28c00003 	ldbu	r3,0(r5)
   6565c:	10c0151e 	bne	r2,r3,656b4 <memcmp+0x74>
   65660:	31bfff84 	addi	r6,r6,-2
   65664:	01ffffc4 	movi	r7,-1
   65668:	00000406 	br	6567c <memcmp+0x3c>
   6566c:	20800003 	ldbu	r2,0(r4)
   65670:	28c00003 	ldbu	r3,0(r5)
   65674:	31bfffc4 	addi	r6,r6,-1
   65678:	10c00e1e 	bne	r2,r3,656b4 <memcmp+0x74>
   6567c:	21000044 	addi	r4,r4,1
   65680:	29400044 	addi	r5,r5,1
   65684:	31fff91e 	bne	r6,r7,6566c <memcmp+0x2c>
   65688:	0005883a 	mov	r2,zero
   6568c:	f800283a 	ret
   65690:	20c00017 	ldw	r3,0(r4)
   65694:	28800017 	ldw	r2,0(r5)
   65698:	18bfee1e 	bne	r3,r2,65654 <memcmp+0x14>
   6569c:	31bfff04 	addi	r6,r6,-4
   656a0:	21000104 	addi	r4,r4,4
   656a4:	29400104 	addi	r5,r5,4
   656a8:	39bff936 	bltu	r7,r6,65690 <memcmp+0x50>
   656ac:	303fe91e 	bne	r6,zero,65654 <memcmp+0x14>
   656b0:	003ff506 	br	65688 <memcmp+0x48>
   656b4:	10c5c83a 	sub	r2,r2,r3
   656b8:	f800283a 	ret

000656bc <__register_exitproc>:
   656bc:	defffa04 	addi	sp,sp,-24
   656c0:	dc000315 	stw	r16,12(sp)
   656c4:	04000134 	movhi	r16,4
   656c8:	8406a204 	addi	r16,r16,6792
   656cc:	80c00017 	ldw	r3,0(r16)
   656d0:	dc400415 	stw	r17,16(sp)
   656d4:	dfc00515 	stw	ra,20(sp)
   656d8:	18805217 	ldw	r2,328(r3)
   656dc:	2023883a 	mov	r17,r4
   656e0:	10003726 	beq	r2,zero,657c0 <__register_exitproc+0x104>
   656e4:	10c00117 	ldw	r3,4(r2)
   656e8:	010007c4 	movi	r4,31
   656ec:	20c00e16 	blt	r4,r3,65728 <__register_exitproc+0x6c>
   656f0:	1a000044 	addi	r8,r3,1
   656f4:	8800221e 	bne	r17,zero,65780 <__register_exitproc+0xc4>
   656f8:	18c00084 	addi	r3,r3,2
   656fc:	18c7883a 	add	r3,r3,r3
   65700:	18c7883a 	add	r3,r3,r3
   65704:	12000115 	stw	r8,4(r2)
   65708:	10c7883a 	add	r3,r2,r3
   6570c:	19400015 	stw	r5,0(r3)
   65710:	0005883a 	mov	r2,zero
   65714:	dfc00517 	ldw	ra,20(sp)
   65718:	dc400417 	ldw	r17,16(sp)
   6571c:	dc000317 	ldw	r16,12(sp)
   65720:	dec00604 	addi	sp,sp,24
   65724:	f800283a 	ret
   65728:	00800034 	movhi	r2,0
   6572c:	10800004 	addi	r2,r2,0
   65730:	10002626 	beq	r2,zero,657cc <__register_exitproc+0x110>
   65734:	01006404 	movi	r4,400
   65738:	d9400015 	stw	r5,0(sp)
   6573c:	d9800115 	stw	r6,4(sp)
   65740:	d9c00215 	stw	r7,8(sp)
   65744:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x40000>
   65748:	d9400017 	ldw	r5,0(sp)
   6574c:	d9800117 	ldw	r6,4(sp)
   65750:	d9c00217 	ldw	r7,8(sp)
   65754:	10001d26 	beq	r2,zero,657cc <__register_exitproc+0x110>
   65758:	81000017 	ldw	r4,0(r16)
   6575c:	10000115 	stw	zero,4(r2)
   65760:	02000044 	movi	r8,1
   65764:	22405217 	ldw	r9,328(r4)
   65768:	0007883a 	mov	r3,zero
   6576c:	12400015 	stw	r9,0(r2)
   65770:	20805215 	stw	r2,328(r4)
   65774:	10006215 	stw	zero,392(r2)
   65778:	10006315 	stw	zero,396(r2)
   6577c:	883fde26 	beq	r17,zero,656f8 <__register_exitproc+0x3c>
   65780:	18c9883a 	add	r4,r3,r3
   65784:	2109883a 	add	r4,r4,r4
   65788:	1109883a 	add	r4,r2,r4
   6578c:	21802215 	stw	r6,136(r4)
   65790:	01800044 	movi	r6,1
   65794:	12406217 	ldw	r9,392(r2)
   65798:	30cc983a 	sll	r6,r6,r3
   6579c:	4992b03a 	or	r9,r9,r6
   657a0:	12406215 	stw	r9,392(r2)
   657a4:	21c04215 	stw	r7,264(r4)
   657a8:	01000084 	movi	r4,2
   657ac:	893fd21e 	bne	r17,r4,656f8 <__register_exitproc+0x3c>
   657b0:	11006317 	ldw	r4,396(r2)
   657b4:	218cb03a 	or	r6,r4,r6
   657b8:	11806315 	stw	r6,396(r2)
   657bc:	003fce06 	br	656f8 <__register_exitproc+0x3c>
   657c0:	18805304 	addi	r2,r3,332
   657c4:	18805215 	stw	r2,328(r3)
   657c8:	003fc606 	br	656e4 <__register_exitproc+0x28>
   657cc:	00bfffc4 	movi	r2,-1
   657d0:	003fd006 	br	65714 <__register_exitproc+0x58>

000657d4 <__call_exitprocs>:
   657d4:	defff504 	addi	sp,sp,-44
   657d8:	df000915 	stw	fp,36(sp)
   657dc:	dd400615 	stw	r21,24(sp)
   657e0:	dc800315 	stw	r18,12(sp)
   657e4:	dfc00a15 	stw	ra,40(sp)
   657e8:	ddc00815 	stw	r23,32(sp)
   657ec:	dd800715 	stw	r22,28(sp)
   657f0:	dd000515 	stw	r20,20(sp)
   657f4:	dcc00415 	stw	r19,16(sp)
   657f8:	dc400215 	stw	r17,8(sp)
   657fc:	dc000115 	stw	r16,4(sp)
   65800:	d9000015 	stw	r4,0(sp)
   65804:	2839883a 	mov	fp,r5
   65808:	04800044 	movi	r18,1
   6580c:	057fffc4 	movi	r21,-1
   65810:	00800134 	movhi	r2,4
   65814:	1086a204 	addi	r2,r2,6792
   65818:	12000017 	ldw	r8,0(r2)
   6581c:	45005217 	ldw	r20,328(r8)
   65820:	44c05204 	addi	r19,r8,328
   65824:	a0001c26 	beq	r20,zero,65898 <__call_exitprocs+0xc4>
   65828:	a0800117 	ldw	r2,4(r20)
   6582c:	15ffffc4 	addi	r23,r2,-1
   65830:	b8000d16 	blt	r23,zero,65868 <__call_exitprocs+0x94>
   65834:	14000044 	addi	r16,r2,1
   65838:	8421883a 	add	r16,r16,r16
   6583c:	8421883a 	add	r16,r16,r16
   65840:	84402004 	addi	r17,r16,128
   65844:	a463883a 	add	r17,r20,r17
   65848:	a421883a 	add	r16,r20,r16
   6584c:	e0001e26 	beq	fp,zero,658c8 <__call_exitprocs+0xf4>
   65850:	80804017 	ldw	r2,256(r16)
   65854:	e0801c26 	beq	fp,r2,658c8 <__call_exitprocs+0xf4>
   65858:	bdffffc4 	addi	r23,r23,-1
   6585c:	843fff04 	addi	r16,r16,-4
   65860:	8c7fff04 	addi	r17,r17,-4
   65864:	bd7ff91e 	bne	r23,r21,6584c <__call_exitprocs+0x78>
   65868:	00800034 	movhi	r2,0
   6586c:	10800004 	addi	r2,r2,0
   65870:	10000926 	beq	r2,zero,65898 <__call_exitprocs+0xc4>
   65874:	a0800117 	ldw	r2,4(r20)
   65878:	1000301e 	bne	r2,zero,6593c <__call_exitprocs+0x168>
   6587c:	a0800017 	ldw	r2,0(r20)
   65880:	10003226 	beq	r2,zero,6594c <__call_exitprocs+0x178>
   65884:	a009883a 	mov	r4,r20
   65888:	98800015 	stw	r2,0(r19)
   6588c:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x40000>
   65890:	9d000017 	ldw	r20,0(r19)
   65894:	a03fe41e 	bne	r20,zero,65828 <__call_exitprocs+0x54>
   65898:	dfc00a17 	ldw	ra,40(sp)
   6589c:	df000917 	ldw	fp,36(sp)
   658a0:	ddc00817 	ldw	r23,32(sp)
   658a4:	dd800717 	ldw	r22,28(sp)
   658a8:	dd400617 	ldw	r21,24(sp)
   658ac:	dd000517 	ldw	r20,20(sp)
   658b0:	dcc00417 	ldw	r19,16(sp)
   658b4:	dc800317 	ldw	r18,12(sp)
   658b8:	dc400217 	ldw	r17,8(sp)
   658bc:	dc000117 	ldw	r16,4(sp)
   658c0:	dec00b04 	addi	sp,sp,44
   658c4:	f800283a 	ret
   658c8:	a0800117 	ldw	r2,4(r20)
   658cc:	80c00017 	ldw	r3,0(r16)
   658d0:	10bfffc4 	addi	r2,r2,-1
   658d4:	15c01426 	beq	r2,r23,65928 <__call_exitprocs+0x154>
   658d8:	80000015 	stw	zero,0(r16)
   658dc:	183fde26 	beq	r3,zero,65858 <__call_exitprocs+0x84>
   658e0:	95c8983a 	sll	r4,r18,r23
   658e4:	a0806217 	ldw	r2,392(r20)
   658e8:	a5800117 	ldw	r22,4(r20)
   658ec:	2084703a 	and	r2,r4,r2
   658f0:	10000b26 	beq	r2,zero,65920 <__call_exitprocs+0x14c>
   658f4:	a0806317 	ldw	r2,396(r20)
   658f8:	2088703a 	and	r4,r4,r2
   658fc:	20000c1e 	bne	r4,zero,65930 <__call_exitprocs+0x15c>
   65900:	89400017 	ldw	r5,0(r17)
   65904:	d9000017 	ldw	r4,0(sp)
   65908:	183ee83a 	callr	r3
   6590c:	a0800117 	ldw	r2,4(r20)
   65910:	15bfbf1e 	bne	r2,r22,65810 <__call_exitprocs+0x3c>
   65914:	98800017 	ldw	r2,0(r19)
   65918:	153fcf26 	beq	r2,r20,65858 <__call_exitprocs+0x84>
   6591c:	003fbc06 	br	65810 <__call_exitprocs+0x3c>
   65920:	183ee83a 	callr	r3
   65924:	003ff906 	br	6590c <__call_exitprocs+0x138>
   65928:	a5c00115 	stw	r23,4(r20)
   6592c:	003feb06 	br	658dc <__call_exitprocs+0x108>
   65930:	89000017 	ldw	r4,0(r17)
   65934:	183ee83a 	callr	r3
   65938:	003ff406 	br	6590c <__call_exitprocs+0x138>
   6593c:	a0800017 	ldw	r2,0(r20)
   65940:	a027883a 	mov	r19,r20
   65944:	1029883a 	mov	r20,r2
   65948:	003fb606 	br	65824 <__call_exitprocs+0x50>
   6594c:	0005883a 	mov	r2,zero
   65950:	003ffb06 	br	65940 <__call_exitprocs+0x16c>

00065954 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   65954:	defffd04 	addi	sp,sp,-12
   65958:	df000215 	stw	fp,8(sp)
   6595c:	df000204 	addi	fp,sp,8
   65960:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   65964:	0001883a 	nop
   65968:	e0bfff17 	ldw	r2,-4(fp)
   6596c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   65970:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   65974:	10000226 	beq	r2,zero,65980 <_exit+0x2c>
    ALT_SIM_FAIL();
   65978:	002af070 	cmpltui	zero,zero,43969
   6597c:	00000106 	br	65984 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   65980:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   65984:	003fff06 	br	65984 <_exit+0x30>
